{"query": "Where is OAuth token validated?", "positive_text": "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "positive_doc_id": "/Users/davidmontgomery/agro/server/app.py:1-42", "negative_texts": ["from common.paths import *  # noqa: F401,F403\n\n", "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope", "from common.filtering import *  # noqa: F401,F403\n", "from common.config_loader import *  # noqa: F401,F403\n\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro/path_config.py:1-3", "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28", "/Users/davidmontgomery/agro/filtering.py:1-2", "/Users/davidmontgomery/agro/config_loader.py:1-3"], "source": "golden.json"}
{"query": "Test question from curl", "positive_text": "#!/usr/bin/env python3\nfrom __future__ import annotations\nfrom fastapi.testclient import TestClient\nimport io\nfrom pathlib import Path\nimport json, sys\nROOT = Path(__file__).resolve().parents[1]\nsys.path.insert(0, str(ROOT))\n# Provide a lightweight stub for rerankers to avoid import-time type errors\nimport types as _types\nif 'rerankers' not in sys.modules:\n    m = _types.ModuleType('rerankers')\n    class Reranker:  # minimal placeholder\n        def __init__(self, *a, **k):\n            pass\n    m", "positive_doc_id": "/Users/davidmontgomery/agro/scripts/test_backend.py:1-20", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"Mine training triplets from golden.json test questions.\n\nRuns each golden question through retrieval and generates triplets\nbased on expect_paths matches.\n\"\"\"\nimport json\nimport sys\nfrom pathlib import Path\n\n# Add parent dir to path so we can import retrieval\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom retrieval.hybrid_search import search\n\n# Get repo root (scripts/ -> agro/)\nREPO_ROOT = Path(__file__).parent.parent\nGOLDEN = REPO_ROOT / \"golden.json\"\nOUT", "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "# server/metrics.py\n# AGRO Prometheus instrumentation (FastAPI-first).\n# Exposes /metrics and provides helpers for RAG/canary metrics you asked for.\n\nfrom contextlib import contextmanager\nfrom typing import Optional\nimport time\n\nfrom prometheus_client import (\n    Counter, Histogram, Gauge, make_asgi_app\n)\n\n# Latency buckets tuned for LLM/RAG (seconds)\nLATENCY_BUCKETS = (0.05, 0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 13, 21, 34, 60)\n\n# ---- Core request & latency ----\nREQUESTS_TOTAL = Counter(\n    \"agro_r", "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h"], "negative_doc_ids": ["/Users/davidmontgomery/agro/scripts/mine_from_golden.py:1-20", "/Users/davidmontgomery/agro/server/mcp/server.py:1-25", "/Users/davidmontgomery/agro/server/metrics.py:1-88", "/Users/davidmontgomery/agro/server/app.py:1-42"], "source": "golden.json"}
{"query": "Where is hybrid retrieval implemented?", "positive_text": "import os\nimport json\nimport collections\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom common.config_loader import choose_repo_from_query, get_default_repo, out_dir\nfrom dotenv import load_dotenv, find_dotenv\n\n# Load any existing env ASAP so downstream imports (e.g., rerank backend) see them\ntry:\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\nfrom qdrant_client import QdrantClient, models\nimport bm25s\nfrom bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer", "positive_doc_id": "/Users/davidmontgomery/agro/retrieval/hybrid_search.py:1-23", "negative_texts": ["  - `indexer/`: indexing + cards\n    - `indexer/index_repo.py`\n    - `indexer/build_cards.py`\n\n- Root shims (keep CLI paths and imports stable)\n- Removed root shims. Use canonical modules:\n  - API app: `uvicorn server.app:app`\n  - `config_loader.py` → re-exports `common/config_loader.py`\n  - `path_config.py` → re-exports `common/paths.py`\n  - `filtering.py` → re-exports `common/filtering.py`\n  - `metadata_enricher.py` → re-exports `common/metadata.py`\n  - `qdrant_recreate_fallback.py` → re-expor", "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "from __future__ import annotations\nimport os\nimport json\nimport urllib.request\nimport urllib.error\nimport urllib.parse\nfrom typing import Dict, Any\n\nfrom fastmcp import FastMCP\n\n# Canonical imports\nfrom server.langgraph_app import build_graph\nfrom retrieval.hybrid_search import search_routed_multi\nfrom common.config_loader import list_repos\n\n\nmcp = FastMCP(\"rag-service\")\n_graph = None\n\n_get_graph():\n    global _graph\n    if _graph is None:\n        _graph = build_graph()\n    return _graph\n\n\n@mcp.", "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli"], "negative_doc_ids": ["/Users/davidmontgomery/agro/MIGRATION.md:1-26", "/Users/davidmontgomery/agro/server/app.py:1-42", "/Users/davidmontgomery/agro/server/mcp/http.py:1-27", "/Users/davidmontgomery/agro/server/mcp/server.py:1-25"], "source": "golden.json"}
{"query": "Where is keyword generation handled server-side?", "positive_text": "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "positive_doc_id": "/Users/davidmontgomery/agro/server/app.py:1-42", "negative_texts": ["| **Reranker** | Cross-encoder reranking with feedback collection and model training | `retrieval/rerank.py`, `gui/js/reranker.js` |\n| **Embedding Cache** | Caches embeddings to avoid recomputation | `retrieval/embed_cache.py` |\n| **AST Chunker** | Language-aware code chunking | `retrieval/ast_chunker.py` |\n| **Filtering** | File and directory exclusion rules | `common/filtering.py` |\n| **Config Loader** | Repository paths and settings management | `common/config_loader.py` |\n| **Tracing** | Cap", "import os\nimport json\nimport collections\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom common.config_loader import choose_repo_from_query, get_default_repo, out_dir\nfrom dotenv import load_dotenv, find_dotenv\n\n# Load any existing env ASAP so downstream imports (e.g., rerank backend) see them\ntry:\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\nfrom qdrant_client import QdrantClient, models\nimport bm25s\nfrom bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer", "from __future__ import annotations\n\nimport os\nimport json\nimport time\nimport uuid\nimport queue\nimport threading\nfrom dataclasses import dataclass, field\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional, Iterator, List\n\nfrom common.config_loader import out_dir\nfrom server.env_model import generate_text\n\n\nQUICK_TIPS = [\n    \"Put repo-specific nouns in Discriminative to improve filename/path hits.\",\n    \"Add Semantic synonyms: auth→oauth,jwt,bearer; events→sse,ws,subscribe.\",\n    \"Sh", "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli"], "negative_doc_ids": ["/Users/davidmontgomery/agro/README.md:1-25", "/Users/davidmontgomery/agro/retrieval/hybrid_search.py:1-23", "/Users/davidmontgomery/agro/server/cards_builder.py:1-33", "/Users/davidmontgomery/agro/server/mcp/server.py:1-25"], "source": "golden.json"}
{"query": "Where is the metadata enrichment logic for code/keywords?", "positive_text": "from common.metadata import *  # noqa: F401,F403\n            txt = r.choices[0].message.content or \"{}\"\n        except Exception as e:\n            return {\"summary\": f\"OpenAI error: {str(e)[:100]}\", \"keywords\": []}\n\n    # Parse JSON response\n    # Parse JSON response; if model returned plain text, fallback to capturing tokens\n    try:\n        data = json.loads(txt)\n        if isinstance(data, dict):\n            kws = data.get(\"keywords\") or []\n            if isinstance(kws, str):\n               ", "positive_doc_id": "/Users/davidmontgomery/agro/metadata_enricher.py:1-24", "negative_texts": ["#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "from __future__ import annotations\n\nimport os\nimport json\nimport time\nimport uuid\nimport queue\nimport threading\nfrom dataclasses import dataclass, field\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional, Iterator, List\n\nfrom common.config_loader import out_dir\nfrom server.env_model import generate_text\n\n\nQUICK_TIPS = [\n    \"Put repo-specific nouns in Discriminative to improve filename/path hits.\",\n    \"Add Semantic synonyms: auth→oauth,jwt,bearer; events→sse,ws,subscribe.\",\n    \"Sh", "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope", "import os\nimport json\nimport collections\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom common.config_loader import choose_repo_from_query, get_default_repo, out_dir\nfrom dotenv import load_dotenv, find_dotenv\n\n# Load any existing env ASAP so downstream imports (e.g., rerank backend) see them\ntry:\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\nfrom qdrant_client import QdrantClient, models\nimport bm25s\nfrom bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer"], "negative_doc_ids": ["/Users/davidmontgomery/agro/server/mcp/server.py:1-25", "/Users/davidmontgomery/agro/server/cards_builder.py:1-33", "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28", "/Users/davidmontgomery/agro/retrieval/hybrid_search.py:1-23"], "source": "golden.json"}
{"query": "Where is the indexing pipeline (BM25 and dense) implemented?", "positive_text": "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope", "positive_doc_id": "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28", "negative_texts": ["import os\nimport json\nimport collections\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom common.config_loader import choose_repo_from_query, get_default_repo, out_dir\nfrom dotenv import load_dotenv, find_dotenv\n\n# Load any existing env ASAP so downstream imports (e.g., rerank backend) see them\ntry:\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\nfrom qdrant_client import QdrantClient, models\nimport bm25s\nfrom bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer", "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "from __future__ import annotations\nimport os\nimport json\nimport urllib.request\nimport urllib.error\nimport urllib.parse\nfrom typing import Dict, Any\n\nfrom fastmcp import FastMCP\n\n# Canonical imports\nfrom server.langgraph_app import build_graph\nfrom retrieval.hybrid_search import search_routed_multi\nfrom common.config_loader import list_repos\n\n\nmcp = FastMCP(\"rag-service\")\n_graph = None\n\n_get_graph():\n    global _graph\n    if _graph is None:\n        _graph = build_graph()\n    return _graph\n\n\n@mcp."], "negative_doc_ids": ["/Users/davidmontgomery/agro/retrieval/hybrid_search.py:1-23", "/Users/davidmontgomery/agro/server/mcp/server.py:1-25", "/Users/davidmontgomery/agro/server/app.py:1-42", "/Users/davidmontgomery/agro/server/mcp/http.py:1-27"], "source": "golden.json"}
{"query": "Where is comprehensive index status computed?", "positive_text": "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "positive_doc_id": "/Users/davidmontgomery/agro/server/app.py:1-42", "negative_texts": ["\"\"\"Root shim for backward compatibility: re-export get_index_stats from server.index_stats\"\"\"\nfrom server.index_stats import get_index_stats  # noqa: F401\n", "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope", "import os\nimport json\nimport collections\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom common.config_loader import choose_repo_from_query, get_default_repo, out_dir\nfrom dotenv import load_dotenv, find_dotenv\n\n# Load any existing env ASAP so downstream imports (e.g., rerank backend) see them\ntry:\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\nfrom qdrant_client import QdrantClient, models\nimport bm25s\nfrom bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer"], "negative_doc_ids": ["/Users/davidmontgomery/agro/index_stats.py:1-3", "/Users/davidmontgomery/agro/server/mcp/server.py:1-25", "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28", "/Users/davidmontgomery/agro/retrieval/hybrid_search.py:1-23"], "source": "golden.json"}
{"query": "Where are semantic cards built or listed?", "positive_text": "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "positive_doc_id": "/Users/davidmontgomery/agro/server/app.py:1-42", "negative_texts": ["  - `indexer/`: indexing + cards\n    - `indexer/index_repo.py`\n    - `indexer/build_cards.py`\n\n- Root shims (keep CLI paths and imports stable)\n- Removed root shims. Use canonical modules:\n  - API app: `uvicorn server.app:app`\n  - `config_loader.py` → re-exports `common/config_loader.py`\n  - `path_config.py` → re-exports `common/paths.py`\n  - `filtering.py` → re-exports `common/filtering.py`\n  - `metadata_enricher.py` → re-exports `common/metadata.py`\n  - `qdrant_recreate_fallback.py` → re-expor", "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope", "from __future__ import annotations\nimport os\nimport json\nimport urllib.request\nimport urllib.error\nimport urllib.parse\nfrom typing import Dict, Any\n\nfrom fastmcp import FastMCP\n\n# Canonical imports\nfrom server.langgraph_app import build_graph\nfrom retrieval.hybrid_search import search_routed_multi\nfrom common.config_loader import list_repos\n\n\nmcp = FastMCP(\"rag-service\")\n_graph = None\n\n_get_graph():\n    global _graph\n    if _graph is None:\n        _graph = build_graph()\n    return _graph\n\n\n@mcp."], "negative_doc_ids": ["/Users/davidmontgomery/agro/MIGRATION.md:1-26", "/Users/davidmontgomery/agro/server/mcp/server.py:1-25", "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28", "/Users/davidmontgomery/agro/server/mcp/http.py:1-27"], "source": "golden.json"}
{"query": "Where are golden questions API routes defined?", "positive_text": "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "positive_doc_id": "/Users/davidmontgomery/agro/server/app.py:1-42", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"Mine training triplets from golden.json test questions.\n\nRuns each golden question through retrieval and generates triplets\nbased on expect_paths matches.\n\"\"\"\nimport json\nimport sys\nfrom pathlib import Path\n\n# Add parent dir to path so we can import retrieval\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom retrieval.hybrid_search import search\n\n# Get repo root (scripts/ -> agro/)\nREPO_ROOT = Path(__file__).parent.parent\nGOLDEN = REPO_ROOT / \"golden.json\"\nOUT", "# server/metrics.py\n# AGRO Prometheus instrumentation (FastAPI-first).\n# Exposes /metrics and provides helpers for RAG/canary metrics you asked for.\n\nfrom contextlib import contextmanager\nfrom typing import Optional\nimport time\n\nfrom prometheus_client import (\n    Counter, Histogram, Gauge, make_asgi_app\n)\n\n# Latency buckets tuned for LLM/RAG (seconds)\nLATENCY_BUCKETS = (0.05, 0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 13, 21, 34, 60)\n\n# ---- Core request & latency ----\nREQUESTS_TOTAL = Counter(\n    \"agro_r", "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope", "import os\nimport json\nimport collections\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom common.config_loader import choose_repo_from_query, get_default_repo, out_dir\nfrom dotenv import load_dotenv, find_dotenv\n\n# Load any existing env ASAP so downstream imports (e.g., rerank backend) see them\ntry:\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\nfrom qdrant_client import QdrantClient, models\nimport bm25s\nfrom bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer"], "negative_doc_ids": ["/Users/davidmontgomery/agro/scripts/mine_from_golden.py:1-20", "/Users/davidmontgomery/agro/server/metrics.py:1-88", "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28", "/Users/davidmontgomery/agro/retrieval/hybrid_search.py:1-23"], "source": "golden.json"}
{"query": "Where is the endpoint to test a single golden question?", "positive_text": "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "positive_doc_id": "/Users/davidmontgomery/agro/server/app.py:1-42", "negative_texts": ["#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "from server.env_model import *  # noqa: F401,F403\n", "from retrieval.rerank import *  # noqa: F401,F403\n", "| **Reranker** | Cross-encoder reranking with feedback collection and model training | `retrieval/rerank.py`, `gui/js/reranker.js` |\n| **Embedding Cache** | Caches embeddings to avoid recomputation | `retrieval/embed_cache.py` |\n| **AST Chunker** | Language-aware code chunking | `retrieval/ast_chunker.py` |\n| **Filtering** | File and directory exclusion rules | `common/filtering.py` |\n| **Config Loader** | Repository paths and settings management | `common/config_loader.py` |\n| **Tracing** | Cap"], "negative_doc_ids": ["/Users/davidmontgomery/agro/server/mcp/server.py:1-25", "/Users/davidmontgomery/agro/env_model.py:1-2", "/Users/davidmontgomery/agro/rerank.py:1-2", "/Users/davidmontgomery/agro/README.md:1-25"], "source": "golden.json"}
{"query": "Where are GUI assets mounted and served?", "positive_text": "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "positive_doc_id": "/Users/davidmontgomery/agro/server/app.py:1-42", "negative_texts": ["===================================================================\nRUNBOOK (UPDATED): Production RAG on macOS — Apple Silicon (non‑CUDA)\nMac mini M4 Pro • 48 GB unified memory • 16‑core ANE • 10‑core GPU\nPreference: Docker Compose > docker run / Docker Desktop\nPaths:\nproject:    /opt/app//project\nproject:  /opt/app//project\nrag svc:   /opt/app//rag-service\n===========================================================\n\n## WHAT CHANGED (at a glance)\n\n• Replaced `docker run` with **Docker Compose** ", "from retrieval.embed_cache import *  # noqa: F401,F403\n", "from server.env_model import *  # noqa: F401,F403\n", "from common.paths import *  # noqa: F401,F403\n\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro/internal_docs.md/archive/updated_runbook-1.md:1-511", "/Users/davidmontgomery/agro/embed_cache.py:1-2", "/Users/davidmontgomery/agro/env_model.py:1-2", "/Users/davidmontgomery/agro/path_config.py:1-3"], "source": "golden.json"}
{"query": "Where is repository configuration (repos.json) loaded?", "positive_text": "from common.config_loader import *  # noqa: F401,F403\n\n", "positive_doc_id": "/Users/davidmontgomery/agro/config_loader.py:1-3", "negative_texts": ["from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope", "import os\nimport json\nimport collections\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom common.config_loader import choose_repo_from_query, get_default_repo, out_dir\nfrom dotenv import load_dotenv, find_dotenv\n\n# Load any existing env ASAP so downstream imports (e.g., rerank backend) see them\ntry:\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\nfrom qdrant_client import QdrantClient, models\nimport bm25s\nfrom bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer", "from __future__ import annotations\nimport os\nimport json\nimport urllib.request\nimport urllib.error\nimport urllib.parse\nfrom typing import Dict, Any\n\nfrom fastmcp import FastMCP\n\n# Canonical imports\nfrom server.langgraph_app import build_graph\nfrom retrieval.hybrid_search import search_routed_multi\nfrom common.config_loader import list_repos\n\n\nmcp = FastMCP(\"rag-service\")\n_graph = None\n\n_get_graph():\n    global _graph\n    if _graph is None:\n        _graph = build_graph()\n    return _graph\n\n\n@mcp."], "negative_doc_ids": ["/Users/davidmontgomery/agro/server/app.py:1-42", "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28", "/Users/davidmontgomery/agro/retrieval/hybrid_search.py:1-23", "/Users/davidmontgomery/agro/server/mcp/http.py:1-27"], "source": "golden.json"}
{"query": "Where are MCP stdio tools implemented (rag_answer, rag_search)?", "positive_text": "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "positive_doc_id": "/Users/davidmontgomery/agro/server/mcp/server.py:1-25", "negative_texts": ["from __future__ import annotations\nimport os\nimport json\nimport urllib.request\nimport urllib.error\nimport urllib.parse\nfrom typing import Dict, Any\n\nfrom fastmcp import FastMCP\n\n# Canonical imports\nfrom server.langgraph_app import build_graph\nfrom retrieval.hybrid_search import search_routed_multi\nfrom common.config_loader import list_repos\n\n\nmcp = FastMCP(\"rag-service\")\n_graph = None\n\n_get_graph():\n    global _graph\n    if _graph is None:\n        _graph = build_graph()\n    return _graph\n\n\n@mcp.", "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope", "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "import os\nimport json\nimport collections\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom common.config_loader import choose_repo_from_query, get_default_repo, out_dir\nfrom dotenv import load_dotenv, find_dotenv\n\n# Load any existing env ASAP so downstream imports (e.g., rerank backend) see them\ntry:\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\nfrom qdrant_client import QdrantClient, models\nimport bm25s\nfrom bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer"], "negative_doc_ids": ["/Users/davidmontgomery/agro/server/mcp/http.py:1-27", "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28", "/Users/davidmontgomery/agro/server/app.py:1-42", "/Users/davidmontgomery/agro/retrieval/hybrid_search.py:1-23"], "source": "golden.json"}
{"query": "Where can I list or fetch latest LangGraph traces?", "positive_text": "from fastapi import FastAPI, Query, HTTPException, Request, UploadFile, File, Form\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nfrom pathlib import Path\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse, JSONResponse, RedirectResponse, Response\nfrom starlette.responses import StreamingResponse\nfrom server.langgraph_app import build_graph\nfrom server.tracing import start_trace, end_trace, Trace, latest_trace_path\nfrom retrieval.h", "positive_doc_id": "/Users/davidmontgomery/agro/server/app.py:1-42", "negative_texts": ["#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "from __future__ import annotations\nimport os\nimport json\nimport urllib.request\nimport urllib.error\nimport urllib.parse\nfrom typing import Dict, Any\n\nfrom fastmcp import FastMCP\n\n# Canonical imports\nfrom server.langgraph_app import build_graph\nfrom retrieval.hybrid_search import search_routed_multi\nfrom common.config_loader import list_repos\n\n\nmcp = FastMCP(\"rag-service\")\n_graph = None\n\n_get_graph():\n    global _graph\n    if _graph is None:\n        _graph = build_graph()\n    return _graph\n\n\n@mcp.", "import os\nimport json\nimport time\nimport uuid\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional\nfrom contextvars import ContextVar\n\nfrom common.config_loader import out_dir\n\n\n_TRACE_VAR: ContextVar[Optional[\"Trace\"]] = ContextVar(\"agro_trace\", default=None)\n\n_now_iso() -> str:\n    return __import__(\"datetime\").datetime.now().isoformat()\n\n", "import os\nimport json\nimport hashlib\nfrom typing import List, Dict\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nfrom common.config_loader import get_repo_paths, out_dir\nfrom common.paths import data_dir\nfrom retrieval.ast_chunker import lang_from_path, collect_files, chunk_code\nimport bm25s  # type: ignore\nfrom bm25s.tokenization import Tokenizer  # type: ignore\nfrom Stemmer import Stemmer  # type: ignore\nfrom qdrant_client import QdrantClient, models\nimport uuid\nfrom ope"], "negative_doc_ids": ["/Users/davidmontgomery/agro/server/mcp/server.py:1-25", "/Users/davidmontgomery/agro/server/mcp/http.py:1-27", "/Users/davidmontgomery/agro/server/tracing.py:1-17", "/Users/davidmontgomery/agro/indexer/index_repo.py:1-28"], "source": "golden.json"}
{"query": "What is DeviceType and how does it relate to device interfaces?", "positive_text": "export interface DahuaCameraConfig {\n    ip: string;\n    port: number;\n    username: string;\n    password: string;\n}\n\nexport interface DayNightProfile {\n    day: number;\n    night: number;\n}\n\nexport interface LocationConfig {\n    latitude: number;\n    longitude: number;\n    timezone: string;\n}\n\nexport interface SunSchedule {\n    sunrise: Date;\n    sunset: Date;\n}\n\nexport enum DahuaMode {\n    Day = 'day',\n    Night = 'night'\n}", "positive_doc_id": "/Users/davidmontgomery//plugins/dahua-tools/src/types.ts:1-27", "negative_texts": ["import sdk, { \n  DeviceBase, \n  Settings, \n  HttpRequestHandler, \n  DeviceProvider,\n  HttpRequest,\n  HttpResponse,\n  Setting,\n  SettingValue,\n  Interface,\n  DeviceType\n} from '@/sdk';\nimport * as http from 'http';\n// @ts-ignore - StorageSettings import issue with webpack\nimport { StorageSettings } from '@/sdk/storage-settings';\nimport { MetricsCollector } from './metrics-collector';\nimport { PrometheusFormatter } from './prometheus-formatter';\nimport { \n  ", "import { Settings, Setting, DeviceBase, DeviceType, Interface } from \"@/sdk\";\nimport { spawn } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport axios from 'axios';\n\n/**\n *  Telemetry Plugin - The Missing Piece\n * This actually discovers your setup and generates a working dashboard\n * No more \"fill in these boxes and hope\" - it autodiscovers and builds\n */\nexport class TelemetryPlugin extends DeviceBase im", "MixinDeviceBase extends index_1.DeviceBase {\n    constructor(options) {\n        super();\n        this._listeners = new Set();\n        this.mixinDevice = options.mixinDevice;\n        this.mixinDeviceInterfaces = options.mixinDeviceInterfaces;\n        this.mixinStorageSuffix = options.mixinStorageSuffix;\n        this._deviceState = options.mixinDeviceState;\n        this.nativeId = exports.sdk.systemManager.getDeviceById(this.id).nativeId;\n        this.mixinProviderNativeId = options.mixinProviderN", "import * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { IntelNPUMetrics } from './types';\n\n/**\n * IntelMonitor handles Intel NPU monitoring via sysfs\n */\nexport class IntelMonitor {\n  private console: Console;\n  private npuPath?: string;\n  private lastBusyTime = 0;\n  private lastTimestamp = 0;\n  private npuAvailable = false;\n\n  // Known Intel NPU sysfs paths\n  private readonly NPU_PATHS = [\n    '/sys/devices/pci0000:00/0000:00:0b.0/accel/accel0/npu_busy_time_us',\n    '/sys/clas"], "negative_doc_ids": ["/Users/davidmontgomery//plugins/telemetry/src/main.ts:1-37", "/Users/davidmontgomery//plugins/telemetry/dashboard-generator.ts:1-36", "/Users/davidmontgomery//plugins/telemetry/out/main.nodejs.js:1-219", "/Users/davidmontgomery//plugins/telemetry/src/intel-monitor.ts:1-38"], "source": "golden.json"}
{"query": "How do you implement proper TypeScript types and interfaces for  plugins?", "positive_text": "export interface DahuaCameraConfig {\n    ip: string;\n    port: number;\n    username: string;\n    password: string;\n}\n\nexport interface DayNightProfile {\n    day: number;\n    night: number;\n}\n\nexport interface LocationConfig {\n    latitude: number;\n    longitude: number;\n    timezone: string;\n}\n\nexport interface SunSchedule {\n    sunrise: Date;\n    sunset: Date;\n}\n\nexport enum DahuaMode {\n    Day = 'day',\n    Night = 'night'\n}", "positive_doc_id": "/Users/davidmontgomery//plugins/dahua-tools/src/types.ts:1-27", "negative_texts": ["import sdk, { \n  DeviceBase, \n  Settings, \n  HttpRequestHandler, \n  DeviceProvider,\n  HttpRequest,\n  HttpResponse,\n  Setting,\n  SettingValue,\n  Interface,\n  DeviceType\n} from '@/sdk';\nimport * as http from 'http';\n// @ts-ignore - StorageSettings import issue with webpack\nimport { StorageSettings } from '@/sdk/storage-settings';\nimport { MetricsCollector } from './metrics-collector';\nimport { PrometheusFormatter } from './prometheus-formatter';\nimport { \n  ", "import { Settings, Setting, DeviceBase, DeviceType, Interface } from \"@/sdk\";\nimport { spawn } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport axios from 'axios';\n\n/**\n *  Telemetry Plugin - The Missing Piece\n * This actually discovers your setup and generates a working dashboard\n * No more \"fill in these boxes and hope\" - it autodiscovers and builds\n */\nexport class TelemetryPlugin extends DeviceBase im", "import * as SunCalc from 'suncalc';\nimport { LocationConfig, SunSchedule } from './types';\n\nexport class SunCalculator {\n    constructor(\n        private location: LocationConfig,\n        private console: Console\n    ) {}\n\n    getTodaySchedule(\n        sunriseOffset: number = 0,\n        sunsetOffset: number = 0\n    ): SunSchedule {\n        const now = new Date();\n        const times = SunCalc.getTimes(\n            now,\n            this.location.latitude,\n            this.location.longitude\n     ", "import * as si from 'systeminformation';\nimport * as os from 'os';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport fetch from 'node-fetch';\nimport { \n  HardwareMetrics, \n  TelemetryConfig, \n  PlatformCapabilities, \n  HealthStatus, \n  ServiceHealth, \n  ExternalEndpoint,\n  CPUMetrics,\n  MemoryMetrics,\n  StorageMetrics,\n  NetworkMetrics,\n  GPUMetrics,\n  IntelNPUMetrics,\n  TelemetryError\n} from './types';\nimport { MacMonitor } from './mac-monitor';\nimport { IntelMonitor } fro"], "negative_doc_ids": ["/Users/davidmontgomery//plugins/telemetry/src/main.ts:1-37", "/Users/davidmontgomery//plugins/telemetry/dashboard-generator.ts:1-36", "/Users/davidmontgomery//plugins/dahua-tools/src/sun-calculator.ts:1-34", "/Users/davidmontgomery//plugins/telemetry/src/metrics-collector.ts:1-40"], "source": "golden.json"}
