{"query": "Where is the hybrid search implementation that combines BM25 and vector search?", "positive_text": "_load_bm25_map(idx_dir: str):\n    pid_json = os.path.join(idx_dir, 'bm25_point_ids.json')\n    if os.path.exists(pid_json):\n        m = json.load(open(pid_json))\n        return [m[str(i)] for i in range(len(m))]\n    map_path = os.path.join(idx_dir, 'chunk_ids.txt')\n    if os.path.exists(map_path):\n        with open(map_path, 'r', encoding='utf-8') as f:\n            ids = [line.strip() for line in f if line.strip()]\n        return ids\n    return None\n\n_load_cards_bm25(repo: str):\n    idx_dir = os.", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-22", "negative_texts": ["          ['Hybrid Search Benefits', 'https://www.pinecone.io/learn/hybrid-search-intro/'],\n          ['Fast Indexing Guide', '/docs/INDEXING.md#bm25-only']\n        ],\n        [['Much faster', 'info'], ['Keyword-only', 'warn'], ['No semantic search', 'warn']]\n      ),\n      VENDOR_MODE: L(\n        'Vendor Mode',\n        'Controls scoring preference for your code vs third-party library code during reranking. \"prefer_first_party\" (recommended) boosts your app code (+0.06) and penalizes node_module", "        [\n          ['Vector Similarity Search', 'https://qdrant.tech/documentation/concepts/search/'],\n          ['Semantic Search', 'https://en.wikipedia.org/wiki/Semantic_search'],\n          ['Top-K Retrieval', 'https://en.wikipedia.org/wiki/Nearest_neighbor_search#k-nearest_neighbors']\n        ],\n        [['Affects latency','info'], ['Semantic matches', 'info']]\n      ),\n      TOPK_SPARSE: L(\n        'Top‑K Sparse',\n        'Number of candidate results to retrieve from BM25 keyword (lexical)", "      description: 'Local/HF reranker model used when backend = local or hf (e.g., BAAI/bge-reranker-v2-m3).',\n      category: 'Retrieval',\n      icon: '⚙️'\n    },\n    MQ_REWRITES: {\n      name: 'Multi-Query Expansion',\n      description: 'Number of query variations generated to cast a wider search net. More rewrites = better recall but higher cost.',\n      category: 'Search Strategy',\n      icon: '🎯',\n      valueExplainer: (v) => v + ' variations per query'\n    },\n    TOPK_SPARSE: {\n      name:", "import os\nfrom retrieval.hybrid_search import search_routed_multi\n\nTESTS = [\n    ('project','ai studio','easy'),\n    ('project','TBAC trait system','easy'),\n    ('project','plugin builder','easy'),\n    ('project','webhook verification','easy'),\n    ('project','three lane gateway','medium'),\n    ('project','plugin sandbox isolation','medium'),\n    ('project','provider adapter traits','medium'),\n    ('project','canonical event normalization','medium'),\n    ('project','how does TBAC prevent PHI acc"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-29", "/Users/davidmontgomery/agro-rag-engine/scripts/benchmark_improvements.py:1-33"], "source": "golden.json"}
{"query": "How does the indexing pipeline work? Where is the main indexer?", "positive_text": "main() -> None:\n    files = collect_files(BASES)\n    print(f'Discovered {len(files)} source files.')\n    all_chunks: List[Dict] = []\n    for fp in files:\n        if not should_index_file(fp):\n            continue\n        lang = lang_from_path(fp)\n        if not lang:\n            continue\n        try:\n            with open(fp, 'r', encoding='utf-8', errors='ignore') as f:\n                src = f.read()\n        except Exception:\n            continue\n        ch = chunk_code(src, fp, lang, target=90", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/indexer/index_repo.py:1-205", "negative_texts": ["    }catch(_e){}\n  }\n\n  async function startIndexing(){\n    try{\n      if (window.showStatus) window.showStatus('Starting indexer...', 'loading');\n      await fetch(api('/api/index/start'), { method:'POST' });\n      if (indexPoll) clearInterval(indexPoll);\n      indexPoll = setInterval(pollIndexStatus, 800);\n      await pollIndexStatus();\n    }catch(e){ if (window.showStatus) window.showStatus('Failed to start indexer: ' + e.message, 'error'); throw e; }\n  }\n\n  window.IndexStatus = { formatIndex", "/**\n * SIMPLE INDEX BUTTON - NO BULLSHIT\n */\n\nconst $ = id => document.getElementById(id);\n\nasync function runRealIndex() {\n    const repo = $('simple-repo-select')?.value;\n    const dense = $('simple-dense-check')?.checked;\n    const output = $('simple-output');\n    const btn = $('simple-index-btn');\n    \n    if (!repo) {\n        alert('Select a repo first');\n        return;\n    }\n    \n    btn.disabled = true;\n    btn.textContent = '⏳ INDEXING...';\n    output.style.display = 'block';\n    output", "        const dashStartBtn = $('#dash-index-start');\n        \n        if (refreshBtn) refreshBtn.addEventListener('click', refreshIndexStats);\n        if (startBtn) startBtn.addEventListener('click', startIndexing);\n        if (stopBtn) stopBtn.addEventListener('click', stopIndexing);\n        if (dashStartBtn) dashStartBtn.addEventListener('click', startIndexing);\n\n        // Initial stats load\n        refreshIndexStats();\n        \n        // Check if indexing is already running\n        pollInde", "index_start(payload: Dict[str, Any] = None) -> Dict[str, Any]:\n    \"\"\"Start indexing with real subprocess execution.\"\"\"\n    global _INDEX_STATUS, _INDEX_METADATA\n    import subprocess\n    import threading\n\n    payload = payload or {}\n\n    _INDEX_STATUS = [\"Indexing started...\"]\n    _INDEX_METADATA = {}\n\n    def run_index():\n        global _INDEX_STATUS, _INDEX_METADATA\n        try:\n            repo = os.getenv(\"REPO\", \"agro\")\n            _INDEX_STATUS.append(f\"Indexing repository: {repo}\")\n\n    "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/index_status.js:1-16", "/Users/davidmontgomery/agro-rag-engine/gui/js/simple_index.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/indexing.js:1-37", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-54"], "source": "golden.json"}
{"query": "Where is the FastAPI server and main API routes defined?", "positive_text": "# server/metrics.py\n# AGRO Prometheus instrumentation (FastAPI-first).\n# Exposes /metrics and provides helpers for RAG/canary metrics you asked for.\n\nfrom contextlib import contextmanager\nfrom typing import Optional\nimport time\n\nfrom prometheus_client import (\n    Counter, Histogram, Gauge, make_asgi_app\n)\n\n# Latency buckets tuned for LLM/RAG (seconds)\nLATENCY_BUCKETS = (0.05, 0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 13, 21, 34, 60)\n\n# ---- Core request & latency ----\nREQUESTS_TOTAL = Counter(\n    \"agro_r", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/metrics.py:1-114", "negative_texts": ["#!/usr/bin/env python3\nfrom __future__ import annotations\nfrom fastapi.testclient import TestClient\nimport io\nfrom pathlib import Path\nimport json, sys\nROOT = Path(__file__).resolve().parents[1]\nsys.path.insert(0, str(ROOT))\n# Provide a lightweight stub for rerankers to avoid import-time type errors\nimport types as _types\nif 'rerankers' not in sys.modules:\n    m = _types.ModuleType('rerankers')\n    class Reranker:  # minimal placeholder\n        def __init__(self, *a, **k):\n            pass\n    m", "from fastapi import APIRouter\nfrom .reranker import get_reranker, get_reranker_info\n\nrouter = APIRouter()\n\n@router.get(\"/api/reranker/info\")reranker_info():\n    # trigger lazy load / hot-reload check if needed\n    get_reranker()\n    return get_reranker_info()\n", "                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                component: ComponentCreator('/agro-rag-engine/configuration/alerting', 'ceb'),\n          ", "import express from 'express';\nimport fetch from 'node-fetch';\n\nconst app = express();\nconst PORT = process.env.PORT || 8014;\nconst RAG_API_URL = process.env.RAG_API_URL || 'http://127.0.0.1:8012';\n\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', proxy: true, target: RAG_API_URL });\n});\n\n// JSON answer proxy\napp.get('/mcp/answer', async (req, res) => {\n  try {\n    const { q, repo, token } = req.query;\n    const u = new URL('/answer', RAG_API_URL);\n    if (q) u.searchParams.set('q',"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/test_backend.py:1-20", "/Users/davidmontgomery/agro-rag-engine/server/reranker_info.py:1-10", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-36"], "source": "golden.json"}
{"query": "Where is the LangGraph conversational RAG pipeline implemented?", "positive_text": "build_graph():\n    builder = StateGraph(RAGState)\n    builder.add_node('retrieve', retrieve_node)\n    builder.add_node('rewrite_query', rewrite_query)\n    builder.add_node('generate', generate_node)\n    builder.add_node('fallback', fallback_node)\n    builder.set_entry_point('retrieve')\n    builder.add_conditional_edges('retrieve', route_after_retrieval, {\n        'generate': 'generate', 'rewrite_query': 'rewrite_query', 'fallback': 'fallback'\n    })\n    builder.add_edge('rewrite_query', 'retriev", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-28", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"\nInteractive CLI chat interface for RAG service.\nUses LangGraph with Redis checkpoints for conversation memory.\n\nUsage:\n    export REPO=agro\n    export THREAD_ID=my-session-1\n    python -m cli.chat_cli\n\nCommands:\n    /repo <name>    - Switch repository (from repos.json)\n    /save           - Save conversation checkpoint\n    /clear          - Clear conversation history\n    /help           - Show commands\n    /exit, /quit    - Exit chat\n\"\"\"\nimport os\nimport sys\nimport req", "#!/usr/bin/env python3\n\"\"\"\nInteractive CLI chat interface for RAG service.\nUses LangGraph with Redis checkpoints for conversation memory.\n\nUsage:\n    export REPO=agro\n    export THREAD_ID=my-session-1\n    python -m cli.chat_cli\n\nCommands:\n    /repo <name>    - Switch repository (from repos.json)\n    /save           - Save conversation checkpoint\n    /clear          - Clear conversation history\n    /help           - Show commands\n    /exit, /quit    - Exit chat\n\"\"\"\nimport os\nimport sys\nimport req", "ChatCLI:\n    \"\"\"Interactive CLI chat with RAG.\"\"\"\n\n    def __init__(self, repo: str = 'agro', thread_id: str = 'cli-chat'):\n        self.repo = repo\n        self.thread_id = thread_id\n        self.graph = None\n        self._init_graph()\n\n    def _init_graph(self):\n        \"\"\"Initialize LangGraph with Redis checkpoints.\"\"\"\n        try:\n            self.graph = build_graph()\n            console.print(\"[green]✓[/green] Graph initialized with Redis checkpoints\")\n        except Exception as e:\n      ", "_load_env_file(env_path: Path) -> bool:\n    \"\"\"Load environment variables from .env if python-dotenv is installed.\n\n    This wrapper avoids conditional redefinition errors in static analysis.\n    \"\"\"\n    if _maybe_load_dotenv is not None:\n        return bool(_maybe_load_dotenv(env_path))\n    return False\n\n# Load environment\n_load_env_file(Path(__file__).resolve().parents[1] / \".env\")\n\nfrom server.langgraph_app import build_graph\nfrom common.config_loader import list_repos\nfrom rich.console impor"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-27", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-27", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-252", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-26"], "source": "golden.json"}
{"query": "How does the cross-encoder reranker work?", "positive_text": "#!/usr/bin/env python3\n\"\"\"Train cross-encoder reranker on mined triplets.\n\nLoads triplets from data/training/triplets.jsonl and fine-tunes\na cross-encoder model for improved retrieval ranking.\n\"\"\"\nimport json\nimport random\nimport argparse\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom sentence_transformers import CrossEncoder, InputExample\nfrom torch.utils.data import DataLoader\nload_triplets(path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Load all triplets from JSONL fi", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/scripts/train_reranker.py:1-32", "negative_texts": ["get_reranker() -> CrossEncoder:\n    \"\"\"\n    Loads and (optionally) hot-reloads the CrossEncoder model.\n    Env:\n      AGRO_RERANKER_MODEL_PATH   (dir or HF id; default MiniLM)\n      AGRO_RERANKER_RELOAD_ON_CHANGE=1\n      AGRO_RERANKER_RELOAD_PERIOD_SEC (default 60)\n      AGRO_RERANKER_MAXLEN (default 512)\n    \"\"\"\n    global _RERANKER, _RERANKER_PATH, _RERANKER_MTIME, _LAST_CHECK\n    path = os.getenv(\"AGRO_RERANKER_MODEL_PATH\", \"cross-encoder/ms-marco-MiniLM-L-12-v2\")\n    need_reload = False\n\n   ", "          ['Local Reranker README', '/models/cross-encoder-agro.baseline/README.md'],\n          ['Training Custom Reranker', '/docs/RERANKER.md#training']\n        ],\n        [['Free (no API costs)', 'info'], ['Requires download', 'warn']]\n      ),\n\n      // Retrieval tuning\n      MQ_REWRITES: L(\n        'Multi‑Query Rewrites',\n        'Number of query variations to generate for improved recall. Each rewrite searches independently, then results are fused and reranked. For example, query \"auth flo", "#!/usr/bin/env python3\n\"\"\"Evaluate reranker performance using MRR and Hit@K metrics.\n\nLoads triplets and computes ranking metrics for the trained model.\n\"\"\"\nimport json\nimport argparse\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom sentence_transformers import CrossEncoder\nimport numpy as np\nload_triplets(path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Load all triplets from JSONL file.\"\"\"\n    items = []\n    with path.open(\"r\", encoding=\"utf-8\") as f:\n        for line in f:\n       ", "import os, math, time\nfrom typing import List, Dict, Any, Optional\nfrom pathlib import Path\nfrom sentence_transformers import CrossEncoder\n\n_RERANKER: Optional[CrossEncoder] = None\n_RERANKER_PATH: Optional[str] = None\n_RERANKER_MTIME: float = 0.0\n_LAST_CHECK: float = 0.0\n_latest_mtime(p: str) -> float:\n    try:\n        base = Path(p)\n        if not base.exists():\n            return 0.0\n        latest = base.stat().st_mtime\n        if base.is_file():\n            return latest\n        for root, _,"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/reranker.py:1-30", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/scripts/eval_reranker.py:1-19", "/Users/davidmontgomery/agro-rag-engine/server/reranker.py:1-29"], "source": "golden.json"}
{"query": "Where is the MCP (Model Context Protocol) server for stdio transport?", "positive_text": "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/mcp/server.py:1-25", "negative_texts": ["// AGRO GUI - MCP Server Management Module\n// Handles MCP HTTP server management and stdio testing\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !state) {\n        console.error('[mcp_server.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Update HTTP MCP server status\n     */\n    async function updateHTTPStatus() {\n        const statusEl = $('#mcp-http-status');\n        if (!statusEl) retu", "mcp_status() -> Dict[str, Any]:\n    \"\"\"Consolidated MCP status for Dashboard.\n\n    Reports Python HTTP (:8013), Node HTTP (:8014), and Python stdio availability.\n    \"\"\"\n    import socket\n    def tcp(host: str, port: int, timeout: float = 0.25) -> bool:\n        try:\n            with socket.create_connection((host, port), timeout=timeout):\n                return True\n        except Exception:\n            return False\n\n    # Python HTTP MCP\n    py_host = os.getenv('MCP_HTTP_HOST') or '127.0.0.1'\n ", "mcp_stdio_test() -> Dict[str, Any]:\n    \"\"\"Test stdio MCP server (one-shot)\"\"\"\n    import subprocess\n    try:\n        # Test stdio MCP\n        result = subprocess.run(\n            [str(ROOT / \".venv\" / \"bin\" / \"python\"), \"-m\", \"server.mcp.server\"],\n            input='{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}\\n',\n            capture_output=True, text=True, timeout=10, cwd=str(ROOT)\n        )\n        \n        if result.returncode == 0 and result.stdout:\n            import json\n   ", "            } else {\n                alert(`Error: ${e.message}`);\n            }\n        } finally {\n            if (btn) btn.disabled = false;\n        }\n    }\n\n    /**\n     * Test stdio MCP server\n     */\n    async function testStdioServer() {\n        const btn = $('#btn-mcp-test');\n        const outputEl = $('#mcp-test-output');\n        \n        if (btn) btn.disabled = true;\n        if (outputEl) {\n            outputEl.style.display = 'block';\n            outputEl.textContent = 'Testing stdio "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-40", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-56", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-30", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-41"], "source": "golden.json"}
{"query": "Where is the GUI main HTML and JavaScript?", "positive_text": "\n    // ---------------- Global Search ----------------\n    // Delegated to Search module (gui/js/search.js)\n    const clearHighlights = window.Search?.clearHighlights || (() => {});\n    const highlightMatches = window.Search?.highlightMatches || (() => {});\n    const bindGlobalSearch = window.Search?.bindGlobalSearch || (() => {});\n\n    // ---------------- Git Hooks ----------------\n    // Delegated to GitHooks module (gui/js/git-hooks.js)\n    const refreshHooksStatus = window.GitHooks?.refresh", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-24", "negative_texts": ["main():\n    with sync_playwright() as p:\n        browser = p.chromium.launch(headless=False)\n        ctx = browser.new_context()\n        page = ctx.new_page()\n\n        # Capture console messages\n        console_msgs = []\n        page.on(\"console\", lambda msg: console_msgs.append(f\"[{msg.type}] {msg.text}\"))\n        page.on(\"pageerror\", lambda err: print(f\"❌ PAGE ERROR: {err}\"))\n\n        print(f\"Opening {BASE}/gui/...\")\n        page.goto(f\"{BASE}/gui/\", wait_until=\"domcontentloaded\")\n        page", "_classify_query(q: str) -> str:\n    \"\"\"Classify query intent for AGRO RAG engine.\"\"\"\n    ql = (q or '').lower()\n    \n    # GUI/Frontend queries\n    if any(k in ql for k in ['gui', 'ui', 'dashboard', 'button', 'component', 'frontend', 'css', 'html', 'interface']):\n        return 'gui'\n    \n    # Retrieval/Search queries\n    if any(k in ql for k in ['search', 'retrieval', 'bm25', 'vector', 'qdrant', 'embedding', 'rerank', 'hybrid']):\n        return 'retrieval'\n    \n    # Indexing queries\n    if an", "// Core Utilities - Shared helpers for all GUI modules\n// Provides API base resolution, DOM helpers, and global state\n;(function() {\n  'use strict';\n\n  // Backend API base: respects ?api= override; defaults to local FastAPI\n  const API_BASE = (() => {\n    try {\n      const u = new URL(window.location.href);\n      const q = new URLSearchParams(u.search);\n      const override = q.get('api');\n      if (override) return override.replace(/\\/$/, '');\n      // Prefer same-origin whenever we were served", "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-96", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-30", "/Users/davidmontgomery/agro-rag-engine/gui/js/core-utils.js:1-36", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23"], "source": "golden.json"}
{"query": "How does the navigation system work in the GUI?", "positive_text": "// AGRO GUI - Navigation System\n// New navigation with tab registry and compatibility layer for safe migration\n// Author: AGRO Redesign (Phase 1)\n\n(function() {\n    'use strict';\n\n    const { $, $$, events, state } = window.CoreUtils || {};\n\n    // Tab Registry - Maps old IDs to new structure\n    const TAB_REGISTRY = {\n        // Current tabs that stay the same\n        'dashboard': { \n            newId: 'dashboard', \n            title: '📊 Dashboard',\n            icon: '📊',\n            order: 2\n ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/navigation.js:1-67", "negative_texts": ["// AGRO GUI - RAG Tab Navigation\n// Handles the mega-tab structure for RAG with subtabs\n// Author: AGRO Redesign (Phase 2)\n\n(function() {\n    'use strict';\n\n    const { $, $$, events } = window.CoreUtils || {};\n\n    // RAG Subtab mappings to existing content\n    const RAG_SUBTAB_MAP = {\n        'data-quality': ['config-repos', 'keywords', 'cards'],\n        'retrieval': ['config-models', 'config-retrieval'],\n        'external-rerankers': ['config-reranking'],\n        'learning-ranker': ['reranker", "// AGRO GUI - Tabs Module\n// Handles main tab navigation, subtab switching, and lazy loading\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { $$, $ } = window.CoreUtils || {};\n\n    if (!$$ || !$) {\n        console.error('[tabs.js] CoreUtils not loaded!');\n        return;\n    }\n\n    // State\n    let storageCalculatorLoaded = false;\n\n    /**\n     * Lazy load storage calculator when analytics tab is opened\n     */\n    function loadStorageCalculator() {\n        if (storageCalcu", "            if (infraTab) {\n                $$('.tab-content').forEach(content => content.classList.remove('active'));\n                infraTab.classList.add('active');\n            }\n        }\n        \n        // Handle Admin tab\n        if (tabId === 'admin') {\n            const adminTab = $('#tab-settings-general');\n            if (adminTab) {\n                $$('.tab-content').forEach(content => content.classList.remove('active'));\n                adminTab.classList.add('active');\n           ", "                    window.Navigation.navigateTo(tabId);\n                }\n            });\n        });\n        \n        console.log('[RAG] RAG navigation initialized');\n    }\n\n    // Public API\n    window.RAGNavigation = {\n        showRagSubtabs,\n        hideRagSubtabs,\n        switchRagSubtab,\n        getCurrentSubtab: () => currentSubtab,\n        init\n    };\n\n    // Initialize on DOM ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', init);"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/rag-navigation.js:1-48", "/Users/davidmontgomery/agro-rag-engine/gui/js/tabs.js:1-48", "/Users/davidmontgomery/agro-rag-engine/gui/js/rag-navigation.js:1-48", "/Users/davidmontgomery/agro-rag-engine/gui/js/rag-navigation.js:1-31"], "source": "golden.json"}
{"query": "Where is the chat interface implementation?", "positive_text": "// Chat interface for RAG system\n// Handles sending questions to /answer endpoint and displaying responses\n\n// Default chat settings\nconst DEFAULT_CHAT_SETTINGS = {\n    model: '',  // Empty = use GEN_MODEL\n    temperature: 0.0,\n    maxTokens: 1000,\n    multiQuery: 3,\n    finalK: 20,\n    confidence: 0.55,\n    showCitations: true,\n    showConfidence: false,\n    autoScroll: true,\n    syntaxHighlight: false,\n    systemPrompt: '',\n    // History settings\n    historyEnabled: true,\n    historyLimit: 10", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/chat.js:1-38", "negative_texts": ["                const qs = new URLSearchParams({ project: prj, share: 'true' });\n                const r = await fetch(api(`/api/langsmith/latest?${qs.toString()}`));\n                const d = await r.json();\n                if (d && d.url) window.open(d.url, '_blank');\n                else alert('No recent LangSmith run found. Ask a question first.');\n            }catch(e){ alert('Unable to open LangSmith: '+e.message); }\n        });\n\n        // Chat bindings\n        const chatSend = document.g", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code", "        const repo = repoSel && repoSel.value ? repoSel.value : undefined;\n        try{\n            const qs = new URLSearchParams({ q });\n            if (repo) qs.set('repo', repo);\n            const r = await fetch(api(`/answer?${qs.toString()}`));\n            const d = await r.json();\n            const text = (d && d.answer) ? d.answer : '—';\n            appendChatMessage('assistant', text);\n            // load trace if the dropdown is open\n            const det = document.getElementById('cha", "    - key: THREAD_ID\n      type: string\n      default: http or cli-chat\n      description: LangGraph thread id (configurable per client)\n    - key: PORT\n      type: integer\n      default: 8012\n      description: Uvicorn port for serve entrypoints\n    - key: agro_PATH\n      type: path\n      default: null\n      description: Optional reference path used by some helpers\n    - key: LANGCHAIN_TRACING_V2\n      type: flag\n      default: \"0\"\n      description: Optional tracing flag for LangChain-compatib"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-18", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-24", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-32"], "source": "golden.json"}
{"query": "Where is the AST-aware code chunking implemented?", "positive_text": "chunk_code(src:str, fpath:str, lang:str, target:int=900)->List[Dict]:\n    try:\n        if _ts_get_parser is None:\n            raise RuntimeError(\"tree_sitter_languages not available\")\n        parser = _ts_get_parser(lang)\n        tree = parser.parse(bytes(src, \"utf-8\"))\n        wanted = FUNC_NODES.get(lang, set())\n        nodes = []\n        stack = [tree.root_node]\n        while stack:\n            n = stack.pop()\n            if n.type in wanted:\n                nodes.append(n)\n            stack.", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/ast_chunker.py:1-48", "negative_texts": ["_classify_query(q: str) -> str:\n    \"\"\"Classify query intent for AGRO RAG engine.\"\"\"\n    ql = (q or '').lower()\n    \n    # GUI/Frontend queries\n    if any(k in ql for k in ['gui', 'ui', 'dashboard', 'button', 'component', 'frontend', 'css', 'html', 'interface']):\n        return 'gui'\n    \n    # Retrieval/Search queries\n    if any(k in ql for k in ['search', 'retrieval', 'bm25', 'vector', 'qdrant', 'embedding', 'rerank', 'hybrid']):\n        return 'retrieval'\n    \n    # Indexing queries\n    if an", "import os\nimport json\nfrom typing import Dict, Iterator\nfrom dotenv import load_dotenv\nfrom server.env_model import generate_text\nfrom common.config_loader import out_dir\n\nload_dotenv()\nREPO = os.getenv('REPO','project').strip()\nMAX_CHUNKS = int(os.getenv('CARDS_MAX') or '0')\nBASE = out_dir(REPO)\nCHUNKS = os.path.join(BASE, 'chunks.jsonl')\nCARDS = os.path.join(BASE, 'cards.jsonl')\nCARDS_TXT = os.path.join(BASE, 'cards.txt')\nINDEX_DIR = os.path.join(BASE, 'bm25_cards')\n\nPROMPT = (\n    \"Analyze th", "generate_node(state: RAGState) -> Dict:\n    q = state['question']; ctx = state['documents'][:5]\n    # packer summary for trace\n    try:\n        tr = get_trace()\n        if tr is not None:\n            budget = int(os.getenv('PACK_BUDGET_TOKENS', '4096') or 4096)\n            selected = []\n            for d in ctx:\n                sel = {\n                    'path': d.get('file_path'),\n                    'lines': f\"L{d.get('start_line')}-L{d.get('end_line')}\",\n                    'est_tokens': int", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-30", "/Users/davidmontgomery/agro-rag-engine/indexer/build_cards.py:1-37", "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-151", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6"], "source": "golden.json"}
{"query": "How does the embedding cache work to avoid recomputation?", "positive_text": "EmbeddingCache:\n    def __init__(self, outdir: str):\n        os.makedirs(outdir, exist_ok=True)\n        self.path = os.path.join(outdir, \"embed_cache.jsonl\")\n        self.cache = {}\n        if os.path.exists(self.path):\n            with open(self.path, \"r\", encoding=\"utf-8\") as f:\n                for line in f:\n                    try:\n                        o = json.loads(line)\n                        self.cache[o[\"hash\"]] = o[\"vec\"]\n                    except Exception:\n                      ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/embed_cache.py:1-63", "negative_texts": ["          embed_provider: data.env.EMBEDDING_TYPE || undefined,\n          rerank_provider: data.env.RERANK_BACKEND || undefined,\n          rerank_model: data.env.COHERE_RERANK_MODEL || undefined,\n        };\n        const er = await fetchWithTimeout(api('/api/cost/estimate'), { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(cp), timeout: 10000 });\n        if (er.ok){\n          const est = await er.json();\n          const results = document.getElementById('profile", "        ['OpenAI Embeddings', 'https://platform.openai.com/docs/guides/embeddings'],\n        ['Voyage AI Embeddings', 'https://docs.voyageai.com/docs/embeddings'],\n        ['Google Gemini Embeddings', 'https://ai.google.dev/gemini-api/docs/embeddings'],\n        ['SentenceTransformers Docs', 'https://www.sbert.net/']\n      ], [['Requires reindex','reindex']]),\n      VOYAGE_API_KEY: L('Voyage API Key', 'API key for Voyage AI embeddings when EMBEDDING_TYPE=voyage.', [\n        ['Voyage AI Docs', 'ht", "            if (p === 'mxbai') return ['huggingface'];\n            if (p === 'hugging face') return ['huggingface'];\n            if (p === 'local'){\n                // For local: embeddings prefer local/ollama; rerank prefer huggingface/local\n                return (kind==='embed') ? ['local','ollama'] : ['huggingface','local','ollama','mlx'];\n            }\n            return [p];\n        }\n        function updateEmbedList(){\n            const sel = document.getElementById('cost-embed-provider')", "    if (!provider) return;\n    const model = promptStr('Embedding model ID (optional; depends on provider)', provider === 'openai' ? 'text-embedding-3-small' : '');\n    const baseUrl = promptStr('Base URL (optional)', '');\n    let apiKey = '';\n    if (provider !== 'local' && provider !== 'mxbai') apiKey = promptStr('API Key (optional)', '') || '';\n\n    const env = {};\n    if (provider === 'openai'){ env.EMBEDDING_TYPE = 'openai'; if (apiKey) env.OPENAI_API_KEY = apiKey; if (baseUrl) env.OPENAI_B"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/autoprofile_v2.js:1-20", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-15", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-22", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-19"], "source": "golden.json"}
{"query": "Where is the semantic card building logic?", "positive_text": "// Cards viewer logic (list + build UI). Exported via window.Cards\n;(function(){\n  'use strict';\n  const api = (window.CoreUtils && window.CoreUtils.api) ? window.CoreUtils.api : (p=>p);\n\n  async function load(){\n    try{\n      console.log('[cards.js] Starting load...');\n      const resp = await fetch(api('/api/cards'));\n      const data = await resp.json();\n      console.log('[cards.js] Loaded data:', data);\n      const cards = Array.isArray(data.cards) ? data.cards : [];\n      const last = dat", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/cards.js:1-27", "negative_texts": ["// Cards Builder (Job + SSE) logic with PERMANENT VISIBLE PROGRESS. Exported via window.CardsBuilder\n;(function(){\n  'use strict';\n  const api = (window.CoreUtils && window.CoreUtils.api) ? window.CoreUtils.api : (p=>p);\n  const state = (window.CoreUtils && window.CoreUtils.state) ? window.CoreUtils.state : {};\n  const $ = (id) => document.getElementById(id);\n  let cardsJob = { id: null, timer: null, sse: null };\n\n  // Populate repo dropdown\n  async function populateRepoSelect(){\n    const sel =", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code", "_classify_query(q: str) -> str:\n    \"\"\"Classify query intent for AGRO RAG engine.\"\"\"\n    ql = (q or '').lower()\n    \n    # GUI/Frontend queries\n    if any(k in ql for k in ['gui', 'ui', 'dashboard', 'button', 'component', 'frontend', 'css', 'html', 'interface']):\n        return 'gui'\n    \n    # Retrieval/Search queries\n    if any(k in ql for k in ['search', 'retrieval', 'bm25', 'vector', 'qdrant', 'embedding', 'rerank', 'hybrid']):\n        return 'retrieval'\n    \n    # Indexing queries\n    if an", "_load_env_file(env_path: Path) -> bool:\n    \"\"\"Load environment variables from .env if python-dotenv is installed.\n\n    This wrapper avoids conditional redefinition errors in static analysis.\n    \"\"\"\n    if _maybe_load_dotenv is not None:\n        return bool(_maybe_load_dotenv(env_path))\n    return False\n\n# Load environment\n_load_env_file(Path(__file__).resolve().parents[1] / \".env\")\n\nfrom server.langgraph_app import build_graph\nfrom common.config_loader import list_repos\nfrom rich.console impor"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/cards_builder.js:1-29", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-30", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-26"], "source": "golden.json"}
{"query": "Where is the repository configuration loaded from repos.json?", "positive_text": "load_repos() -> Dict[str, Any]:\n    global _CACHE\n    if \"config\" in _CACHE:\n        return _CACHE[\"config\"]\n    p = _repos_file_path()\n    if p.exists():\n        try:\n            data = json.loads(p.read_text())\n            if isinstance(data, dict) and isinstance(data.get(\"repos\"), list):\n                _CACHE[\"config\"] = data\n                return data\n        except Exception:\n            pass\n    env_repo = (os.getenv(\"REPO\") or \"default\").strip()\n    env_path = os.getenv(\"REPO_PATH\") or ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/common/config_loader.py:1-37", "negative_texts": ["        btn.disabled = false;\n    }\n}\n\n// Load repos on page load\nasync function loadRepos() {\n    try {\n        const response = await fetch('/api/config');\n        const config = await response.json();\n        const select = $('simple-repo-select');\n        \n        if (config.repos && config.repos.length > 0) {\n            select.innerHTML = '';\n            config.repos.forEach(repo => {\n                const opt = document.createElement('option');\n                opt.value = repo.name;\n     ", "    async function changeRepo() {\n        showStatus('Loading repositories...', 'loading');\n\n        try {\n            const response = await fetch(api('/api/config'));\n            const data = await response.json();\n            const repos = data.repos || [];\n            const currentRepo = (data.env && data.env.REPO) || data.default_repo || 'agro';\n\n            if (repos.length === 0) {\n                showStatus('No repositories configured', 'error');\n                return;\n            }\n\n  ", "            };\n        }\n\n        // Try to populate immediately if config already loaded\n        if (state.config) {\n            populateIndexRepoDropdown();\n        }\n\n        // Fallback: fetch config directly if dropdown is still empty after a delay\n        setTimeout(() => {\n            const select = $('#index-repo-select');\n            if (select && select.options.length === 0) {\n                fetch(api('/api/config'))\n                    .then(r => r.json())\n                    .then(c", "import os\nimport json\nfrom pathlib import Path\nfrom typing import Any, Dict, List\nfrom path_config import repo_root, data_dir\n\n_read_json(path: Path, default: Any) -> Any:\n    if path.exists():\n        try:\n            return json.loads(path.read_text())\n        except Exception:\n            return default\n    return default\n\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/simple_index.js:1-40", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-42", "/Users/davidmontgomery/agro-rag-engine/gui/js/indexing.js:1-40", "/Users/davidmontgomery/agro-rag-engine/server/index_stats.py:1-15"], "source": "golden.json"}
{"query": "How are file filtering and exclusion rules defined?", "positive_text": "_should_index_file(name: str) -> bool:\n    n = (name or \"\").lower()\n    \n    # ALWAYS index important .txt files\n    if n in (\"requirements.txt\", \"requirements-rag.txt\", \"exclude_globs.txt\"):\n        return True\n    \n    # EXCLUDE MARKDOWN and generic text files (per user requirement)\n    if n.endswith((\".md\", \".markdown\", \".rst\", \".txt\")):\n        return False\n    \n    # Skip obvious binary or large files by suffix\n    skip_suffixes = (\".min.js\", \".png\", \".jpg\", \".jpeg\", \".gif\", \".webp\", \".pdf\"", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/common/filtering.py:1-22", "negative_texts": ["    - const: VALID_EXTS\n      value: ['.py','.ts','.tsx','.js','.jsx','.go','.rs','.java','.c','.cpp','.md','.mdx','.yaml','.yml','.toml','.json']\n      description: Allowed extensions (filtering)\n    - const: SKIP_EXTS\n      value: ['.map','.pyc','.ds_store']\n      description: Skipped extensions (filtering)\n    - const: AST_CHUNK_TARGET\n      value: 900\n      description: Target non-whitespace char budget per chunk\n    - const: OVERLAP_LINES\n      value: 20\n      description: Lines of pre-cont", "      value: [\".py\", \".rb\", \".ts\", \".tsx\", \".js\", \".jsx\", \".go\", \".rs\", \".java\", \".cs\", \".c\", \".h\", \".cpp\", \".hpp\", \".m\", \".mm\", \".kt\", \".kts\", \".swift\", \".sql\", \".yml\", \".yaml\", \".toml\", \".ini\", \".json\", \".md\"]\n      description: File extensions considered for indexing\n    - file: data/exclude_globs.txt\n      description: Glob patterns excluded from indexing\n      notes:\n        - CRITICAL - Test files MUST be excluded (tests/**, *.spec.ts, *.test.*)\n        - CRITICAL - Editor data MUST be exc", "# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass", "generate_node(state: RAGState) -> Dict:\n    q = state['question']; ctx = state['documents'][:5]\n    # packer summary for trace\n    try:\n        tr = get_trace()\n        if tr is not None:\n            budget = int(os.getenv('PACK_BUDGET_TOKENS', '4096') or 4096)\n            selected = []\n            for d in ctx:\n                sel = {\n                    'path': d.get('file_path'),\n                    'lines': f\"L{d.get('start_line')}-L{d.get('end_line')}\",\n                    'est_tokens': int"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-31", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-13", "/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16", "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-151"], "source": "golden.json"}
{"query": "Where is the metadata enrichment for code chunks?", "positive_text": "enrich(file_path: str, lang: str, code: str) -> Dict[str, Any]:\n    \"\"\"Enrich code metadata using LLM.\n\n    Extracts symbols, purpose, and keywords from code chunks.\n    Falls back to heuristic parsing if LLM fails.\n\n    Args:\n        file_path: Path to the file being enriched\n        lang: Language/extension (e.g., 'py', 'ts', 'js')\n        code: Source code content\n    \"\"\"\n    import json\n    import re\n\n    # Try LLM enrichment if enabled\n    try:\n        from server.env_model import generate_", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/common/metadata.py:1-92", "negative_texts": ["// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code", "          ['Pull Models', 'https://github.com/ollama/ollama#quickstart'],\n          ['Code-Focused Models', 'https://ollama.com/search?c=tools'],\n          ['Enrichment Setup', '/docs/ENRICHMENT.md#ollama']\n        ],\n        [['Free (local)', 'info'], ['Requires model download', 'warn']]\n      ),\n      ENRICH_CODE_CHUNKS: L(\n        'Enrich Code Chunks',\n        'Enable per-chunk code summarization during indexing. When on, each code chunk gets an AI-generated summary and keywords stored alongs", "            VOYAGE_API_KEY: 'API key for Voyage embeddings.',\n            VOYAGE_EMBED_DIM: 'Output dimension for Voyage embeddings.',\n            EMBEDDING_DIM: 'Embedding dimension for MXBAI/local models.',\n            SKIP_DENSE: 'If 1, skip building dense vectors/Qdrant (sparse-only).',\n            ENRICH_CODE_CHUNKS: 'If true, store per-chunk summaries/keywords before embedding.',\n\n            // Reranking (verbose tips)\n            RERANK_BACKEND: 'Choose the reranking backend that orders ", "_classify_query(q: str) -> str:\n    \"\"\"Classify query intent for AGRO RAG engine.\"\"\"\n    ql = (q or '').lower()\n    \n    # GUI/Frontend queries\n    if any(k in ql for k in ['gui', 'ui', 'dashboard', 'button', 'component', 'frontend', 'css', 'html', 'interface']):\n        return 'gui'\n    \n    # Retrieval/Search queries\n    if any(k in ql for k in ['search', 'retrieval', 'bm25', 'vector', 'qdrant', 'embedding', 'rerank', 'hybrid']):\n        return 'retrieval'\n    \n    # Indexing queries\n    if an"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-10", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-30"], "source": "golden.json"}
{"query": "Where is the Qdrant vector database integration?", "positive_text": "from __future__ import annotations\n\n\"\"\"Qdrant recreate fallback wrappers to avoid hard failures on 404/exists.\"\"\"\nrecreate_collection(client, collection_name: str, vectors_config):\n    \"\"\"\n    Recreate a Qdrant collection with proper error handling.\n    Handles both old (flat) and new (nested) vector config formats.\n    \"\"\"\n    try:\n        # Check if collection exists first\n        try:\n            info = client.get_collection(collection_name)\n            print(f\"Collection '{collection_name}' ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/common/qdrant_utils.py:1-35", "negative_texts": ["        [\n          ['Vector Embeddings', 'https://en.wikipedia.org/wiki/Word_embedding'],\n          ['Dimensionality Tradeoffs', 'https://www.sbert.net/docs/pretrained_models.html#model-overview'],\n          ['Qdrant Vector Config', 'https://qdrant.tech/documentation/concepts/collections/#create-a-collection'],\n          ['Reindexing Guide', '/docs/INDEXING.md#full-reindex']\n        ],\n        [['Requires reindex','reindex'], ['Affects storage', 'warn']]\n      ),\n      PORT: L(\n        'HTTP Po", "            }\n        } catch (e) {\n            const msg = window.ErrorHelpers ? window.ErrorHelpers.createAlertError('Failed to start indexing', {\n                message: e.message,\n                causes: [\n                    'Backend indexing service not running',\n                    'Repository path is invalid or inaccessible',\n                    'Permission denied for repository directory',\n                    'Vector database (Qdrant) connection failed'\n                ],\n             ", "        [\n          ['Vector Similarity Search', 'https://qdrant.tech/documentation/concepts/search/'],\n          ['Semantic Search', 'https://en.wikipedia.org/wiki/Semantic_search'],\n          ['Top-K Retrieval', 'https://en.wikipedia.org/wiki/Nearest_neighbor_search#k-nearest_neighbors']\n        ],\n        [['Affects latency','info'], ['Semantic matches', 'info']]\n      ),\n      TOPK_SPARSE: L(\n        'Top‑K Sparse',\n        'Number of candidate results to retrieve from BM25 keyword (lexical)", "generate_node(state: RAGState) -> Dict:\n    q = state['question']; ctx = state['documents'][:5]\n    # packer summary for trace\n    try:\n        tr = get_trace()\n        if tr is not None:\n            budget = int(os.getenv('PACK_BUDGET_TOKENS', '4096') or 4096)\n            selected = []\n            for d in ctx:\n                sel = {\n                    'path': d.get('file_path'),\n                    'lines': f\"L{d.get('start_line')}-L{d.get('end_line')}\",\n                    'est_tokens': int"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "/Users/davidmontgomery/agro-rag-engine/gui/js/indexing.js:1-39", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-151"], "source": "golden.json"}
{"query": "How does multi-query expansion work?", "positive_text": "search_routed_multi(query: str, repo_override: str | None = None, m: int = 4, final_k: int = 10, trace: object | None = None):\n    repo = (repo_override or route_repo(query) or os.getenv('REPO', 'project')).strip()\n    variants = expand_queries(query, m=m)\n    try:\n        if trace is not None and hasattr(trace, 'add'):\n            trace.add('router.decide', {\n                'policy': 'code',  # heuristic profile\n                'intent': _classify_query(query),\n                'query_original'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-48", "negative_texts": ["      description: 'Local/HF reranker model used when backend = local or hf (e.g., BAAI/bge-reranker-v2-m3).',\n      category: 'Retrieval',\n      icon: '⚙️'\n    },\n    MQ_REWRITES: {\n      name: 'Multi-Query Expansion',\n      description: 'Number of query variations generated to cast a wider search net. More rewrites = better recall but higher cost.',\n      category: 'Search Strategy',\n      icon: '🎯',\n      valueExplainer: (v) => v + ' variations per query'\n    },\n    TOPK_SPARSE: {\n      name:", "          ['Local Reranker README', '/models/cross-encoder-agro.baseline/README.md'],\n          ['Training Custom Reranker', '/docs/RERANKER.md#training']\n        ],\n        [['Free (no API costs)', 'info'], ['Requires download', 'warn']]\n      ),\n\n      // Retrieval tuning\n      MQ_REWRITES: L(\n        'Multi‑Query Rewrites',\n        'Number of query variations to generate for improved recall. Each rewrite searches independently, then results are fused and reranked. For example, query \"auth flo", "    - key: TOPK_SPARSE\n      type: integer\n      default: 75\n      description: Sparse candidate count (BM25)\n    - key: MQ_REWRITES\n      type: integer\n      default: 2\n      description: Multi-query expansion count (conditional on query type)\n    - key: HYDRATION_MODE\n      type: enum\n      default: lazy\n      allowed: [lazy, none]\n      description: Whether to hydrate code bodies from chunks.jsonl\n    - key: HYDRATION_MAX_CHARS\n      type: integer\n      default: 2000\n      description: Trunca", "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-29", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-35", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22"], "source": "golden.json"}
{"query": "Where is the tracing system for debugging RAG pipelines?", "positive_text": "Trace:\n    \"\"\"Lightweight per-request trace recorder.\n\n    - Stores structured breadcrumb events in-memory\n    - Persists to out/<repo>/traces/<ts>_<id>.json on save()\n    - Enabled when LANGCHAIN_TRACING_V2 is truthy (1/true/on)\n    \"\"\"\n\n    def __init__(self, repo: str, question: str):\n        self.repo = (repo or os.getenv(\"REPO\", \"agro\")).strip()\n        self.question = question\n        self.id = uuid.uuid4().hex[:8]\n        self.started_at = _now_iso()\n        self.events: List[Dict[str, An", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/tracing.py:1-118", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "// MCP RAG search debug binder. Exported via window.McpRag\n;(function(){\n  'use strict';\n  const api = (window.CoreUtils && window.CoreUtils.api) ? window.CoreUtils.api : (p=>p);\n  const state = (window.CoreUtils && window.CoreUtils.state) ? window.CoreUtils.state : {};\n\n  function bind(){\n    const btn = document.getElementById('btn-mcp-rag-run');\n    if (!btn || btn.dataset.bound) return;\n    btn.dataset.bound = '1';\n    btn.addEventListener('click', async () => {\n      const qEl = document.ge", "    panel.textContent = 'Loading trace...'; panel.style.display = 'block';\n    try{ const res = await fetch(api('/api/traces/latest')); if (!res.ok) throw new Error('Failed to load trace'); const data = await res.json(); panel.textContent = JSON.stringify(data, null, 2); }\n    catch(err){ panel.textContent = 'Error loading trace: ' + err.message; }\n  }\n\n  function updateSettingsSummary(){\n    const summary = $('#onboard-summary-content'); if (!summary) return;\n    const { speed, quality, cloud }"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_rag.js:1-22", "/Users/davidmontgomery/agro-rag-engine/gui/js/onboarding.js:1-12"], "source": "golden.json"}
{"query": "Where are the keyword generation scripts?", "positive_text": "#!/usr/bin/env python3\n\"\"\"\nSmart Keyword Generation for  and AGRO\n\nThis script analyzes codebases to generate meaningful, domain-specific keywords\nthat actually help with retrieval instead of generic programming terms.\n\nUsage:\n    python generate_smart_keywords.py  /path/to/\n    python generate_smart_keywords.py agro /path/to/agro\n\"\"\"\n\nimport json\nimport os\nimport re\nimport sys\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Set, Tuple\n\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/scripts/generate_smart_keywords.py:1-21", "negative_texts": ["                'Use shared profile to reuse indices across branches (Infrastructure)'\n            ];\n            sim = startSimProgress(\n                mode === 'llm' ? `Mode: LLM • Backend: ${backend} • Model: ${model}` : 'Mode: Heuristic • Scanning tokens and file coverage…',\n                max_files || 80,\n                tips\n            );\n\n            // Call the keywords generation endpoint\n            const createResponse = await fetch(api('/api/keywords/generate'), {\n                ", "generate_keywords(body: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Generate keywords using either heuristics or an LLM (GUI‑selectable).\n\n    Body: { repo: str, mode?: 'heuristic' | 'llm', max_files?: int }\n    - heuristic: runs scripts/analyze_keywords.py and scripts/analyze_keywords_v2.py\n    - llm: samples files and uses metadata_enricher.enrich to accumulate keywords\n    \"\"\"\n    import subprocess\n    import time\n    from common.config_loader import get_repo_paths\n\n    repo = body.get(\"repo\")\n", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code", "        }\n    }\n\n    async function createKeywords() {\n        const btn = document.getElementById('btn-generate-keywords');\n        setButtonState(btn, 'loading');\n        showStatus('Generating keywords (this may take 2–5 minutes)...', 'loading');\n        let sim; // progress simulator for keyword generation\n        try {\n            const response = await fetch(api('/api/config'));\n            const data = await response.json();\n            const env = (data && data.env) || (state.config && s"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-31", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-285", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-25"], "source": "golden.json"}
{"query": "How does the reranker training with triplets work?", "positive_text": "#!/usr/bin/env python3\n\"\"\"Train cross-encoder reranker on mined triplets.\n\nLoads triplets from data/training/triplets.jsonl and fine-tunes\na cross-encoder model for improved retrieval ranking.\n\"\"\"\nimport json\nimport random\nimport argparse\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom sentence_transformers import CrossEncoder, InputExample\nfrom torch.utils.data import DataLoader\nload_triplets(path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Load all triplets from JSONL fi", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/scripts/train_reranker.py:1-32", "negative_texts": ["reranker_triplets_count() -> Dict[str, Any]:\n    \"\"\"Count training triplets.\"\"\"\n    triplets_path = Path(\"data/training/triplets.jsonl\")\n    count = 0\n    if triplets_path.exists():\n        with triplets_path.open(\"r\") as f:\n            for line in f:\n                if line.strip():\n                    count += 1\n    return {\"count\": count}\n\n@app.get(\"/api/reranker/logs\")reranker_logs() -> Dict[str, Any]:\n    \"\"\"Get recent log entries.\"\"\"\n    log_path = Path(os.getenv(\"AGRO_LOG_PATH\", \"data/log", "main():\n    ap = argparse.ArgumentParser(description=\"Evaluate reranker performance\")\n    ap.add_argument(\"--triplets\", default=\"data/training/triplets.jsonl\",\n                    help=\"Path to triplets JSONL file\")\n    ap.add_argument(\"--model\", default=\"models/cross-encoder-agro\",\n                    help=\"Path to trained model\")\n    args = ap.parse_args()\n\n    triplets = load_triplets(Path(args.triplets))\n    \n    # Use last 10% as test set\n    cut = max(1, int(0.1 * len(triplets)))\n    test ", "#!/usr/bin/env python3\n\"\"\"Evaluate reranker performance using MRR and Hit@K metrics.\n\nLoads triplets and computes ranking metrics for the trained model.\n\"\"\"\nimport json\nimport argparse\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom sentence_transformers import CrossEncoder\nimport numpy as np\nload_triplets(path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Load all triplets from JSONL file.\"\"\"\n    items = []\n    with path.open(\"r\", encoding=\"utf-8\") as f:\n        for line in f:\n       ", "// gui/js/reranker.js - Learning Reranker UI Module\n// Handles feedback collection, triplet mining, training, evaluation, and all reranker features\n\n// ============ LIVE TERMINAL ============\nlet _rerankerTerminal = null;\nlet _lastOutputLineCount = 0;\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-32", "/Users/davidmontgomery/agro-rag-engine/scripts/eval_reranker.py:1-31", "/Users/davidmontgomery/agro-rag-engine/scripts/eval_reranker.py:1-19", "/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-7"], "source": "golden.json"}
{"query": "Where is the Docker Compose and infrastructure setup?", "positive_text": "# Convenience wrapper: delegates to infra/docker-compose.yml\n# This allows running `docker compose ps` from the repo root\n# Note: Use COMPOSE_PROJECT_NAME=infra or run from infra/ directory\n\nname: infra\n\ninclude:\n  - infra/docker-compose.yml\n\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/docker-compose.yml:1-10", "negative_texts": ["                    'Docker API endpoint misconfigured'\n                ],\n                fixes: [\n                    'Start the backend server (check Infrastructure > Services)',\n                    'Verify Docker is installed: run \"docker --version\" in terminal',\n                    'Ensure Docker daemon is running: \"docker ps\" should work',\n                    'Check backend logs for Docker connection errors'\n                ],\n                links: [\n                    ['Install Docker',", "                ],\n                links: [\n                    ['Docker Getting Started', 'https://docs.docker.com/get-started/'],\n                    ['Docker Compose Documentation', 'https://docs.docker.com/compose/']\n                ]\n            }) : `Failed to start infrastructure: ${e.message}`;\n            if (window.showStatus) {\n                window.showStatus(msg, 'error');\n            } else {\n                alert(msg);\n            }\n        } finally {\n            if (btn) btn.di", "start_infra(rag_root: Path, progress: Progress, task_id) -> None:\n    progress.update(task_id, description='Starting Qdrant/Redis (docker compose)')\n    up = rag_root / 'scripts' / 'up.sh'\n    if not up.exists():\n        progress.update(task_id, description='Infra script not found (skipping)')\n        time.sleep(0.3)\n        return\n    try:\n        subprocess.check_call(['bash', str(up)])\n    except Exception as e:\n        console.print(f\"[yellow]Infra start skipped/failed:[/yellow] {e}\")\n    # ", "        const btn = $('#btn-infra-up');\n        if (btn) btn.disabled = true;\n\n        try {\n            const response = await fetch(api('/api/docker/infra/up'), { method: 'POST' });\n            const data = await response.json();\n\n            if (data.success) {\n                if (window.showStatus) {\n                    window.showStatus('Infrastructure started successfully', 'success');\n                } else {\n                    alert('Infrastructure started!');\n                }\n        "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/docker.js:1-33", "/Users/davidmontgomery/agro-rag-engine/gui/js/docker.js:1-44", "/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/docker.js:1-34"], "source": "golden.json"}
{"query": "Where is the Grafana dashboard configuration?", "positive_text": "    return wrap && wrap.style.display !== 'none';\n  }\n\n  function getConfig() {\n    return {\n      baseUrl: vFromDom('GRAFANA_BASE_URL', 'http://127.0.0.1:3000'),\n      dashboardUid: vFromDom('GRAFANA_DASHBOARD_UID', 'agro-overview'),\n      embedEnabled: vFromDom('GRAFANA_EMBED_ENABLED', 'true')\n    };\n  }\n\n  // Register with Navigation API\n  function registerGrafanaView() {\n    if (window.Navigation && typeof window.Navigation.registerView === 'function') {\n      window.Navigation.registerView(", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/grafana.js:1-47", "negative_texts": ["table_panel(panel_id, title, expr, x, y, w, h, unit=\"short\"):\n    return {\n        \"id\": panel_id,\n        \"type\": \"table\",\n        \"title\": title,\n        \"gridPos\": {\"x\": x, \"y\": y, \"w\": w, \"h\": h},\n        \"datasource\": {\"type\": \"prometheus\", \"uid\": \"${DS_PROMETHEUS}\"},\n        \"targets\": [{\"expr\": expr, \"refId\": \"A\", \"format\": \"table\"}],\n        \"options\": {\"showHeader\": True},\n        \"fieldConfig\": {\"defaults\": {\"unit\": unit}, \"overrides\": []},\n        \"pluginVersion\": \"10.0.0\",\n    }\n\n# D", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "heatmap_panel(panel_id, title, expr, x, y, w, h):\n    return {\n        \"id\": panel_id,\n        \"type\": \"heatmap\",\n        \"title\": title,\n        \"gridPos\": {\"x\": x, \"y\": y, \"w\": w, \"h\": h},\n        \"datasource\": {\"type\": \"prometheus\", \"uid\": \"${DS_PROMETHEUS}\"},\n        \"targets\": [{\"expr\": expr, \"refId\": \"A\"}],\n        \"options\": {\"legend\": {\"show\": True}},\n        \"fieldConfig\": {\"defaults\": {\"unit\": \"short\"}, \"overrides\": []},\n        \"pluginVersion\": \"10.0.0\",\n    }\n\n# Helper: bar gauge pan", "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/telemetry/grafana_dash.py:1-145", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/telemetry/grafana_dash.py:1-27", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23"], "source": "golden.json"}
{"query": "Where is the Prometheus metrics configuration?", "positive_text": "global:\n  scrape_interval: 5s\n\nscrape_configs:\n  - job_name: \"agro\"\n    metrics_path: /metrics\n    static_configs:\n      - targets: [\"host.docker.internal:8000\"]  # or your LAN/IP:PORT if running elsewhere\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/telemetry/prometheus.yml:1-9", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "#!/usr/bin/env python3\n\"\"\"Generate fake metrics to populate Grafana dashboard (archived debug script).\n\nMoved to scripts/archive/ per Debug Artifacts Policy. Do not use in production.\n\"\"\"\nimport os\nimport sys\nsys.path.insert(0, os.path.dirname(__file__) + '/../../')\n\nfrom server.metrics import record_canary, set_retrieval_quality, record_tokens, record_cost\nimport random\nimport time\ngenerate_reranker_metrics():\n    \"\"\"Generate reranker canary metrics\"\"\"\n    print(\"Generating reranker metrics...\""], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/scripts/archive/generate_metrics.py:1-34"], "source": "golden.json"}
{"query": "How does the CLI chat tool work?", "positive_text": "#!/usr/bin/env python3\n\"\"\"\nInteractive CLI chat interface for RAG service.\nUses LangGraph with Redis checkpoints for conversation memory.\n\nUsage:\n    export REPO=agro\n    export THREAD_ID=my-session-1\n    python -m cli.chat_cli\n\nCommands:\n    /repo <name>    - Switch repository (from repos.json)\n    /save           - Save conversation checkpoint\n    /clear          - Clear conversation history\n    /help           - Show commands\n    /exit, /quit    - Exit chat\n\"\"\"\nimport os\nimport sys\nimport req", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-27", "negative_texts": ["        ],\n        [['Cost savings', 'info'], ['Channel-specific', 'info']]\n      ),\n      GEN_MODEL_CLI: L(\n        'CLI Channel Model',\n        'Override GEN_MODEL for CLI chat sessions only. Allows using different models for terminal vs web interface - e.g., faster models for CLI iteration, higher quality for production GUI. Useful for developer workflows where CLI is for quick testing and HTTP is for end users. If not set, uses GEN_MODEL.',\n        [\n          ['CLI Chat', '/docs/CLI_CHAT.md", "initChatUI() {\n    const input = document.getElementById('chat-input');\n    const sendBtn = document.getElementById('chat-send');\n    const clearBtn = document.getElementById('chat-clear');\n    const historyBtn = document.getElementById('chat-history');\n    const exportHistoryBtn = document.getElementById('chat-export-history');\n    const clearHistoryBtn = document.getElementById('chat-clear-history');\n    const saveSettingsBtn = document.getElementById('chat-save-settings');\n    const resetSett", "cleanupChatUI() {\n    // Clear any pending requests or intervals\n    // (Currently no cleanup needed, but placeholder for future)\n    console.log('[chat.js] Unmounted');\n}\n\n// Register with Navigation API\nif (typeof window !== 'undefined') {\n    window.addEventListener('DOMContentLoaded', () => {\n        // Register view with Navigation system\n        if (window.Navigation && typeof window.Navigation.registerView === 'function') {\n            window.Navigation.registerView({\n                id: ", "                const qs = new URLSearchParams({ project: prj, share: 'true' });\n                const r = await fetch(api(`/api/langsmith/latest?${qs.toString()}`));\n                const d = await r.json();\n                if (d && d.url) window.open(d.url, '_blank');\n                else alert('No recent LangSmith run found. Ask a question first.');\n            }catch(e){ alert('Unable to open LangSmith: '+e.message); }\n        });\n\n        // Chat bindings\n        const chatSend = document.g"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/chat.js:1-72", "/Users/davidmontgomery/agro-rag-engine/gui/js/chat.js:1-46", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-18"], "source": "golden.json"}
{"query": "Where is the evaluation harness for testing RAG quality?", "positive_text": "#!/usr/bin/env python3\nimport os\nimport json\nimport time\nfrom typing import List\nfrom dotenv import load_dotenv\nfrom retrieval.hybrid_search import search_routed, search_routed_multi\n\nload_dotenv()\n\nGOLDEN_PATH = os.getenv('GOLDEN_PATH', 'golden.json')\nUSE_MULTI = os.getenv('EVAL_MULTI','1') == '1'\nFINAL_K = int(os.getenv('EVAL_FINAL_K','5'))\nMULTI_M = int(os.getenv('EVAL_MULTI_M', '10'))  # Multi-query expansion count\n\n\"\"\"\nGolden file format (golden.json):\n[\n  {\"q\": \"Where is ProviderSetupWizar", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/eval/eval_rag.py:1-25", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "#!/usr/bin/env python3\n\"\"\"Grid search to find optimal RAG parameters using golden questions.\n\nTests different combinations of RRF divisor, top-k values, and scoring weights.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom pathlib import Path\nfrom itertools import product\n\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom retrieval.hybrid_search import search_routed_multi\n\nGOLDEN = Path(\"data/golden.json\")\nevaluate(questions, **params):\n    \"\"\"Run eval with specific parameters.\"\"\"\n    # Set e", "main():\n    with GOLDEN.open() as f:\n        questions = [q for q in json.load(f) if 'q' in q]\n    \n    print(f\"🔬 GRID SEARCH - Tuning RAG parameters\")\n    print(f\"   {len(questions)} golden questions\")\n    print(f\"   Testing parameter combinations...\\n\")\n    \n    # Parameter grid\n    grid = {\n        'topk_dense': [50, 75, 100],\n        'topk_sparse': [50, 75, 100],\n        # Add more params as needed\n    }\n    \n    results = []\n    \n    # Baseline\n    print(\"📊 Testing baseline...\")\n    baselin"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/eval/tune_params.py:1-34", "/Users/davidmontgomery/agro-rag-engine/eval/tune_params.py:1-47"], "source": "golden.json"}
{"query": "How does the theme system work in the GUI?", "positive_text": "      const selTop = $('#theme-mode');\n      const selMisc = $('#misc-theme-mode');\n      if (selTop) selTop.value = mode;\n      if (selMisc) selMisc.value = mode;\n      applyTheme(mode);\n\n      // React to system changes when Auto\n      if (window.matchMedia) {\n        const mq = window.matchMedia('(prefers-color-scheme: dark)');\n        const onChange = () => {\n          const current = (selTop && selTop.value) || (selMisc && selMisc.value) || mode;\n          if (String(current || 'auto').toLo", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/theme.js:1-36", "negative_texts": ["import {themes as prismThemes} from 'prism-react-renderer';\nimport type {Config} from '@docusaurus/types';\nimport type * as Preset from '@docusaurus/preset-classic';\n\nconst config: Config = {\n  title: 'AGRO Documentation',\n  tagline: 'Local-first RAG engine for codebases',\n  favicon: 'img/favicon.ico',\n\n  future: {\n    v4: true,\n  },\n\n  url: 'https://dmontgomery40.github.io',\n  baseUrl: '/agro-rag-engine/',\n\n  organizationName: 'DMontgomery40',\n  projectName: 'agro-rag-engine',\n\n  onBrokenLinks:", "import {themes as prismThemes} from 'prism-react-renderer';\nimport type {Config} from '@docusaurus/types';\nimport type * as Preset from '@docusaurus/preset-classic';\n\nconst config: Config = {\n  title: 'AGRO Documentation',\n  tagline: 'Local-first RAG engine for codebases',\n  favicon: 'img/favicon.ico',\n\n  future: {\n    v4: true,\n  },\n\n  url: 'https://dmontgomery40.github.io',\n  baseUrl: '/agro-rag-engine/',\n\n  organizationName: 'DMontgomery40',\n  projectName: 'agro-rag-engine',\n\n  onBrokenLinks:", "_classify_query(q: str) -> str:\n    \"\"\"Classify query intent for AGRO RAG engine.\"\"\"\n    ql = (q or '').lower()\n    \n    # GUI/Frontend queries\n    if any(k in ql for k in ['gui', 'ui', 'dashboard', 'button', 'component', 'frontend', 'css', 'html', 'interface']):\n        return 'gui'\n    \n    # Retrieval/Search queries\n    if any(k in ql for k in ['search', 'retrieval', 'bm25', 'vector', 'qdrant', 'embedding', 'rerank', 'hybrid']):\n        return 'retrieval'\n    \n    # Indexing queries\n    if an", "    if (selMisc) selMisc.addEventListener('change', () => onThemeChange(selMisc));\n  }\n\n  // ---------------- Resizable Sidepanel ----------------\n  function bindResizableSidepanel() {\n    const handle = $('.resize-handle');\n    if (!handle) return;\n\n    const MIN_WIDTH = 280;\n    const MAX_WIDTH = 900; // soft cap; also clamp to viewport % below\n    const DEFAULT_WIDTH = 360;\n    const STORAGE_KEY = 'agro-sidepanel-width';\n\n    // Restore saved width with viewport constraints\n    const savedWid"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-56", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-56", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-30", "/Users/davidmontgomery/agro-rag-engine/gui/js/ui-helpers.js:1-30"], "source": "golden.json"}
{"query": "Where is the configuration management in the GUI?", "positive_text": "// AGRO GUI - Config Module\n// Handles configuration form loading, population, and saving\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, $$, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !$$ || !state) {\n        console.error('[config.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Load configuration from API and populate form\n     */\n    async function loadConfig() {\n        try {\n            try { await fetch(api('/api/env/reload'),", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-37", "negative_texts": ["        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "            HYDRATION_MODE: 'lazy: hydrate code snippets on demand; none: skip hydration.',\n            HYDRATION_MAX_CHARS: 'Max characters per hydrated code snippet.',\n            VENDOR_MODE: 'Prefer first-party or vendor paths when scoring files.',\n            project_PATH_BOOSTS: 'CSV of path substrings to boost (e.g., app/,lib/,config/).',\n            CARDS_MAX: 'Limit number of cards used for boosting (0 = all).',\n\n            // Confidence\n            CONF_TOP1: 'Accept answer if top-1 r", "// AGRO GUI - RAG Tab Navigation\n// Handles the mega-tab structure for RAG with subtabs\n// Author: AGRO Redesign (Phase 2)\n\n(function() {\n    'use strict';\n\n    const { $, $$, events } = window.CoreUtils || {};\n\n    // RAG Subtab mappings to existing content\n    const RAG_SUBTAB_MAP = {\n        'data-quality': ['config-repos', 'keywords', 'cards'],\n        'retrieval': ['config-models', 'config-retrieval'],\n        'external-rerankers': ['config-reranking'],\n        'learning-ranker': ['reranker", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-20", "/Users/davidmontgomery/agro-rag-engine/gui/js/rag-navigation.js:1-48", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21"], "source": "golden.json"}
{"query": "Where is the index statistics computation?", "positive_text": "index_stats() -> Dict[str, Any]:\n    \"\"\"Return index statistics\"\"\"\n    from server.index_stats import get_index_stats as _get_index_stats\n    return _get_index_stats()\n\n@app.post(\"/api/index/run\")\nasync def run_index(repo: str = Query(...), dense: bool = Query(True)):\n    \"\"\"Actually run the fucking indexer\"\"\"\n    import subprocess\n    import asyncio\n    from fastapi.responses import StreamingResponse\n    \n    async def stream_output():\n        env = os.environ.copy()\n        env['REPO'] = repo\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-40", "negative_texts": ["    }\n\n    /**\n     * Refresh index overview stats\n     */\n    async function refreshIndexStats() {\n        const grid = $('#index-overview-grid');\n        if (!grid) return;\n\n        try {\n            const response = await fetch(api('/api/index/stats'));\n            const stats = await response.json();\n\n            // Calculate totals from repos array\n            let totalChunks = 0;\n            let reposCount = 0;\n            let lastIndexed = 'Never';\n\n            if (stats.repos && Array.is", "\"\"\"Path configuration for AGRO RAG Engine.\"\"\"\nfrom pathlib import Path\nimport os\n\nrepo_root() -> Path:\n    \"\"\"Return the root directory of the repository.\"\"\"\n    return Path(__file__).resolve().parent\n\ndata_dir() -> Path:\n    \"\"\"Return the data directory for storing index artifacts.\"\"\"\n    root = repo_root()\n    data = root / \"data\"\n    data.mkdir(exist_ok=True)\n    return data\n", "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/indexing.js:1-46", "/Users/davidmontgomery/agro-rag-engine/path_config.py:1-15", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36"], "source": "golden.json"}
{"query": "How does the confidence gating work in LangGraph?", "positive_text": "route_after_retrieval(state:RAGState)->str:\n    conf = float(state.get(\"confidence\", 0.0) or 0.0)\n    it = int(state.get(\"iteration\", 0) or 0)\n    docs = state.get(\"documents\", []) or []\n    scores = sorted([float(d.get(\"rerank_score\",0.0) or 0.0) for d in docs], reverse=True)\n    top1 = scores[0] if scores else 0.0\n    avg5 = (sum(scores[:5])/min(5, len(scores))) if scores else 0.0\n    try:\n        CONF_TOP1 = float(os.getenv('CONF_TOP1', '0.62'))\n        CONF_AVG5 = float(os.getenv('CONF_AVG5'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-38", "negative_texts": ["        [\n          ['Confidence Thresholds', 'https://en.wikipedia.org/wiki/Confidence_interval'],\n          ['Precision-Recall Tradeoff', 'https://developers.google.com/machine-learning/crash-course/classification/precision-and-recall'],\n          ['Score Calibration', '/docs/RETRIEVAL.md#confidence-scoring']\n        ],\n        [['Affects answer rate', 'info']]\n      ),\n      CONF_AVG5: L(\n        'Confidence Avg‑5',\n        'Average confidence score of the top-5 results, used as a gate for qu", "#!/usr/bin/env python3\n\"\"\"\nInteractive CLI chat interface for RAG service.\nUses LangGraph with Redis checkpoints for conversation memory.\n\nUsage:\n    export REPO=agro\n    export THREAD_ID=my-session-1\n    python -m cli.chat_cli\n\nCommands:\n    /repo <name>    - Switch repository (from repos.json)\n    /save           - Save conversation checkpoint\n    /clear          - Clear conversation history\n    /help           - Show commands\n    /exit, /quit    - Exit chat\n\"\"\"\nimport os\nimport sys\nimport req", "_load_env_file(env_path: Path) -> bool:\n    \"\"\"Load environment variables from .env if python-dotenv is installed.\n\n    This wrapper avoids conditional redefinition errors in static analysis.\n    \"\"\"\n    if _maybe_load_dotenv is not None:\n        return bool(_maybe_load_dotenv(env_path))\n    return False\n\n# Load environment\n_load_env_file(Path(__file__).resolve().parents[1] / \".env\")\n\nfrom server.langgraph_app import build_graph\nfrom common.config_loader import list_repos\nfrom rich.console impor", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-27", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-26", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27"], "source": "golden.json"}
{"query": "Where are the API endpoint handlers for RAG queries?", "positive_text": "chat(req: ChatRequest, request: Request) -> Dict[str, Any]:\n    \"\"\"Chat endpoint with full settings control.\n\n    Accepts all chat settings and applies them to the RAG pipeline:\n    - model: Override GEN_MODEL\n    - temperature: Control response randomness (0.0-2.0)\n    - max_tokens: Maximum response length\n    - multi_query: Number of query rewrites (1-6)\n    - final_k: Number of code chunks to retrieve (5-50)\n    - confidence: Minimum confidence threshold (0.3-0.9)\n    - system_prompt: Custom ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-172", "negative_texts": ["import express from 'express';\nimport fetch from 'node-fetch';\n\nconst app = express();\nconst PORT = process.env.PORT || 8014;\nconst RAG_API_URL = process.env.RAG_API_URL || 'http://127.0.0.1:8012';\n\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', proxy: true, target: RAG_API_URL });\n});\n\n// JSON answer proxy\napp.get('/mcp/answer', async (req, res) => {\n  try {\n    const { q, repo, token } = req.query;\n    const u = new URL('/answer', RAG_API_URL);\n    if (q) u.searchParams.set('q',", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code", "      const force_local = (localEl && String(localEl.value) === 'true') ? 'true' : 'false';\n      try {\n        out.textContent = 'Running rag_search...';\n        const qs = new URLSearchParams({ q, top_k: String(top_k), force_local });\n        if (repo) qs.set('repo', repo);\n        const r = await fetch(api(`/api/mcp/rag_search?${qs.toString()}`));\n        const d = await r.json();\n        if (d && Array.isArray(d.results)) {\n          const lines = d.results.map(x => `${x.file_path}:${x.start", "// AGRO GUI - Config Module\n// Handles configuration form loading, population, and saving\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, $$, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !$$ || !state) {\n        console.error('[config.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Load configuration from API and populate form\n     */\n    async function loadConfig() {\n        try {\n            try { await fetch(api('/api/env/reload'),"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-36", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_rag.js:1-32", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-37"], "source": "golden.json"}
{"query": "How does the query rewriting work when confidence is low?", "positive_text": "RAGState(TypedDict):\n    question: str\n    documents: Annotated[List[Dict], operator.add]\n    generation: str\n    iteration: int\n    confidence: float\n    repo: str\nshould_use_multi_query(question: str) -> bool:\n    q = (question or '').lower().strip()\n    if len(q.split()) <= 3:\n        return False\n    for w in (\"how\", \"why\", \"explain\", \"compare\", \"tradeoff\"):\n        if w in q:\n            return True\n    return False\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-16", "negative_texts": ["        [\n          ['Confidence Thresholds', 'https://en.wikipedia.org/wiki/Confidence_interval'],\n          ['Precision-Recall Tradeoff', 'https://developers.google.com/machine-learning/crash-course/classification/precision-and-recall'],\n          ['Score Calibration', '/docs/RETRIEVAL.md#confidence-scoring']\n        ],\n        [['Affects answer rate', 'info']]\n      ),\n      CONF_AVG5: L(\n        'Confidence Avg‑5',\n        'Average confidence score of the top-5 results, used as a gate for qu", "_infer_quality_score(row: Dict[str, Any], comp_type: str) -> Number:\n    \"\"\"Heuristic quality when not provided in prices.json.\n    Tries to be sensible for performance mode ranking.\n    \"\"\"\n    prov = (row.get(\"provider\") or \"\").lower()\n    fam = (row.get(\"family\") or \"\").lower()\n    model = (row.get(\"model\") or \"\").lower()\n    c = comp_type.upper()\n\n    if c == \"GEN\":\n        # OpenAI / o-series / GPT-4 family hierarchy\n        if prov == \"openai\":\n            if model.startswith(\"o1\"):\n      ", "import os\nfrom pathlib import Path\n\n# Initialize LangTrace FIRST - must precede ANY LLM/framework imports\ntry:\n    from langtrace_python_sdk import langtrace\n    LANGTRACE_KEY = os.getenv('LANGTRACE_API_KEY', '0b20be5d3e82b7c514cd1bea1fa583f92683e55ebe895452ece7d9261d4412d2')\n    langtrace.init(api_key=LANGTRACE_KEY)\n    print(\"✅ LangTrace initialized in FastAPI server\")\nexcept Exception as e:\n    print(f\"⚠️ LangTrace init failed: {e}\")\n\nfrom fastapi import FastAPI, Query, HTTPException, Request", "rerank_candidates(\n    query: str,\n    candidates: List[Dict[str, Any]],\n    blend_alpha: float = float(os.getenv(\"AGRO_RERANKER_ALPHA\", \"0.7\"))\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Feature gate:\n      AGRO_RERANKER_TOPN=N (default 50). 0 = rerank ALL.\n    candidates: [{\"doc_id\": str, \"score\": float, \"text\": str, \"clicked\": bool}, ...]\n    \"\"\"\n    if not candidates or \"text\" not in candidates[0]:\n        return candidates\n\n    base_sorted = sorted(candidates, key=lambda c: float(c.get(\"score\","], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "/Users/davidmontgomery/agro-rag-engine/server/autoprofile.py:1-67", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-65", "/Users/davidmontgomery/agro-rag-engine/server/reranker.py:1-35"], "source": "golden.json"}
{"query": "Where is the synonym expansion for semantic search?", "positive_text": "expand_query_with_synonyms(query: str, repo: str, max_expansions: int = 3) -> str:\n    \"\"\"\n    Expand a query by adding semantic synonyms.\n    \n    Args:\n        query: Original query string\n        repo: Repository name for synonym lookup\n        max_expansions: Maximum number of synonyms to add per term (default: 3)\n    \n    Returns:\n        Expanded query string with synonyms added\n    \n    Example:\n        Input:  \"camera auth\"\n        Output: \"camera video stream auth authentication oauth\"\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/synonym_expander.py:1-46", "negative_texts": ["generate_node(state: RAGState) -> Dict:\n    q = state['question']; ctx = state['documents'][:5]\n    # packer summary for trace\n    try:\n        tr = get_trace()\n        if tr is not None:\n            budget = int(os.getenv('PACK_BUDGET_TOKENS', '4096') or 4096)\n            selected = []\n            for d in ctx:\n                sel = {\n                    'path': d.get('file_path'),\n                    'lines': f\"L{d.get('start_line')}-L{d.get('end_line')}\",\n                    'est_tokens': int", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code", "import React from 'react';\nimport ComponentCreator from '@docusaurus/ComponentCreator';\n\nexport default [\n  {\n    path: '/agro-rag-engine/markdown-page',\n    component: ComponentCreator('/agro-rag-engine/markdown-page', '699'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/search',\n    component: ComponentCreator('/agro-rag-engine/search', 'd97'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/',\n    component: ComponentCreator('/agro-rag-engine/', 'f21'),\n    exact: true\n  },\n  {\n ", "should_index_file(path: str) -> bool:\n    p = pathlib.Path(path)\n    # 1) fast deny: extension must look like source\n    if p.suffix.lower() not in SOURCE_EXTS:\n        return False\n    # 2) glob excludes (vendor, caches, images, minified, etc.)\n    as_posix = p.as_posix()\n    for pat in _EXCLUDE_GLOBS:\n        if fnmatch.fnmatch(as_posix, pat):\n            return False\n    # 3) quick heuristic to skip huge/minified one-liners\n    try:\n        text = p.read_text(errors=\"ignore\")\n        if len(t"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-151", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-41", "/Users/davidmontgomery/agro-rag-engine/indexer/index_repo.py:1-31"], "source": "golden.json"}
{"query": "Where are the cost calculation utilities for token usage?", "positive_text": "getModelSpec(prices, providerName, modelName) {\n  const p = prices?.providers?.[normKey(providerName)];\n  if (!p) return null;\n  const spec = p.models?.[modelName] || p.models?.[normKey(modelName)];\n  return spec || null;\n}\n\n/**\n * Compute cost for a single “operation”.\n * @param {Object} opt\n * @param {\"chat\"|\"embed\"|\"rerank\"} opt.type\n * @param {string} opt.provider\n * @param {string} opt.model\n * @param {number} [opt.input_tokens]  - for chat\n * @param {number} [opt.output_tokens] - for chat\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/cost_logic.js:1-19", "negative_texts": ["_estimate_cost(\n    gen_provider: str,\n    gen_model: Optional[str],\n    tokens_in: int,\n    tokens_out: int,\n    embeds: int,\n    reranks: int,\n    requests_per_day: int,\n    embed_provider: Optional[str] = None,\n    embed_model: Optional[str] = None,\n    rerank_provider: Optional[str] = None,\n    rerank_model: Optional[str] = None,\n) -> Dict[str, Any]:\n    \"\"\"Estimate daily and monthly costs using gui/prices.json.\n\n    Semantics (simple and robust):\n      - tokens_in/out are per-request tokens", "generate_token_cost_metrics():\n    \"\"\"Generate token and cost metrics\"\"\"\n    print(\"Generating token/cost metrics...\")\n\n    for i in range(100):\n        model = random.choice([\"gpt-4o-mini\", \"gpt-4o\", \"claude-3-5-sonnet\"])\n        provider = \"openai\" if \"gpt\" in model else \"anthropic\"\n\n        prompt_tokens = random.randint(500, 2000)\n        completion_tokens = random.randint(100, 800)\n\n        record_tokens(\"prompt\", provider, model, prompt_tokens)\n        record_tokens(\"completion\", provider,", "    openai_total_tokens = total_mcp_tokens + openai_output_tokens\n    \n    # gpt-4o pricing (as of Oct 2025): $2.50/1M input, $10/1M output\n    input_cost = total_mcp_tokens * (2.50 / 1_000_000)\n    output_cost = openai_output_tokens * (10.00 / 1_000_000)\n    total_cost = input_cost + output_cost\n    \n    print(f\"Answer length: {len(openai_answer)} chars\")\n    print(f\"Output tokens: {openai_output_tokens:,}\")\n    print(f\"Total tokens (MCP + generation): {openai_total_tokens:,}\")\n    print(f\"Gene", "#!/usr/bin/env python3\n\"\"\"Quick token test for docs - measure actual usage\"\"\"\nimport os\nos.environ[\"OLLAMA_URL\"] = \"http://127.0.0.1:11434/api\"\nos.environ[\"GEN_MODEL\"] = \"qwen3-coder:30b\"\n\nimport sys\nROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, ROOT_DIR)\n\ntry:\n    import tiktoken\n    enc = tiktoken.encoding_for_model(\"gpt-4o\")\n    def count_tokens(text): return len(enc.encode(text))\nexcept:\n    def count_tokens(text): return len(text) // 4\n\n# Test "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-91", "/Users/davidmontgomery/agro-rag-engine/scripts/archive/generate_metrics.py:1-40", "/Users/davidmontgomery/agro-rag-engine/scripts/full_comparison.py:1-27", "/Users/davidmontgomery/agro-rag-engine/scripts/quick_token_test.py:1-35"], "source": "golden.json"}
{"query": "How does the dashboard tab render system status?", "positive_text": "mcp_status() -> Dict[str, Any]:\n    \"\"\"Consolidated MCP status for Dashboard.\n\n    Reports Python HTTP (:8013), Node HTTP (:8014), and Python stdio availability.\n    \"\"\"\n    import socket\n    def tcp(host: str, port: int, timeout: float = 0.25) -> bool:\n        try:\n            with socket.create_connection((host, port), timeout=timeout):\n                return True\n        except Exception:\n            return False\n\n    # Python HTTP MCP\n    py_host = os.getenv('MCP_HTTP_HOST') or '127.0.0.1'\n ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-56", "negative_texts": ["// AGRO DOM DIAGNOSTICS - Paste this into browser console at http://127.0.0.1:8012\n\nconsole.log(\"=== CONTENT CHECK ===\");\nconst tabs = ['start', 'dashboard', 'chat', 'vscode', 'grafana', 'rag', 'profiles', 'infrastructure', 'admin'];\ntabs.forEach(id => {\n  const el = document.getElementById('tab-' + id);\n  if (!el) {\n    console.log(`%ctab-${id}: ✗ NOT FOUND`, 'color: red');\n  } else {\n    const size = el.innerHTML.length;\n    const visible = el.offsetHeight > 0;\n    const active = el.classList.", "    console.log('%cAfter clicking dashboard:', 'color: cyan');\n    console.log('  Button .active: %c' + dashboardBtn.classList.contains('active'), dashboardBtn.classList.contains('active') ? 'color: green' : 'color: red');\n    console.log('  Div .active: %c' + (dashboard?.classList.contains('active')), dashboard?.classList.contains('active') ? 'color: green' : 'color: red');\n    console.log('  Div visible: %c' + (dashboard?.offsetHeight > 0), dashboard?.offsetHeight > 0 ? 'color: green' : 'color", "      </div>\n    `);\n    return html.join('');\n  }\n\n  async function pollIndexStatus(){\n    try{\n      const r = await fetch(api('/api/index/status'));\n      const d = await r.json();\n      const box1 = document.getElementById('index-status');\n      const bar1 = document.getElementById('index-bar');\n      const box2 = document.getElementById('dash-index-status');\n      const bar2 = document.getElementById('dash-index-bar');\n      const lastIndexedDisplay = document.getElementById('last-indexed-d", "                    parts.push(`py-stdio:${s.python_stdio_available ? 'available' : 'missing'}`);\n                }\n                if (dm) dm.textContent = parts.join(' | ') || 'unknown';\n            } else {\n                if (dm) dm.textContent = 'unknown';\n            }\n        } catch { const dm = document.getElementById('dash-mcp'); if (dm) dm.textContent = 'unknown'; }\n\n        // Load initial index status to show metadata (delegated)\n        try {\n            if (window.IndexStatus && t"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/run_diagnostics.js:1-23", "/Users/davidmontgomery/agro-rag-engine/run_diagnostics.js:1-18", "/Users/davidmontgomery/agro-rag-engine/gui/js/index_status.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-31"], "source": "golden.json"}
{"query": "Where is the telemetry logging for queries and feedback?", "positive_text": "log_query_event(\n    query_raw: str,\n    query_rewritten: Optional[str],\n    retrieved: List[Dict[str, Any]],  # [{\"doc_id\": str, \"score\": float, \"text\": str, \"clicked\": bool}]\n    answer_text: str,\n    ground_truth_refs: Optional[List[str]] = None,\n    latency_ms: Optional[int] = None,\n    cost_usd: Optional[float] = None,\n    route: Optional[str] = None,\n    client_ip: Optional[str] = None,\n    user_agent: Optional[str] = None,\n) -> str:\n    \"\"\"Log a query event and return event_id for later f", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/telemetry.py:1-46", "negative_texts": ["generate_node(state: RAGState) -> Dict:\n    q = state['question']; ctx = state['documents'][:5]\n    # packer summary for trace\n    try:\n        tr = get_trace()\n        if tr is not None:\n            budget = int(os.getenv('PACK_BUDGET_TOKENS', '4096') or 4096)\n            selected = []\n            for d in ctx:\n                sel = {\n                    'path': d.get('file_path'),\n                    'lines': f\"L{d.get('start_line')}-L{d.get('end_line')}\",\n                    'est_tokens': int", "table_panel(panel_id, title, expr, x, y, w, h, unit=\"short\"):\n    return {\n        \"id\": panel_id,\n        \"type\": \"table\",\n        \"title\": title,\n        \"gridPos\": {\"x\": x, \"y\": y, \"w\": w, \"h\": h},\n        \"datasource\": {\"type\": \"prometheus\", \"uid\": \"${DS_PROMETHEUS}\"},\n        \"targets\": [{\"expr\": expr, \"refId\": \"A\", \"format\": \"table\"}],\n        \"options\": {\"showHeader\": True},\n        \"fieldConfig\": {\"defaults\": {\"unit\": unit}, \"overrides\": []},\n        \"pluginVersion\": \"10.0.0\",\n    }\n\n# D", "_classify_query(q: str) -> str:\n    \"\"\"Classify query intent for AGRO RAG engine.\"\"\"\n    ql = (q or '').lower()\n    \n    # GUI/Frontend queries\n    if any(k in ql for k in ['gui', 'ui', 'dashboard', 'button', 'component', 'frontend', 'css', 'html', 'interface']):\n        return 'gui'\n    \n    # Retrieval/Search queries\n    if any(k in ql for k in ['search', 'retrieval', 'bm25', 'vector', 'qdrant', 'embedding', 'rerank', 'hybrid']):\n        return 'retrieval'\n    \n    # Indexing queries\n    if an", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-151", "/Users/davidmontgomery/agro-rag-engine/telemetry/grafana_dash.py:1-145", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-30", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36"], "source": "golden.json"}
{"query": "How does the MCP HTTP server work?", "positive_text": "web_get(url: str, max_bytes: int = 20000) -> Dict[str, Any]:\n    \"\"\"\n    HTTP GET for allowlisted documentation domains.\n    Allowed: openai.com, platform.openai.com, github.com, openai.github.io\n    \"\"\"\n    allowed_hosts = {\"openai.com\", \"platform.openai.com\", \"github.com\", \"openai.github.io\"}\n    \n    def _is_allowed(url: str) -> bool:\n        try:\n            u = urllib.parse.urlparse(url)\n            host = (u.netloc or \"\").lower()\n            return any(host == h or host.endswith(\".\" + h) f", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/mcp/http.py:1-46", "negative_texts": ["mcp_http_status() -> Dict[str, Any]:\n    \"\"\"Check HTTP MCP server status without triggering request logging.\n\n    Uses a lightweight TCP connect to determine if host:port is reachable,\n    and returns configured host/port/path so the UI can display where MCP is\n    intended to run.\n    \"\"\"\n    import socket\n    host = os.getenv('MCP_HTTP_HOST') or '127.0.0.1'\n    try:\n        port = int(os.getenv('MCP_HTTP_PORT') or '8013')\n    except Exception:\n        port = 8013\n    path = os.getenv('MCP_HTTP", "// AGRO GUI - MCP Server Management Module\n// Handles MCP HTTP server management and stdio testing\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !state) {\n        console.error('[mcp_server.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Update HTTP MCP server status\n     */\n    async function updateHTTPStatus() {\n        const statusEl = $('#mcp-http-status');\n        if (!statusEl) retu", "            statusEl.style.borderColor = 'var(--warn)';\n            console.error('Failed to check HTTP MCP status:', e);\n        }\n    }\n\n    /**\n     * Start HTTP MCP server\n     */\n    async function startHTTPServer() {\n        const btn = $('#btn-mcp-http-start');\n        if (btn) btn.disabled = true;\n\n        try {\n            const response = await fetch(api('/api/mcp/http/start'), { method: 'POST' });\n            const data = await response.json();\n\n            if (data.success) {\n       ", "mcp_http_start() -> Dict[str, Any]:\n    \"\"\"Start HTTP MCP server on port 8013\"\"\"\n    import subprocess\n    try:\n        # Check if already running\n        status = mcp_http_status()\n        if status[\"running\"]:\n            return {\"success\": False, \"error\": \"HTTP MCP already running on port 8013\"}\n        \n        # Start in background\n        subprocess.Popen(\n            [str(ROOT / \".venv\" / \"bin\" / \"python\"), \"-m\", \"server.mcp.http\"],\n            cwd=str(ROOT),\n            stdout=open(\"/tmp"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-32", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-40", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-48", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-39"], "source": "golden.json"}
{"query": "Where is the Node.js MCP server implementation?", "positive_text": "    }\n    res.end();\n  } catch (e) {\n    res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');\n    res.write(`data: [ERROR] ${String(e)}\\n\\n`);\n    res.end();\n  }\n});\n\n// Netlify deploy proxy (calls Python HTTP MCP on 8013)\napp.get('/mcp/netlify_deploy', async (req, res) => {\n  try {\n    const { domain, token } = req.query;\n    const MCP_HTTP_URL = process.env.MCP_HTTP_URL || 'http://127.0.0.1:8013';\n    const u = new URL('/mcp/tools/call', MCP_HTTP_URL);\n    const headers = token ?", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-34", "negative_texts": ["            }\n        });\n    } else {\n        console.warn('[mcp_server.js] Navigation API not available, falling back to legacy mode');\n        // Legacy mode: auto-init\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initMCPServerUI);\n        } else {\n            initMCPServerUI();\n        }\n    }\n\n    console.log('[mcp_server.js] Module loaded (PRIMARY for infrastructure, coordinates docker.js)');\n})();\n", "            } else {\n                alert(`Error: ${e.message}`);\n            }\n        } finally {\n            if (btn) btn.disabled = false;\n        }\n    }\n\n    /**\n     * Test stdio MCP server\n     */\n    async function testStdioServer() {\n        const btn = $('#btn-mcp-test');\n        const outputEl = $('#mcp-test-output');\n        \n        if (btn) btn.disabled = true;\n        if (outputEl) {\n            outputEl.style.display = 'block';\n            outputEl.textContent = 'Testing stdio ", "                }\n            }\n        } catch (e) {\n            if (outputEl) outputEl.textContent = `✗ Error: ${e.message}`;\n            \n            if (window.showStatus) {\n                window.showStatus(`stdio MCP test failed: ${e.message}`, 'error');\n            }\n        } finally {\n            if (btn) btn.disabled = false;\n        }\n    }\n\n    /**\n     * Initialize MCP server management UI\n     */\n    function initMCPServerUI() {\n        // Bind HTTP server buttons\n        const btn", "// AGRO GUI - MCP Server Management Module\n// Handles MCP HTTP server management and stdio testing\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !state) {\n        console.error('[mcp_server.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Update HTTP MCP server status\n     */\n    async function updateHTTPStatus() {\n        const statusEl = $('#mcp-http-status');\n        if (!statusEl) retu"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-15", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-41", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-37", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-40"], "source": "golden.json"}
{"query": "Where are the common path utilities?", "positive_text": "from __future__ import annotations\n\nimport os\nfrom pathlib import Path\n\n_as_dir(p: str | Path | None) -> Path:\n    if not p:\n        return Path(\"\")\n    pp = Path(str(p)).expanduser()\n    return pp if pp.is_absolute() else (Path(__file__).resolve().parents[1] / pp)\n\nrepo_root() -> Path:\n    env = os.getenv(\"REPO_ROOT\")\n    if env:\n        return _as_dir(env)\n    return Path(__file__).resolve().parents[1]\n\nfiles_root() -> Path:\n    return _as_dir(os.getenv(\"FILES_ROOT\")) or repo_root()\n\ngui_dir()", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/common/paths.py:1-33", "negative_texts": ["\"\"\"Shared helpers (paths, config, filtering, metadata, Qdrant utils).\"\"\"\n\n", "\"\"\"Path configuration for AGRO RAG Engine.\"\"\"\nfrom pathlib import Path\nimport os\n\nrepo_root() -> Path:\n    \"\"\"Return the root directory of the repository.\"\"\"\n    return Path(__file__).resolve().parent\n\ndata_dir() -> Path:\n    \"\"\"Return the data directory for storing index artifacts.\"\"\"\n    root = repo_root()\n    data = root / \"data\"\n    data.mkdir(exist_ok=True)\n    return data\n", "// UI Helpers - Common UI utilities and interactions\n// Handles collapsible sections, resizable panels, number formatting\n;(function() {\n  'use strict';\n\n  // Get shared utilities\n  const $ = window.CoreUtils?.$ || ((s) => document.querySelector(s));\n  const $$ = window.CoreUtils?.$$ || ((s) => Array.from(document.querySelectorAll(s)));\n\n  // ---------------- Collapsible Sections ----------------\n  function bindCollapsibleSections() {\n    const headers = $$('.collapsible-header');\n\n    headers.f", "import os, operator\nfrom typing import List, Dict, TypedDict, Annotated\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\n\n# LangTrace already initialized in server/app.py - no need to re-init\n\nfrom langgraph.graph import END, StateGraph\nfrom langgraph.checkpoint.redis import RedisSaver\nfrom retrieval.hybrid_search import search_routed_multi as hybrid_search_routed_multi\nfrom server.tracing import get_trace\nfrom server.env_model import generate_text\nfrom server.index_stats imp"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/common/__init__.py:1-3", "/Users/davidmontgomery/agro-rag-engine/path_config.py:1-15", "/Users/davidmontgomery/agro-rag-engine/gui/js/ui-helpers.js:1-33", "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-29"], "source": "golden.json"}
{"query": "How does the file selection and upload work in the GUI?", "positive_text": "// Secrets - Drag & Drop secrets file ingestion\n// Handles .env file upload and secrets management\n;(function() {\n  'use strict';\n\n  // Get shared utilities\n  const api = window.CoreUtils?.api || ((p) => `/api${p}`);\n  const $ = window.CoreUtils?.$ || ((s) => document.querySelector(s));\n\n  // Ingest a secrets file\n  async function ingestFile(file) {\n    const persist = $('#persist-secrets')?.checked || false;\n    const fd = new FormData();\n    fd.append('file', file);\n    fd.append('persist', St", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/secrets.js:1-45", "negative_texts": ["# server/webhook_config.py\n# Webhook configuration management - Slack/Discord URLs stored in GUI\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nWEBHOOK_CONFIG_FILE = CONFIG_DIR / \"webhooks.json\"\n\n\n@dataclass", "    async function changeRepo() {\n        showStatus('Loading repositories...', 'loading');\n\n        try {\n            const response = await fetch(api('/api/config'));\n            const data = await response.json();\n            const repos = data.repos || [];\n            const currentRepo = (data.env && data.env.REPO) || data.default_repo || 'agro';\n\n            if (repos.length === 0) {\n                showStatus('No repositories configured', 'error');\n                return;\n            }\n\n  ", " *     window.UXFeedback.createRipple(button, e);\n * });\n *\n * // Show progress bar\n * window.UXFeedback.progress.show('indexing', {\n *     message: 'Indexing repository...',\n *     initialPercent: 0,\n *     eta: '2 minutes'\n * });\n *\n * // Update progress\n * window.UXFeedback.progress.update('indexing', {\n *     percent: 45,\n *     message: 'Processing files...',\n *     eta: '1 minute'\n * });\n *\n * // Hide progress\n * window.UXFeedback.progress.hide('indexing');\n *\n * // Form validation\n * cons", "    if (folderBtn && folderPicker){ folderBtn.addEventListener('click', ()=>folderPicker.click()); folderPicker.addEventListener('change',(e)=>{ if(e.target.files && e.target.files.length>0){ const path=e.target.files[0].webkitRelativePath || e.target.files[0].path || ''; const folderName = path.split('/')[0] || 'Selected folder'; if (folderDisplay) folderDisplay.textContent = folderName; if (folderPath) folderPath.value = folderName; } }); }\n    $$('.ob-ask-btn').forEach(btn=>{ btn.addEventList"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/webhook_config.py:1-15", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-42", "/Users/davidmontgomery/agro-rag-engine/gui/js/ux-feedback.js:1-41", "/Users/davidmontgomery/agro-rag-engine/gui/js/onboarding.js:1-6"], "source": "golden.json"}
{"query": "Where is the golden questions test runner?", "positive_text": "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "        [\n          ['Golden Questions Format', '/docs/EVALUATION.md#golden-format'],\n          ['Eval Script Source', '/files/eval/eval_loop.py'],\n          ['Creating Golden Sets', '/docs/EVALUATION.md#creating-golden-questions'],\n          ['Evaluation Metrics', 'https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)']\n        ]\n      ),\n      BASELINE_PATH: L(\n        'Baseline Path',\n        'Directory where evaluation loop saves baseline results for regression testing an", "main():\n    with GOLDEN.open() as f:\n        questions = [q for q in json.load(f) if 'q' in q]\n    \n    print(f\"🔬 GRID SEARCH - Tuning RAG parameters\")\n    print(f\"   {len(questions)} golden questions\")\n    print(f\"   Testing parameter combinations...\\n\")\n    \n    # Parameter grid\n    grid = {\n        'topk_dense': [50, 75, 100],\n        'topk_sparse': [50, 75, 100],\n        # Add more params as needed\n    }\n    \n    results = []\n    \n    # Baseline\n    print(\"📊 Testing baseline...\")\n    baselin", "// Evaluation Runner\n// Handles running full evaluation suite and displaying results\n\nlet evalResults = null;\nlet evalPollingInterval = null;\n\n// Run full evaluation\nasync function runEvaluation() {\n    const useMulti = document.getElementById('eval-use-multi').value === '1';\n    const finalK = parseInt(document.getElementById('eval-final-k').value) || 5;\n\n    const btn = document.getElementById('btn-eval-run');\n    btn.disabled = true;\n    btn.textContent = 'Starting...';\n\n    try {\n        con"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "/Users/davidmontgomery/agro-rag-engine/eval/tune_params.py:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/eval_runner.js:1-59"], "source": "golden.json"}
{"query": "Where is the infrastructure management in the GUI?", "positive_text": "// AGRO GUI - Docker Management Module\n// Handles Docker status, containers, and infrastructure services\n\n(function () {\n    'use strict';\n\n    const { api, $, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !state) {\n        console.error('[docker.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Check Docker status\n     */\n    async function checkDockerStatus() {\n        const display = $('#docker-status-display');\n        if (!display) return;\n\n        try {\n        ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/docker.js:1-31", "negative_texts": ["        setInterval(() => {\n            const infraTab = $('#tab-infrastructure');\n            if (infraTab && infraTab.classList.contains('active')) {\n                updateHTTPStatus();\n            }\n        }, 10000);\n    }\n\n    // Export to window\n    window.MCPServer = {\n        updateHTTPStatus,\n        startHTTPServer,\n        stopHTTPServer,\n        restartHTTPServer,\n        testStdioServer,\n        initMCPServerUI\n    };\n\n    // Initialization function for infrastructure view\n    windo", "                ],\n                fixes: [\n                    'Verify backend service is running: check Infrastructure tab',\n                    'Check backend logs for configuration loading errors',\n                    'Verify network connectivity and firewall rules',\n                    'Refresh the page and try loading configuration again'\n                ],\n                links: [\n                    ['Fetch API Documentation', 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API']", "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-39", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-32", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36"], "source": "golden.json"}
{"query": "How does the reranker UI component work?", "positive_text": "initRerankerUI() {\n    // Mine button\n    const mineBtn = document.getElementById('reranker-mine-btn');\n    if (mineBtn) {\n        mineBtn.addEventListener('click', async () => {\n            mineBtn.disabled = true;\n            mineBtn.textContent = 'Mining...';\n            try {\n                await mineTriplets();\n            } catch (error) {\n                alert(error.message);\n            } finally {\n                setTimeout(() => {\n                    mineBtn.disabled = false;\n        ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-102", "negative_texts": ["            }\n            // Reranker\n            if (env.RERANK_BACKEND) {\n                const rp = document.getElementById('cost-rerank-provider'); if (rp) rp.value = env.RERANK_BACKEND;\n            }\n            if (env.COHERE_RERANK_MODEL && document.getElementById('cost-rerank-model')) $('#cost-rerank-model').value = env.COHERE_RERANK_MODEL;\n            if (env.RERANKER_MODEL && document.getElementById('cost-rerank-model') && !$('#cost-rerank-model').value) $('#cost-rerank-model').value =", "            displayValue = `${value}: ${profile.RERANKER_MODEL}`;\n          }\n        }\n        html += '<div style=\"display:flex;gap:12px;\">';\n        html += '<div style=\"font-size:20px;flex-shrink:0;width:32px;height:32px;display:flex;align-items:center;justify-content:center;background:var(--bg-elev2);border-radius:6px;\">';\n        html += info.icon + '</div>';\n        html += '<div style=\"flex:1;\">';\n        html += '<div style=\"display:flex;align-items:center;justify-content:space-between;", "_classify_query(q: str) -> str:\n    \"\"\"Classify query intent for AGRO RAG engine.\"\"\"\n    ql = (q or '').lower()\n    \n    # GUI/Frontend queries\n    if any(k in ql for k in ['gui', 'ui', 'dashboard', 'button', 'component', 'frontend', 'css', 'html', 'interface']):\n        return 'gui'\n    \n    # Retrieval/Search queries\n    if any(k in ql for k in ['search', 'retrieval', 'bm25', 'vector', 'qdrant', 'embedding', 'rerank', 'hybrid']):\n        return 'retrieval'\n    \n    # Indexing queries\n    if an", "            } else if (p === 'none') {\n                items = [];\n            } else {\n                items = models.filter(m => isRerank(m) && String(m.provider||'').toLowerCase()===p).map(m => m.model);\n            }\n            if (!items.length) items = unique(models.filter(isRerank).map(m => m.model));\n            if (rrList) setOpts(rrList, unique(items));\n            if (input && items.length && !items.includes(input.value)) input.value = '';\n        }\n        const embProvSel = documen"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-27", "/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-22", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-30", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-23"], "source": "golden.json"}
{"query": "Where are the alert configuration and management?", "positive_text": "    # webhook_configs:\n    #   - url: 'http://your-webhook-server/warning'\n    webhook_configs:\n      - url: 'http://host.docker.internal:8012/webhooks/alertmanager'\n        send_resolved: true\n\n  - name: 'info'\n    # webhook_configs:\n    #   - url: 'http://your-webhook-server/info'\n    webhook_configs:\n      - url: 'http://host.docker.internal:8012/webhooks/alertmanager'\n        send_resolved: true\n\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/infra/alertmanager.yml:1-14", "negative_texts": ["# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass", "_dispatch_notifications(status: str, alerts: List[Dict[str, Any]]):\n    # Gate by config\n    if not _notify_enabled():\n        return\n    if status == \"resolved\" and not _include_resolved():\n        return\n    if not alerts:\n        return\n\n    allowed = set(_notify_severities())\n    selected: List[Dict[str, Any]] = []\n    for a in alerts:\n        sev = str(a.get(\"labels\", {}).get(\"severity\", \"\")).lower()\n        if sev in allowed:\n            selected.append(a)\n    if not selected:\n        retu", "                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                component: ComponentCreator('/agro-rag-engine/configuration/alerting', 'ceb'),\n          "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16", "/Users/davidmontgomery/agro-rag-engine/server/alerts.py:1-318", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38"], "source": "golden.json"}
{"query": "How does the profiles system work for saving configurations?", "positive_text": "profiles_list() -> Dict[str, Any]:\n    prof_dir = GUI_DIR / \"profiles\"\n    prof_dir.mkdir(parents=True, exist_ok=True)\n    names = []\n    for p in prof_dir.glob(\"*.json\"):\n        names.append(p.stem)\n    return {\"profiles\": sorted(names), \"default\": None}\n\n@app.get(\"/api/profiles/{name}\")profiles_get(name: str) -> Dict[str, Any]:\n    prof_dir = GUI_DIR / \"profiles\"\n    path = prof_dir / f\"{name}.json\"\n    if not path.exists():\n        raise HTTPException(status_code=404, detail=f\"Profile '{name", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-26", "negative_texts": ["        // Legacy mode: initialize immediately\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', loadConfig);\n        } else {\n            loadConfig();\n        }\n    }\n\n    // Export to window\n    window.Config = {\n        loadConfig,\n        populateConfigForm,\n        gatherConfigForm,\n        saveConfig,\n        initConfigRetrieval,\n        initProfilesUI\n    };\n\n    console.log('[config.js] Module loaded with dual registration (rag-re", "\n            // Reload config to show updated values in UI\n            await loadConfig();\n        } catch (e) {\n            alert(`Error loading profile \"${name}\": ${e.message}`);\n        }\n    }\n\n    async function saveProfile() {\n        const name = $('#profile-name').value.trim();\n        if (!name) {\n            alert('Enter a profile name');\n            return;\n        }\n\n        // Prefer wizard preview if present; otherwise build from scan\n        let prof = null;\n        const preview ", "# server/webhook_config.py\n# Webhook configuration management - Slack/Discord URLs stored in GUI\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nWEBHOOK_CONFIG_FILE = CONFIG_DIR / \"webhooks.json\"\n\n\n@dataclass", "        loadConfig();\n        // Future: Add profiles-specific UI initialization here\n        // Will coordinate with profile_logic.js, cost_logic.js, etc.\n    }\n\n    // Register for rag-retrieval tab\n    if (window.Navigation && typeof window.Navigation.registerView === 'function') {\n        window.Navigation.registerView({\n            id: 'rag-retrieval',\n            title: 'Retrieval',\n            mount: () => {\n                console.log('[config.js] Mounted for rag-retrieval');\n           "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-41", "/Users/davidmontgomery/agro-rag-engine/server/webhook_config.py:1-15", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-37"], "source": "golden.json"}
{"query": "Where is the VS Code integration for embedded editor?", "positive_text": "// AGRO GUI - VS Code Integration Module (Compatibility Layer)\n// Provides backward-compatible API wrapping the unified Editor module\n// This module is now primarily a shim for the newer editor.js implementation\n;(function() {\n    'use strict';\n\n    /**\n     * Show the VS Code editor - delegates to Editor module\n     */\n    function showEditor() {\n        console.log('[VSCode] Delegating showEditor to Editor module');\n        const container = document.getElementById('editor-iframe-container');\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-37", "negative_texts": ["editor_root() -> Response:\n    # normalize to trailing slash for relative asset links\n    return RedirectResponse(url=\"/editor/\")\n\n@app.api_route(\"/editor/{path:path}\", methods=[\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\"])\nasync def editor_proxy(path: str, request: Request):\n    \"\"\"Same-origin reverse proxy for the embedded editor.\n\n    This improves iframe reliability by stripping frame-blocking headers.\n    WebSocket connections go directly to the upstream server (VS Code handl", "      window.Navigation.registerView({\n        id: 'vscode',\n        title: 'VS Code',\n        mount: () => {\n          console.log('[editor.js] Mounted as vscode');\n          bindControls();\n          initEditorHealthCheck();\n        },\n        unmount: () => {\n          console.log('[editor.js] Unmounted');\n          stopEditorHealthCheck();\n        }\n      });\n    }\n  }\n\n  // Register when Navigation is ready\n  if (document.readyState === 'loading') {\n    window.addEventListener('DOMContentLo", "editor_health() -> Dict[str, Any]:\n    \"\"\"Check embedded editor health with full readiness verification\"\"\"\n    try:\n        import requests\n        import time\n\n        status_path = Path(__file__).parent.parent / \"out\" / \"editor\" / \"status.json\"\n\n        if not status_path.exists():\n            return {\"ok\": False, \"error\": \"No status file\", \"enabled\": False}\n\n        with open(status_path, 'r') as f:\n            status = json.load(f)\n\n        if not status.get(\"enabled\", False):\n            re", "                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/development/contributing',\n                component: ComponentCreator('/agro-rag-engine/development/contributing', '8fe'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/development/vscode-setup',\n                component: ComponentCreator('/agro-rag-engine/development/vscode-setup', 'a0f'),\n             "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-91", "/Users/davidmontgomery/agro-rag-engine/gui/js/editor.js:1-26", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-97", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-39"], "source": "golden.json"}
{"query": "How does the Makefile orchestrate development tasks?", "positive_text": "  echo \"[up] MCP already running.\"\nelse\n  nohup bash -lc \". .venv/bin/activate && python -m server.mcp.server\" >/tmp/mcp_server.log 2>&1 &\n  sleep 1\nfi\n\necho \"[up] Done. Logs: /tmp/mcp_server.log\"\n\n# --- Optional: Start local Ollama (Qwen 3) if available ---\nif command -v ollama >/dev/null 2>&1; then\n  echo \"[up] Ensuring Ollama is serving ...\"\n  if ! curl -sSf http://127.0.0.1:11434/api/tags >/dev/null 2>&1; then\n    nohup ollama serve >/tmp/ollama_server.log 2>&1 &\n    sleep 2\n  fi\n  if curl -", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/scripts/up.sh:1-30", "negative_texts": ["main() -> None:\n    os.makedirs(BASE, exist_ok=True)\n    \n    # Add domain context based on repo\n    domain_context = \"\"\n    if REPO == '':\n        domain_context = \"\\nDOMAIN CONTEXT: This is  - a smart home automation platform. Focus on:\\n- Plugin architecture (device plugins, automation plugins)\\n- Camera/streaming functionality (RTSP, ONVIF, FFmpeg)\\n- HomeKit integration and device bridging\\n- Motion detection and AI analysis\\n- Webhook notifications and automation rules\\n- Device management", "                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/development/contributing',\n                component: ComponentCreator('/agro-rag-engine/development/contributing', '8fe'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/development/vscode-setup',\n                component: ComponentCreator('/agro-rag-engine/development/vscode-setup', 'a0f'),\n             ", "generate_node(state: RAGState) -> Dict:\n    q = state['question']; ctx = state['documents'][:5]\n    # packer summary for trace\n    try:\n        tr = get_trace()\n        if tr is not None:\n            budget = int(os.getenv('PACK_BUDGET_TOKENS', '4096') or 4096)\n            selected = []\n            for d in ctx:\n                sel = {\n                    'path': d.get('file_path'),\n                    'lines': f\"L{d.get('start_line')}-L{d.get('end_line')}\",\n                    'est_tokens': int", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/indexer/build_cards.py:1-68", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-39", "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-151", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74"], "source": "golden.json"}
{"query": "Where are the Python requirements defined?", "positive_text": "rich>=13.0.0\n# Orchestration & eval\nlanggraph==0.6.8\nlanggraph-checkpoint-redis==0.1.2\nlangchain==0.3.27\nlangsmith==0.4.32\nlangchain-openai==0.3.35\npython-dotenv==1.1.1\ntenacity==9.1.2\ntiktoken==0.12.0\n\n# Vector DB & hybrid search\nqdrant-client==1.15.1\nbm25s[hf]==0.2.14\nPyStemmer==3.0.0\n\n# Chunking / parsing\n# Prefer wheels that exist; skip on Python >=3.13 and fall back to regex chunking\ntree_sitter_languages==1.10.2; python_version < \"3.13\"\n\n# Reranking & Torch (MPS on Apple Silicon)\nrerankers", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/requirements.txt:1-39", "negative_texts": ["done\nif [ -z \"$PY_BIN\" ]; then\n  need_python\n  exit 1\nfi\n\ncd \"$ROOT_DIR\"\n\n# Create venv if missing (with selected Python)\nif [ ! -f .venv/bin/python ] && [ ! -f .venv/Scripts/python.exe ]; then\n  echo \"[setup] Creating virtualenv (.venv) with $PY_BIN\"\n  \"$PY_BIN\" -m venv .venv\nfi\n\n# Choose venv python\nif [ -f .venv/bin/python ]; then\n  VENV_PY=\".venv/bin/python\"\nelse\n  VENV_PY=\".venv/Scripts/python.exe\"\nfi\n\necho \"[setup] Installing dependencies (this may take a moment)\"\nif [ -f requirements-rag.", "#!/usr/bin/env bash\nset -euo pipefail\n\n# Simple wrapper to ensure Python + venv + deps, then run quick_setup.py.\n# Run from rag-service root. Optionally pass a repo path:\n#   bash scripts/setup.sh /abs/path/to/your/repo [repo-name]\n\nROOT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/..\" && pwd)\"\nREPO_PATH=\"${1:-}\"\nREPO_NAME=\"${2:-}\"\n\ndetect_os() {\n  unameOut=\"$(uname -s || true)\"\n  case \"${unameOut}\" in\n    Linux*) machine=Linux;;\n    Darwin*) machine=Mac;;\n    CYGWIN*|MINGW*|MSYS*) machine=Windows;", "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/setup.sh:1-32", "/Users/davidmontgomery/agro-rag-engine/scripts/setup.sh:1-45", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27"], "source": "golden.json"}
{"query": "How does the feedback collection system work?", "positive_text": "post_feedback(body: FeedbackBody) -> Dict[str, Any]:\n    \"\"\"Record user feedback for a query event.\n    \n    The signal can be:\n    - thumbsup: User found the answer helpful\n    - thumbsdown: User found the answer unhelpful\n    - star1-star5: 1-5 star rating\n    - click: User clicked on a specific document\n    - noclick: User did not interact with a document\n    - note: User submitted a note (can combine with other signals)\n    \n    For click events, doc_id should specify which document was clic", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/feedback.py:1-25", "negative_texts": ["// gui/js/reranker.js - Learning Reranker UI Module\n// Handles feedback collection, triplet mining, training, evaluation, and all reranker features\n\n// ============ LIVE TERMINAL ============\nlet _rerankerTerminal = null;\nlet _lastOutputLineCount = 0;\n", "initRerankerTerminal() {\n    if (!window.LiveTerminal) {\n        console.warn('[reranker] LiveTerminal not loaded yet, will initialize later');\n        return;\n    }\n\n    if (!_rerankerTerminal) {\n        _rerankerTerminal = new window.LiveTerminal('reranker-terminal-container');\n        console.log('[reranker] Live terminal initialized');\n    }\n}\n\n// ============ FEEDBACK SYSTEM ============\n\n// Track file link clicks\nwindow.trackFileClick = async function(eventId, docId) {\n    if (!eventId || ", "\n        // Dopamine-y feedback on any button click\n        document.querySelectorAll('button').forEach(btn => {\n            if (btn.dataset && btn.dataset.dopamineBound) return;\n            if (!btn.dataset) btn.dataset = {};\n            btn.dataset.dopamineBound = '1';\n            btn.addEventListener('click', () => {\n                const label = (btn.textContent || btn.id || 'button').trim();\n                if (label) showStatus(`→ ${label}`, 'info');\n            });\n        });\n\n        co", "    // INITIALIZATION\n    // ============================================\n\n    /**\n     * Initialize all UX feedback systems\n     */\n    function init() {\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', init);\n            return;\n        }\n\n        console.log('[UX Feedback] Initializing...');\n\n        // Initialize all systems\n        initRippleEffects();\n        enhanceSubtabReveal();\n        enhance"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-7", "/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-267", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-24", "/Users/davidmontgomery/agro-rag-engine/gui/js/ux-feedback.js:1-58"], "source": "golden.json"}
{"query": "Where are helpful error message utilities defined?", "positive_text": "// gui/js/error-helpers.js - Helpful Error Message Utilities\n// Provides consistent, informative error messages with actionable links\n\n(function() {\n  'use strict';\n\n  /**\n   * Create a helpful error message with context, troubleshooting, and links\n   * @param {Object} options Configuration object\n   * @param {string} options.title - Short error title (e.g., \"Failed to track click\")\n   * @param {string} options.message - Technical error message from catch\n   * @param {string[]} options.causes - ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/error-helpers.js:1-31", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                component: ComponentCreator('/agro-rag-engine/configuration/alerting', 'ceb'),\n          ", "// AGRO GUI - Alerts & Webhooks Module\n// Handles alert thresholds, webhook configuration, and status display\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, $$, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !$$ || !state) {\n        console.error('[alerts.js] CoreUtils not loaded!');\n        return;\n    }\n\n    // Alert threshold field mapping (HTML ID -> backend key)\n    const THRESHOLD_FIELDS = {\n        // Cost & Token Burn\n        'alert_cost_burn_spi", "// AGRO GUI - Config Module\n// Handles configuration form loading, population, and saving\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, $$, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !$$ || !state) {\n        console.error('[config.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Load configuration from API and populate form\n     */\n    async function loadConfig() {\n        try {\n            try { await fetch(api('/api/env/reload'),"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/gui/js/alerts.js:1-31", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-37"], "source": "golden.json"}
{"query": "Where are GUI tooltips implemented?", "positive_text": "// GUI Tooltips: human-readable help + accurate links\n// Exposes window.Tooltips.{buildTooltipMap, attachTooltips}\n(function(){\n  function L(label, body, links, badges){\n    const linkHtml = (links||[]).map(([txt, href]) => `<a href=\"${href}\" target=\"_blank\" rel=\"noopener\">${txt}</a>`).join(' ');\n    const badgeHtml = (badges||[]).map(([txt, cls]) => `<span class=\"tt-badge ${cls||''}\">${txt}</span>`).join(' ');\n    const badgesBlock = badgeHtml ? `<div class=\"tt-badges\">${badgeHtml}</div>` : '';", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "negative_texts": ["            }\n        }\n    }\n\n    try { window.jumpToLine = jumpToLine; } catch {}\n\n    // Cards module auto-binds on DOMContentLoaded (see gui/js/cards.js)\n\n    // ---------------- Help Tooltips ----------------\n    function addHelpTooltips() {\n        const HELP = {\n            // Generation\n            GEN_MODEL: 'Primary inference model for generation (e.g., gpt-4o-mini or qwen3-coder:14b).',\n            OPENAI_API_KEY: 'API key for OpenAI-compatible endpoints (generation/embeddings).',\n   ", "                        </div>\n                    `;\n                });\n            }\n\n            tooltip.innerHTML = html;\n\n            // Position tooltip near the mouse\n            const rect = event.target.getBoundingClientRect();\n            tooltip.style.left = (rect.right + 10) + 'px';\n            tooltip.style.top = rect.top + 'px';\n            tooltip.style.display = 'block';\n\n        } catch (e) {\n            console.error('Failed to load profile for tooltip:', e);\n        }\n    }\n\n", "\n    // ---------------- Help Tooltips (delegated) ----------------\n    const addHelpTooltips = window.Tooltips?.attachTooltips || (() => {});\n\n    // ---------- Numbers formatting + per‑day converters ----------\n    // Number formatting functions - delegated to UiHelpers module\n    const getNum = window.UiHelpers?.getNum || ((id) => 0);\n    const setNum = window.UiHelpers?.setNum || (() => {});\n    const attachCommaFormatting = window.UiHelpers?.attachCommaFormatting || (() => {});\n    const wi"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-26", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-51", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-26"], "source": "golden.json"}
{"query": "How do I configure the Qdrant URL for vector search?", "positive_text": "from __future__ import annotations\n\n\"\"\"Qdrant recreate fallback wrappers to avoid hard failures on 404/exists.\"\"\"\nrecreate_collection(client, collection_name: str, vectors_config):\n    \"\"\"\n    Recreate a Qdrant collection with proper error handling.\n    Handles both old (flat) and new (nested) vector config formats.\n    \"\"\"\n    try:\n        # Check if collection exists first\n        try:\n            info = client.get_collection(collection_name)\n            print(f\"Collection '{collection_name}' ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/common/qdrant_utils.py:1-35", "negative_texts": ["# server/webhook_config.py\n# Webhook configuration management - Slack/Discord URLs stored in GUI\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nWEBHOOK_CONFIG_FILE = CONFIG_DIR / \"webhooks.json\"\n\n\n@dataclass", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "import {themes as prismThemes} from 'prism-react-renderer';\nimport type {Config} from '@docusaurus/types';\nimport type * as Preset from '@docusaurus/preset-classic';\n\nconst config: Config = {\n  title: 'AGRO Documentation',\n  tagline: 'Local-first RAG engine for codebases',\n  favicon: 'img/favicon.ico',\n\n  future: {\n    v4: true,\n  },\n\n  url: 'https://dmontgomery40.github.io',\n  baseUrl: '/agro-rag-engine/',\n\n  organizationName: 'DMontgomery40',\n  projectName: 'agro-rag-engine',\n\n  onBrokenLinks:", "    },\n    algolia: {\n      appId: 'YOUR_APP_ID',\n      apiKey: 'YOUR_SEARCH_API_KEY',\n      indexName: 'agro',\n      contextualSearch: true,\n    },\n  } satisfies Preset.ThemeConfig,\n};\n\nexport default config;\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/webhook_config.py:1-15", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-56", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-12"], "source": "golden.json"}
{"query": "What is EMBEDDING_TYPE and how does it affect retrieval?", "positive_text": "        ['OpenAI Embeddings', 'https://platform.openai.com/docs/guides/embeddings'],\n        ['Voyage AI Embeddings', 'https://docs.voyageai.com/docs/embeddings'],\n        ['Google Gemini Embeddings', 'https://ai.google.dev/gemini-api/docs/embeddings'],\n        ['SentenceTransformers Docs', 'https://www.sbert.net/']\n      ], [['Requires reindex','reindex']]),\n      VOYAGE_API_KEY: L('Voyage API Key', 'API key for Voyage AI embeddings when EMBEDDING_TYPE=voyage.', [\n        ['Voyage AI Docs', 'ht", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-15", "negative_texts": ["// Profile Renderer - Rich, professional display of auto-generated profiles\n;(function(){\n  \n  // Setting metadata with explanations\n  const SETTING_INFO = {\n    GEN_MODEL: {\n      name: 'Generation Model',\n      description: 'The AI model used to generate answers from retrieved code. This is the \"brain\" that synthesizes information.',\n      category: 'Generation',\n      icon: '🧠'\n    },\n    EMBEDDING_TYPE: {\n      name: 'Embedding Provider',\n      description: 'Creates vector representations of", "_get_embedding(text: str, kind: str = \"query\") -> list[float]:\n    et = (os.getenv(\"EMBEDDING_TYPE\", \"openai\") or \"openai\").lower()\n    if et == \"voyage\":\n        import time\n        from server.api_tracker import track_api_call, APIProvider\n\n        vo = _lazy_import_voyage()\n        start = time.time()\n        out = vo.embed([text], model=\"voyage-code-3\", input_type=kind, output_dimension=512)\n        duration_ms = (time.time() - start) * 1000\n\n        # Voyage pricing: ~$0.00012 per 1k tokens", "_classify_query(q: str) -> str:\n    \"\"\"Classify query intent for AGRO RAG engine.\"\"\"\n    ql = (q or '').lower()\n    \n    # GUI/Frontend queries\n    if any(k in ql for k in ['gui', 'ui', 'dashboard', 'button', 'component', 'frontend', 'css', 'html', 'interface']):\n        return 'gui'\n    \n    # Retrieval/Search queries\n    if any(k in ql for k in ['search', 'retrieval', 'bm25', 'vector', 'qdrant', 'embedding', 'rerank', 'hybrid']):\n        return 'retrieval'\n    \n    # Indexing queries\n    if an", "            if (p === 'mxbai') return ['huggingface'];\n            if (p === 'hugging face') return ['huggingface'];\n            if (p === 'local'){\n                // For local: embeddings prefer local/ollama; rerank prefer huggingface/local\n                return (kind==='embed') ? ['local','ollama'] : ['huggingface','local','ollama','mlx'];\n            }\n            return [p];\n        }\n        function updateEmbedList(){\n            const sel = document.getElementById('cost-embed-provider')"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-32", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-61", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-30", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-22"], "source": "golden.json"}
{"query": "How do I configure multi-query expansion with MQ_REWRITES?", "positive_text": "          ['Local Reranker README', '/models/cross-encoder-agro.baseline/README.md'],\n          ['Training Custom Reranker', '/docs/RERANKER.md#training']\n        ],\n        [['Free (no API costs)', 'info'], ['Requires download', 'warn']]\n      ),\n\n      // Retrieval tuning\n      MQ_REWRITES: L(\n        'Multi‑Query Rewrites',\n        'Number of query variations to generate for improved recall. Each rewrite searches independently, then results are fused and reranked. For example, query \"auth flo", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "negative_texts": ["    - key: TOPK_SPARSE\n      type: integer\n      default: 75\n      description: Sparse candidate count (BM25)\n    - key: MQ_REWRITES\n      type: integer\n      default: 2\n      description: Multi-query expansion count (conditional on query type)\n    - key: HYDRATION_MODE\n      type: enum\n      default: lazy\n      allowed: [lazy, none]\n      description: Whether to hydrate code bodies from chunks.jsonl\n    - key: HYDRATION_MAX_CHARS\n      type: integer\n      default: 2000\n      description: Trunca", "      description: 'Local/HF reranker model used when backend = local or hf (e.g., BAAI/bge-reranker-v2-m3).',\n      category: 'Retrieval',\n      icon: '⚙️'\n    },\n    MQ_REWRITES: {\n      name: 'Multi-Query Expansion',\n      description: 'Number of query variations generated to cast a wider search net. More rewrites = better recall but higher cost.',\n      category: 'Search Strategy',\n      icon: '🎯',\n      valueExplainer: (v) => v + ' variations per query'\n    },\n    TOPK_SPARSE: {\n      name:", "    if (adv.workload.embed_tokens_per_req === undefined && costEmb !== undefined) adv.workload.embed_tokens_per_req = costEmb;\n    if (adv.workload.rerank_tokens_per_req === undefined && costRR !== undefined) adv.workload.rerank_tokens_per_req = costRR;\n    // MQ default from current env if not provided\n    if (adv.workload.mq_rewrites === undefined) {\n      const mq = parseInt(env.MQ_REWRITES || '');\n      adv.workload.mq_rewrites = Number.isFinite(mq) && mq>0 ? mq : undefined; // leave undefin", "    const heur = !!document.getElementById('apv2-heuristics')?.checked;\n    const wl = {\n      requests_per_day: parseInt(document.getElementById('apv2-rpd')?.value||'')||undefined,\n      tokens_in_per_req: parseInt(document.getElementById('apv2-tin')?.value||'')||undefined,\n      tokens_out_per_req: parseInt(document.getElementById('apv2-tout')?.value||'')||undefined,\n      mq_rewrites: parseInt(document.getElementById('apv2-mq')?.value||'')||undefined,\n      embed_tokens_per_req: parseInt(docu"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-35", "/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-29", "/Users/davidmontgomery/agro-rag-engine/gui/js/autoprofile_v2.js:1-16", "/Users/davidmontgomery/agro-rag-engine/gui/js/autoprofile_v2.js:1-18"], "source": "golden.json"}
{"query": "What are the confidence thresholds CONF_TOP1, CONF_AVG5, and CONF_ANY?", "positive_text": "        'Confidence Any',\n        'Fallback threshold - proceed with retrieval if ANY single result exceeds this score, even if top-1 or avg-5 thresholds aren\\'t met. This prevents the system from giving up when there\\'s at least one decent match. Lower values (0.30-0.40) are more permissive, returning results even with weak confidence. Higher values (0.45-0.50) maintain quality standards. Recommended: 0.35-0.45 as a safety net.',\n        [\n          ['Fallback Strategies', 'https://en.wikipedia", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-18", "negative_texts": ["            HYDRATION_MODE: 'lazy: hydrate code snippets on demand; none: skip hydration.',\n            HYDRATION_MAX_CHARS: 'Max characters per hydrated code snippet.',\n            VENDOR_MODE: 'Prefer first-party or vendor paths when scoring files.',\n            project_PATH_BOOSTS: 'CSV of path substrings to boost (e.g., app/,lib/,config/).',\n            CARDS_MAX: 'Limit number of cards used for boosting (0 = all).',\n\n            // Confidence\n            CONF_TOP1: 'Accept answer if top-1 r", "      description: Bonus for files with provider/integration hints (heuristic)\n    - const: FEATURE_HINT_BONUS\n      value: 0.0\n      description: Feature bonus disabled (legacy phi/hipaa garbage removed)\n    - const: CARDS_TOPK\n      value: \"min(TOPK_SPARSE, 30)\"\n      description: Card-based retrieval budget for boosts\n    - const: FILENAME_BOOST_MULTIPLIERS\n      value: {basename_hit: 1.5, path_segment_hit: 1.2}\n      description: Post-rerank filename/path multipliers\n\n  confidence_gating:\n  ", "# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass", "set_retrieval_quality(topk: int, hits: int, mrr: Optional[float] = None):\n    RETRIEVAL_HITS.labels(topk=str(int(topk))).set(max(0, int(hits)))\n    if mrr is not None:\n        v = max(0.0, min(1.0, float(mrr)))\n        RR_MRR.set(v)\nrecord_canary(provider: str, model: str, passed: bool, margin: Optional[float] = None, winner: Optional[str] = None):\n    CANARY_TOTAL.labels(provider=provider, model=model).inc()\n    if passed:\n        CANARY_PASS_TOTAL.labels(provider=provider, model=model).inc()\n "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-20", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-37", "/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16", "/Users/davidmontgomery/agro-rag-engine/server/metrics.py:1-16"], "source": "golden.json"}
{"query": "How do I configure reranking with RERANK_BACKEND and Cohere?", "positive_text": "\nimport math\nimport os\nfrom typing import List, Dict, Any\nfrom rerankers import Reranker  # type: ignore[import-untyped]\nfrom typing import Optional\n\ntry:\n    from dotenv import load_dotenv\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\n_HF_PIPE = None\n_RERANKER = None\n\n# Default local/HF cross-encoder model for reranking\n# Upgraded to MiniLM-L-12-v2 per request\nDEFAULT_MODEL = os.getenv('RERANKER_MODEL', 'cross-encoder/ms-marco-MiniLM-L-12-v2')\n# Note: Backend/model can change at r", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/rerank.py:1-31", "negative_texts": ["            }\n            // Reranker\n            if (env.RERANK_BACKEND) {\n                const rp = document.getElementById('cost-rerank-provider'); if (rp) rp.value = env.RERANK_BACKEND;\n            }\n            if (env.COHERE_RERANK_MODEL && document.getElementById('cost-rerank-model')) $('#cost-rerank-model').value = env.COHERE_RERANK_MODEL;\n            if (env.RERANKER_MODEL && document.getElementById('cost-rerank-model') && !$('#cost-rerank-model').value) $('#cost-rerank-model').value =", "            COHERE_API_KEY: 'Cohere API key for reranking when RERANK_BACKEND=cohere.\\nStored locally in .env and used only on your machine.',\n            COHERE_RERANK_MODEL: 'Cohere reranker to use when RERANK_BACKEND=cohere.\\nCommon: rerank-3.5 (general), rerank-english-v3.0, rerank-multilingual-v3.0, rerank-english-lite-v3.0.\\nPick from the dropdown or type a custom value.',\n            TRANSFORMERS_TRUST_REMOTE_CODE: 'Advanced: Allow Hugging Face models that need remote code execution (True", "    alert('Embedding model added.');\n  }\n\n  async function addRerankModelFlow(){\n    const provider = promptStr('Rerank provider (cohere, local, hf)', 'cohere');\n    if (!provider) return;\n    let model = promptStr('Rerank model ID (e.g., rerank-3.5 or BAAI/bge-reranker-v2-m3)', provider === 'cohere' ? 'rerank-3.5' : 'BAAI/bge-reranker-v2-m3');\n    const baseUrl = promptStr('Base URL (optional)', '');\n    let apiKey = '';\n    if (provider === 'cohere') apiKey = promptStr('Cohere API Key (optiona", "            VOYAGE_API_KEY: 'API key for Voyage embeddings.',\n            VOYAGE_EMBED_DIM: 'Output dimension for Voyage embeddings.',\n            EMBEDDING_DIM: 'Embedding dimension for MXBAI/local models.',\n            SKIP_DENSE: 'If 1, skip building dense vectors/Qdrant (sparse-only).',\n            ENRICH_CODE_CHUNKS: 'If true, store per-chunk summaries/keywords before embedding.',\n\n            // Reranking (verbose tips)\n            RERANK_BACKEND: 'Choose the reranking backend that orders "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-27", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-11", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-10"], "source": "golden.json"}
{"query": "What is TOPK_DENSE and TOPK_SPARSE for hybrid search tuning?", "positive_text": "_search_impl(query: str, repo: str, topk_dense: int, topk_sparse: int, final_k: int, trace: object | None) -> List[Dict]:\n    chunks = _load_chunks(repo)\n    if not chunks:\n        return []\n    \n    # Apply synonym expansion if enabled\n    use_synonyms = str(os.getenv('USE_SEMANTIC_SYNONYMS', '1')).strip().lower() in {'1', 'true', 'on'}\n    expanded_query = expand_query_with_synonyms(query, repo, max_expansions=3) if use_synonyms else query\n    \n    # SPAN: Vector Search (Qdrant)\n    dense_pair", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-241", "negative_texts": ["get_topk(repo: Optional[str]) -> Tuple[int, int, int]:\n    kd = get_int(repo, \"TOPK_DENSE\", int(os.getenv(\"TOPK_DENSE\", \"75\") or 75), 75)\n    ks = get_int(repo, \"TOPK_SPARSE\", int(os.getenv(\"TOPK_SPARSE\", \"75\") or 75), 75)\n    fk = get_int(repo, \"FINAL_K\", int(os.getenv(\"FINAL_K\", \"10\") or 10), 10)\n    return kd, ks, fk\n\nget_mq_rewrites(repo: Optional[str]) -> int:\n    return get_int(repo, \"MQ_REWRITES\", int(os.getenv(\"MQ_REWRITES\", \"2\") or 2), 2)\n\nget_reranker_config(repo: Optional[str]) -> Dic", "      description: 'Local/HF reranker model used when backend = local or hf (e.g., BAAI/bge-reranker-v2-m3).',\n      category: 'Retrieval',\n      icon: '⚙️'\n    },\n    MQ_REWRITES: {\n      name: 'Multi-Query Expansion',\n      description: 'Number of query variations generated to cast a wider search net. More rewrites = better recall but higher cost.',\n      category: 'Search Strategy',\n      icon: '🎯',\n      valueExplainer: (v) => v + ' variations per query'\n    },\n    TOPK_SPARSE: {\n      name:", "    - key: TOPK_SPARSE\n      type: integer\n      default: 75\n      description: Sparse candidate count (BM25)\n    - key: MQ_REWRITES\n      type: integer\n      default: 2\n      description: Multi-query expansion count (conditional on query type)\n    - key: HYDRATION_MODE\n      type: enum\n      default: lazy\n      allowed: [lazy, none]\n      description: Whether to hydrate code bodies from chunks.jsonl\n    - key: HYDRATION_MAX_CHARS\n      type: integer\n      default: 2000\n      description: Trunca", "      description: Bonus for files with provider/integration hints (heuristic)\n    - const: FEATURE_HINT_BONUS\n      value: 0.0\n      description: Feature bonus disabled (legacy phi/hipaa garbage removed)\n    - const: CARDS_TOPK\n      value: \"min(TOPK_SPARSE, 30)\"\n      description: Card-based retrieval budget for boosts\n    - const: FILENAME_BOOST_MULTIPLIERS\n      value: {basename_hit: 1.5, path_segment_hit: 1.2}\n      description: Post-rerank filename/path multipliers\n\n  confidence_gating:\n  "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/archive/runtime_config.py:1-17", "/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-29", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-35", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-37"], "source": "golden.json"}
{"query": "How do I set up local reranking with RERANKER_MODEL?", "positive_text": "\nimport math\nimport os\nfrom typing import List, Dict, Any\nfrom rerankers import Reranker  # type: ignore[import-untyped]\nfrom typing import Optional\n\ntry:\n    from dotenv import load_dotenv\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\n_HF_PIPE = None\n_RERANKER = None\n\n# Default local/HF cross-encoder model for reranking\n# Upgraded to MiniLM-L-12-v2 per request\nDEFAULT_MODEL = os.getenv('RERANKER_MODEL', 'cross-encoder/ms-marco-MiniLM-L-12-v2')\n# Note: Backend/model can change at r", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/rerank.py:1-31", "negative_texts": ["    - key: RERANKER_MODEL\n      type: string\n      default: models/cross-encoder-agro\n      description: Local cross-encoder model path (trained on golden triplets)\n      notes:\n        - Train via scripts/train_reranker.py after mining triplets with scripts/mine_from_golden.py\n        - Current model trained on 43 triplets from golden.json (68% dev accuracy)\n    - key: COHERE_API_KEY\n      type: string\n      default: null\n      description: Key for Cohere reranking\n    - key: COHERE_RERANK_MODE", "            COHERE_API_KEY: 'Cohere API key for reranking when RERANK_BACKEND=cohere.\\nStored locally in .env and used only on your machine.',\n            COHERE_RERANK_MODEL: 'Cohere reranker to use when RERANK_BACKEND=cohere.\\nCommon: rerank-3.5 (general), rerank-english-v3.0, rerank-multilingual-v3.0, rerank-english-lite-v3.0.\\nPick from the dropdown or type a custom value.',\n            TRANSFORMERS_TRUST_REMOTE_CODE: 'Advanced: Allow Hugging Face models that need remote code execution (True", "    alert('Embedding model added.');\n  }\n\n  async function addRerankModelFlow(){\n    const provider = promptStr('Rerank provider (cohere, local, hf)', 'cohere');\n    if (!provider) return;\n    let model = promptStr('Rerank model ID (e.g., rerank-3.5 or BAAI/bge-reranker-v2-m3)', provider === 'cohere' ? 'rerank-3.5' : 'BAAI/bge-reranker-v2-m3');\n    const baseUrl = promptStr('Base URL (optional)', '');\n    let apiKey = '';\n    if (provider === 'cohere') apiKey = promptStr('Cohere API Key (optiona", "get_reranker() -> CrossEncoder:\n    \"\"\"\n    Loads and (optionally) hot-reloads the CrossEncoder model.\n    Env:\n      AGRO_RERANKER_MODEL_PATH   (dir or HF id; default MiniLM)\n      AGRO_RERANKER_RELOAD_ON_CHANGE=1\n      AGRO_RERANKER_RELOAD_PERIOD_SEC (default 60)\n      AGRO_RERANKER_MAXLEN (default 512)\n    \"\"\"\n    global _RERANKER, _RERANKER_PATH, _RERANKER_MTIME, _LAST_CHECK\n    path = os.getenv(\"AGRO_RERANKER_MODEL_PATH\", \"cross-encoder/ms-marco-MiniLM-L-12-v2\")\n    need_reload = False\n\n   "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-33", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-11", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-21", "/Users/davidmontgomery/agro-rag-engine/server/reranker.py:1-30"], "source": "golden.json"}
{"query": "What is HYDRATION_MODE and how does it affect memory usage?", "positive_text": "          ['chunks.jsonl Format', '/docs/INDEXING.md#chunks-format']\n        ],\n        [['Lazy Recommended', 'info']]\n      ),\n      HYDRATION_MAX_CHARS: L(\n        'Hydration Max Chars',\n        'Maximum characters to load per chunk when hydrating results with code content. Prevents huge chunks from bloating responses and consuming excessive memory. 0 = no limit (may cause memory issues with large files). Recommended: 2000 for general use, 1000 for memory-constrained environments, 5000 for det", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "negative_texts": ["            HYDRATION_MODE: 'lazy: hydrate code snippets on demand; none: skip hydration.',\n            HYDRATION_MAX_CHARS: 'Max characters per hydrated code snippet.',\n            VENDOR_MODE: 'Prefer first-party or vendor paths when scoring files.',\n            project_PATH_BOOSTS: 'CSV of path substrings to boost (e.g., app/,lib/,config/).',\n            CARDS_MAX: 'Limit number of cards used for boosting (0 = all).',\n\n            // Confidence\n            CONF_TOP1: 'Accept answer if top-1 r", "    - key: TOPK_SPARSE\n      type: integer\n      default: 75\n      description: Sparse candidate count (BM25)\n    - key: MQ_REWRITES\n      type: integer\n      default: 2\n      description: Multi-query expansion count (conditional on query type)\n    - key: HYDRATION_MODE\n      type: enum\n      default: lazy\n      allowed: [lazy, none]\n      description: Whether to hydrate code bodies from chunks.jsonl\n    - key: HYDRATION_MAX_CHARS\n      type: integer\n      default: 2000\n      description: Trunca", "import os\nfrom pathlib import Path\n\n# Initialize LangTrace FIRST - must precede ANY LLM/framework imports\ntry:\n    from langtrace_python_sdk import langtrace\n    LANGTRACE_KEY = os.getenv('LANGTRACE_API_KEY', '0b20be5d3e82b7c514cd1bea1fa583f92683e55ebe895452ece7d9261d4412d2')\n    langtrace.init(api_key=LANGTRACE_KEY)\n    print(\"✅ LangTrace initialized in FastAPI server\")\nexcept Exception as e:\n    print(f\"⚠️ LangTrace init failed: {e}\")\n\nfrom fastapi import FastAPI, Query, HTTPException, Request", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-20", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-35", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-65", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6"], "source": "golden.json"}
{"query": "How do I configure code enrichment with ENRICH_BACKEND?", "positive_text": "      ),\n      ENRICH_MODEL: L(\n        'Enrichment Model',\n        'Specific model name for code enrichment when ENRICH_BACKEND is set. For OpenAI: \"gpt-4o-mini\" (recommended, cheap), \"gpt-4o\" (higher quality, costly). For Ollama: specify via ENRICH_MODEL_OLLAMA instead. Smaller models (gpt-4o-mini, qwen2.5-coder:7b) balance cost and quality for summaries. Enrichment happens during indexing, not at query time.',\n        [\n          ['OpenAI Models', 'https://platform.openai.com/docs/models'],\n ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "negative_texts": ["  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "            VOYAGE_API_KEY: 'API key for Voyage embeddings.',\n            VOYAGE_EMBED_DIM: 'Output dimension for Voyage embeddings.',\n            EMBEDDING_DIM: 'Embedding dimension for MXBAI/local models.',\n            SKIP_DENSE: 'If 1, skip building dense vectors/Qdrant (sparse-only).',\n            ENRICH_CODE_CHUNKS: 'If true, store per-chunk summaries/keywords before embedding.',\n\n            // Reranking (verbose tips)\n            RERANK_BACKEND: 'Choose the reranking backend that orders ", "            }\n            // Reranker\n            if (env.RERANK_BACKEND) {\n                const rp = document.getElementById('cost-rerank-provider'); if (rp) rp.value = env.RERANK_BACKEND;\n            }\n            if (env.COHERE_RERANK_MODEL && document.getElementById('cost-rerank-model')) $('#cost-rerank-model').value = env.COHERE_RERANK_MODEL;\n            if (env.RERANKER_MODEL && document.getElementById('cost-rerank-model') && !$('#cost-rerank-model').value) $('#cost-rerank-model').value =", "_load_env_file(env_path: Path) -> bool:\n    \"\"\"Load environment variables from .env if python-dotenv is installed.\n\n    This wrapper avoids conditional redefinition errors in static analysis.\n    \"\"\"\n    if _maybe_load_dotenv is not None:\n        return bool(_maybe_load_dotenv(env_path))\n    return False\n\n# Load environment\n_load_env_file(Path(__file__).resolve().parents[1] / \".env\")\n\nfrom server.langgraph_app import build_graph\nfrom common.config_loader import list_repos\nfrom rich.console impor"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-10", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-27", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-26"], "source": "golden.json"}
{"query": "What is VENDOR_MODE and how does it prioritize first-party code?", "positive_text": "          ['Hybrid Search Benefits', 'https://www.pinecone.io/learn/hybrid-search-intro/'],\n          ['Fast Indexing Guide', '/docs/INDEXING.md#bm25-only']\n        ],\n        [['Much faster', 'info'], ['Keyword-only', 'warn'], ['No semantic search', 'warn']]\n      ),\n      VENDOR_MODE: L(\n        'Vendor Mode',\n        'Controls scoring preference for your code vs third-party library code during reranking. \"prefer_first_party\" (recommended) boosts your app code (+0.06) and penalizes node_module", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "negative_texts": ["            HYDRATION_MODE: 'lazy: hydrate code snippets on demand; none: skip hydration.',\n            HYDRATION_MAX_CHARS: 'Max characters per hydrated code snippet.',\n            VENDOR_MODE: 'Prefer first-party or vendor paths when scoring files.',\n            project_PATH_BOOSTS: 'CSV of path substrings to boost (e.g., app/,lib/,config/).',\n            CARDS_MAX: 'Limit number of cards used for boosting (0 = all).',\n\n            // Confidence\n            CONF_TOP1: 'Accept answer if top-1 r", "import os\nfrom pathlib import Path\n\n# Initialize LangTrace FIRST - must precede ANY LLM/framework imports\ntry:\n    from langtrace_python_sdk import langtrace\n    LANGTRACE_KEY = os.getenv('LANGTRACE_API_KEY', '0b20be5d3e82b7c514cd1bea1fa583f92683e55ebe895452ece7d9261d4412d2')\n    langtrace.init(api_key=LANGTRACE_KEY)\n    print(\"✅ LangTrace initialized in FastAPI server\")\nexcept Exception as e:\n    print(f\"⚠️ LangTrace init failed: {e}\")\n\nfrom fastapi import FastAPI, Query, HTTPException, Request", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "import {themes as prismThemes} from 'prism-react-renderer';\nimport type {Config} from '@docusaurus/types';\nimport type * as Preset from '@docusaurus/preset-classic';\n\nconst config: Config = {\n  title: 'AGRO Documentation',\n  tagline: 'Local-first RAG engine for codebases',\n  favicon: 'img/favicon.ico',\n\n  future: {\n    v4: true,\n  },\n\n  url: 'https://dmontgomery40.github.io',\n  baseUrl: '/agro-rag-engine/',\n\n  organizationName: 'DMontgomery40',\n  projectName: 'agro-rag-engine',\n\n  onBrokenLinks:"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-20", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-65", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-56"], "source": "golden.json"}
{"query": "How do I configure the MCP HTTP server with MCP_HTTP_HOST and MCP_HTTP_PORT?", "positive_text": "MCPServer:\n    \"\"\"Minimal MCP server over stdio.\"\"\"\n\n    def __init__(self):\n        self.graph = None\n        self._init_graph()\n\n    def _init_graph(self):\n        try:\n            self.graph = build_graph()\n        except Exception as e:\n            self._error(f\"Failed to initialize graph: {e}\")\n\n    def _error(self, msg: str):\n        print(f\"ERROR: {msg}\", file=sys.stderr)\n\n    def _log(self, msg: str):\n        print(f\"LOG: {msg}\", file=sys.stderr)\n\n    def handle_rag_answer(self, repo: st", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/mcp/server.py:1-312", "negative_texts": ["mcp_http_status() -> Dict[str, Any]:\n    \"\"\"Check HTTP MCP server status without triggering request logging.\n\n    Uses a lightweight TCP connect to determine if host:port is reachable,\n    and returns configured host/port/path so the UI can display where MCP is\n    intended to run.\n    \"\"\"\n    import socket\n    host = os.getenv('MCP_HTTP_HOST') or '127.0.0.1'\n    try:\n        port = int(os.getenv('MCP_HTTP_PORT') or '8013')\n    except Exception:\n        port = 8013\n    path = os.getenv('MCP_HTTP", "      \"args\": [\"-m\", \"server.mcp.server\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n\nEOF\n\n    if [ ! -f \"$CLAUDE_CONFIG\" ]; then\n        read -p \"   Create this config now? (y/n) \" -n 1 -r\n        echo\n        if [[ $REPLY =~ ^[Yy]$ ]]; then\n            mkdir -p \"$CLAUDE_CONFIG_DIR\"\n            cat > \"$CLAUDE_CONFIG\" <<EOF\n{\n  \"mcpServers\": {\n    \"project-rag\": {\n      \"command\": \"$VENV_PYTHON\",\n      \"args\": [\"-m\", \"server.mcp.server\"],\n      \"env\": {\n   ", "mcp_status() -> Dict[str, Any]:\n    \"\"\"Consolidated MCP status for Dashboard.\n\n    Reports Python HTTP (:8013), Node HTTP (:8014), and Python stdio availability.\n    \"\"\"\n    import socket\n    def tcp(host: str, port: int, timeout: float = 0.25) -> bool:\n        try:\n            with socket.create_connection((host, port), timeout=timeout):\n                return True\n        except Exception:\n            return False\n\n    # Python HTTP MCP\n    py_host = os.getenv('MCP_HTTP_HOST') or '127.0.0.1'\n ", "mcp_http_start() -> Dict[str, Any]:\n    \"\"\"Start HTTP MCP server on port 8013\"\"\"\n    import subprocess\n    try:\n        # Check if already running\n        status = mcp_http_status()\n        if status[\"running\"]:\n            return {\"success\": False, \"error\": \"HTTP MCP already running on port 8013\"}\n        \n        # Start in background\n        subprocess.Popen(\n            [str(ROOT / \".venv\" / \"bin\" / \"python\"), \"-m\", \"server.mcp.http\"],\n            cwd=str(ROOT),\n            stdout=open(\"/tmp"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-32", "/Users/davidmontgomery/agro-rag-engine/scripts/SETUP_MCP.sh:1-51", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-56", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-39"], "source": "golden.json"}
{"query": "What is OUT_DIR_BASE and why does it matter for MCP sync?", "positive_text": "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "negative_texts": ["            FILES_ROOT: 'Root directory served at /files.',\n            GUI_DIR: 'Directory of GUI assets served at /gui.',\n            DOCS_DIR: 'Directory of docs served at /docs.',\n            DATA_DIR: 'Directory for local data files (excludes, keywords).',\n            REPOS_FILE: 'Path to repos.json configuration file.',\n            OUT_DIR_BASE: 'Base output directory for per-repo data.',\n            RAG_OUT_BASE: 'Alternate env for OUT_DIR_BASE.',\n            MCP_HTTP_HOST: 'Host for MCP ", "#!/usr/bin/env bash\n# Usage: source scripts/select_index.sh shared|gui|devclean\n\nset -euo pipefail\n\nPROFILE=\"${1:-shared}\"\ncase \"$PROFILE\" in\n  shared)\n    export OUT_DIR_BASE=\"./out.noindex-shared\"\n    export COLLECTION_NAME=\"code_chunks_agro_shared\"\n    ;;\n  gui)\n    export OUT_DIR_BASE=\"./out.noindex-gui\"\n    export COLLECTION_NAME=\"code_chunks_agro_gui\"\n    ;;\n  devclean)\n    export OUT_DIR_BASE=\"./out.noindex-devclean\"\n    export COLLECTION_NAME=\"code_chunks_agro_devclean\"\n    ;;\n  *)\n    e", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "from __future__ import annotations\n\n# MCP package initializer. Exposes convenient imports for shims/tools.\n\nfrom .server import MCPServer  # re-export for convenience\n\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-21", "/Users/davidmontgomery/agro-rag-engine/scripts/select_index.sh:1-31", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/server/mcp/__init__.py:1-7"], "source": "golden.json"}
{"query": "How do I configure different models per channel with GEN_MODEL_HTTP and GEN_MODEL_MCP?", "positive_text": "      ),\n\n      GEN_MODEL_HTTP: L(\n        'HTTP Channel Model',\n        'Override GEN_MODEL specifically for HTTP API requests (GUI, external API calls). Useful for serving different models to different channels - e.g., use gpt-4o for production HTTP but qwen-coder locally. If not set, falls back to GEN_MODEL. Example use case: cheaper models for public API, expensive models for internal tools.',\n        [\n          ['Channel Overrides', '/docs/CHANNEL_ROUTING.md'],\n          ['Model Selection'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "negative_texts": ["  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "        }\n\n        // Cost panel autopopulate from env\n        try {\n            // Generation provider heuristic: use GEN_MODEL hint if present; otherwise env keys\n            let provGuess = '';\n            const gm = env.GEN_MODEL || '';\n            if (/^gpt-|^o\\w+:/i.test(gm)) provGuess = 'openai';\n            else if (/^claude/i.test(gm)) provGuess = 'anthropic';\n            else if (/^gemini/i.test(gm)) provGuess = 'google';\n            else if (env.OLLAMA_URL) provGuess = 'local';\n      ", "    if (!model) return;\n    const baseUrl = promptStr('Base URL (optional; for proxies or local, e.g., http://127.0.0.1:11434)', '');\n    let apiKey = '';\n    if (provider !== 'local') apiKey = promptStr('API Key (optional; shown locally only)', '') || '';\n\n    const env = { GEN_MODEL: model };\n    if (provider === 'openai'){ if (apiKey) env.OPENAI_API_KEY = apiKey; if (baseUrl) env.OPENAI_BASE_URL = baseUrl; }\n    else if (provider === 'anthropic'){ if (apiKey) env.ANTHROPIC_API_KEY = apiKey; }", "            return u === '1k_tokens' && !hasEmbed && !hasRerank;\n        };\n        const isEmbed = (m)=> Object.prototype.hasOwnProperty.call(m, 'embed_per_1k');\n        const isRerank = (m)=> Object.prototype.hasOwnProperty.call(m, 'rerank_per_1k') || /rerank/i.test(String(m.family||'')+String(m.model||''));\n        const genModels = unique(models.filter(isGen).map(m => m.model));\n        const rrModels = unique(models.filter(isRerank).map(m => m.model));\n        const embModels = unique(model"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-21"], "source": "golden.json"}
{"query": "What is COLLECTION_SUFFIX for A/B testing indexes?", "positive_text": "        [\n          ['Qdrant Collections', 'https://qdrant.tech/documentation/concepts/collections/'],\n          ['Collection Management', 'https://qdrant.tech/documentation/concepts/collections/#create-collection'],\n          ['A/B Testing Indexes', '/docs/AB_TESTING_INDEXES.md']\n        ],\n        [['Experimental', 'warn']]\n      ),\n      REPOS_FILE: L('Repos File', 'Path to repos.json that defines repo names, paths, keywords, path boosts, and layer bonuses used for routing.', [\n        ['Loca", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "negative_texts": ["      description: Redis for LangGraph checkpointer\n    - key: COLLECTION_NAME\n      type: string\n      default: code_chunks_{REPO}\n      description: Qdrant collection name override\n    - key: COLLECTION_SUFFIX\n      type: string\n      default: default\n      description: Optional suffix for collection grouping\n    - key: REPO\n      type: string\n      default: agro\n      description: Active repository tag for routing and out dirs\n    - key: REPO_PATH\n      type: path\n      default: null\n      de", "// AGRO GUI - RAG Tab Navigation\n// Handles the mega-tab structure for RAG with subtabs\n// Author: AGRO Redesign (Phase 2)\n\n(function() {\n    'use strict';\n\n    const { $, $$, events } = window.CoreUtils || {};\n\n    // RAG Subtab mappings to existing content\n    const RAG_SUBTAB_MAP = {\n        'data-quality': ['config-repos', 'keywords', 'cards'],\n        'retrieval': ['config-models', 'config-retrieval'],\n        'external-rerankers': ['config-reranking'],\n        'learning-ranker': ['reranker", "// Golden Questions Manager\n// Handles CRUD operations for golden questions used in RAG evaluation\n\nlet goldenQuestions = [];\n\n// Recommended questions (baseline for this repo)\nconst RECOMMENDED_GOLDEN = [\n  { q: 'Where is hybrid retrieval implemented?', repo: 'agro', expect_paths: ['retrieval/hybrid_search.py'] },\n  { q: 'Where is keyword generation handled server-side?', repo: 'agro', expect_paths: ['server/app.py','keywords/generate'] },\n  { q: 'Where is the metadata enrichment logic for code", "#!/usr/bin/env bash\n# Usage: source scripts/select_index.sh shared|gui|devclean\n\nset -euo pipefail\n\nPROFILE=\"${1:-shared}\"\ncase \"$PROFILE\" in\n  shared)\n    export OUT_DIR_BASE=\"./out.noindex-shared\"\n    export COLLECTION_NAME=\"code_chunks_agro_shared\"\n    ;;\n  gui)\n    export OUT_DIR_BASE=\"./out.noindex-gui\"\n    export COLLECTION_NAME=\"code_chunks_agro_gui\"\n    ;;\n  devclean)\n    export OUT_DIR_BASE=\"./out.noindex-devclean\"\n    export COLLECTION_NAME=\"code_chunks_agro_devclean\"\n    ;;\n  *)\n    e"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-45", "/Users/davidmontgomery/agro-rag-engine/gui/js/rag-navigation.js:1-48", "/Users/davidmontgomery/agro-rag-engine/gui/js/golden_questions.js:1-36", "/Users/davidmontgomery/agro-rag-engine/scripts/select_index.sh:1-31"], "source": "golden.json"}
{"query": "How do I create helpful error messages with causes and fixes?", "positive_text": "// gui/js/error-helpers.js - Helpful Error Message Utilities\n// Provides consistent, informative error messages with actionable links\n\n(function() {\n  'use strict';\n\n  /**\n   * Create a helpful error message with context, troubleshooting, and links\n   * @param {Object} options Configuration object\n   * @param {string} options.title - Short error title (e.g., \"Failed to track click\")\n   * @param {string} options.message - Technical error message from catch\n   * @param {string[]} options.causes - ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/error-helpers.js:1-31", "negative_texts": ["import os\nfrom pathlib import Path\n\n# Initialize LangTrace FIRST - must precede ANY LLM/framework imports\ntry:\n    from langtrace_python_sdk import langtrace\n    LANGTRACE_KEY = os.getenv('LANGTRACE_API_KEY', '0b20be5d3e82b7c514cd1bea1fa583f92683e55ebe895452ece7d9261d4412d2')\n    langtrace.init(api_key=LANGTRACE_KEY)\n    print(\"✅ LangTrace initialized in FastAPI server\")\nexcept Exception as e:\n    print(f\"⚠️ LangTrace init failed: {e}\")\n\nfrom fastapi import FastAPI, Query, HTTPException, Request", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                component: ComponentCreator('/agro-rag-engine/configuration/alerting', 'ceb'),\n          ", "    } catch(e){\n      const msg = window.ErrorHelpers ? window.ErrorHelpers.createAlertError('Failed to load build logs', {\n        message: e.message,\n        causes: [\n          'Log service API is not responding',\n          'Build logs have not been generated yet',\n          'Logs file is missing, corrupted, or not accessible',\n          'Network connectivity issue retrieving logs'\n        ],\n        fixes: [\n          'Ensure a cards build has been run previously',\n          'Verify backend "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-65", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/gui/js/cards_builder.js:1-30"], "source": "golden.json"}
{"query": "What is the createHelpfulError function and its parameters?", "positive_text": "    }\n\n    if (fixes.length > 0) {\n      text += `Quick fixes:\\n${fixes.map((f, i) => `${i + 1}. ${f}`).join('\\n')}\\n\\n`;\n    }\n\n    if (links.length > 0) {\n      text += `Learn more:\\n${links.map(([label, url]) => `• ${label}: ${url}`).join('\\n')}`;\n    }\n\n    return text;\n  }\n\n  /**\n   * Escape HTML to prevent XSS\n   */\n  function escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  // Export to window\n  window.ErrorHelp", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/error-helpers.js:1-34", "negative_texts": ["  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "// API Base URL Override - sets AGRO API endpoints\n(() => {\n  'use strict';\n\n  const BASE = window.location.origin + '/api';\n\n  function setupAPI() {\n    if (!window.CoreUtils) {\n      setTimeout(setupAPI, 100);\n      return;\n    }\n\n    try {\n      window.CoreUtils.API_BASE = BASE;\n\n      // Helper to build API URLs\n      window.CoreUtils.api = function(path) {\n        const p = String(path || '');\n        if (p.startsWith('/api/')) return BASE + p.slice(4);\n        if (p.startsWith('/')) return", "// AGRO GUI - Alerts & Webhooks Module\n// Handles alert thresholds, webhook configuration, and status display\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, $$, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !$$ || !state) {\n        console.error('[alerts.js] CoreUtils not loaded!');\n        return;\n    }\n\n    // Alert threshold field mapping (HTML ID -> backend key)\n    const THRESHOLD_FIELDS = {\n        // Cost & Token Burn\n        'alert_cost_burn_spi", "                            <div style=\"display: flex; justify-content: space-between; align-items: flex-start;\">\n                                <div style=\"flex: 1;\">\n                                    <div style=\"font-weight: 600; color: ${severityColor}; font-size: 13px;\">\n                                        ${severityEmoji} ${alertname}\n                                    </div>\n                                    <div style=\"font-size: 12px; color: var(--fg-muted); margin-top: 4px;\">\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/gui/api-base-override.js:1-37", "/Users/davidmontgomery/agro-rag-engine/gui/js/alerts.js:1-31", "/Users/davidmontgomery/agro-rag-engine/gui/js/alerts.js:1-34"], "source": "golden.json"}
{"query": "How do I configure Voyage AI embeddings with VOYAGE_API_KEY?", "positive_text": "embed_texts_voyage(texts: List[str], batch: int = 128, output_dimension: int = 512) -> List[List[float]]:\n    import voyageai  # type: ignore\n    client = voyageai.Client(api_key=os.getenv('VOYAGE_API_KEY'))\n    out: List[List[float]] = []\n    for i in range(0, len(texts), batch):\n        sub = texts[i:i+batch]\n        r = client.embed(sub, model='voyage-code-3', input_type='document', output_dimension=output_dimension)\n        out.extend(r.embeddings)\n    return out\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/indexer/index_repo.py:1-10", "negative_texts": ["    if (!provider) return;\n    const model = promptStr('Embedding model ID (optional; depends on provider)', provider === 'openai' ? 'text-embedding-3-small' : '');\n    const baseUrl = promptStr('Base URL (optional)', '');\n    let apiKey = '';\n    if (provider !== 'local' && provider !== 'mxbai') apiKey = promptStr('API Key (optional)', '') || '';\n\n    const env = {};\n    if (provider === 'openai'){ env.EMBEDDING_TYPE = 'openai'; if (apiKey) env.OPENAI_API_KEY = apiKey; if (baseUrl) env.OPENAI_B", "            VOYAGE_API_KEY: 'API key for Voyage embeddings.',\n            VOYAGE_EMBED_DIM: 'Output dimension for Voyage embeddings.',\n            EMBEDDING_DIM: 'Embedding dimension for MXBAI/local models.',\n            SKIP_DENSE: 'If 1, skip building dense vectors/Qdrant (sparse-only).',\n            ENRICH_CODE_CHUNKS: 'If true, store per-chunk summaries/keywords before embedding.',\n\n            // Reranking (verbose tips)\n            RERANK_BACKEND: 'Choose the reranking backend that orders ", "_get_embedding(text: str, kind: str = \"query\") -> list[float]:\n    et = (os.getenv(\"EMBEDDING_TYPE\", \"openai\") or \"openai\").lower()\n    if et == \"voyage\":\n        import time\n        from server.api_tracker import track_api_call, APIProvider\n\n        vo = _lazy_import_voyage()\n        start = time.time()\n        out = vo.embed([text], model=\"voyage-code-3\", input_type=kind, output_dimension=512)\n        duration_ms = (time.time() - start) * 1000\n\n        # Voyage pricing: ~$0.00012 per 1k tokens", "_lazy_import_openai():\n    from openai import OpenAI\n    return OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n_lazy_import_voyage():\n    import voyageai\n    return voyageai.Client(api_key=os.getenv(\"VOYAGE_API_KEY\"))\n\n\n_local_embed_model = None\n\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-19", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-10", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-61", "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-12"], "source": "golden.json"}
{"query": "What is CARDS_MAX and how does it affect score boosting?", "positive_text": "      ),\n      CARDS_MAX: L(\n        'Cards Max',\n        'Maximum number of summary cards to load and consider during retrieval for score boosting. Cards are high-level summaries of code modules/features. Lower values (10-20) are faster but may miss relevant modules. Higher values (30-50) provide better coverage but increase memory and latency. Set to 0 to disable cards entirely. Recommended: 20-30 for balanced performance.',\n        [\n          ['Cards Feature Overview', '/docs/CARDS.md'],\n   ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "negative_texts": ["cards_all() -> Dict[str, Any]:\n    \"\"\"Return ALL cards (for raw data view)\"\"\"\n    try:\n        from common.config_loader import out_dir\n        repo = os.getenv('REPO', 'agro').strip()\n        base = _Path(out_dir(repo))\n        cards_path = base / \"cards.jsonl\"\n\n        cards = []\n        if cards_path.exists():\n            with cards_path.open('r', encoding='utf-8') as f:\n                for line in f:\n                    if not line.strip():\n                        continue\n                  ", "#!/usr/bin/env python3\n\"\"\"Grid search to find optimal RAG parameters using golden questions.\n\nTests different combinations of RRF divisor, top-k values, and scoring weights.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom pathlib import Path\nfrom itertools import product\n\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom retrieval.hybrid_search import search_routed_multi\n\nGOLDEN = Path(\"data/golden.json\")\nevaluate(questions, **params):\n    \"\"\"Run eval with specific parameters.\"\"\"\n    # Set e", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "    avg = sum(arr)/max(1,len(arr))\n    all_scores.extend(arr)\n    status = '✓' if avg >= TARGET[d] else '✗'\n    print(f\"{status} {d.upper():7} | Avg: {avg:.3f} | Target: {TARGET[d]:.3f}\")\n\noverall = sum(all_scores)/max(1,len(all_scores))\nprint(f\"\\n{'Overall Average:':20} {overall:.3f}\")\nprint('='*80)\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-23", "/Users/davidmontgomery/agro-rag-engine/eval/tune_params.py:1-34", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/scripts/benchmark_improvements.py:1-9"], "source": "golden.json"}
{"query": "How do I configure evaluation with GOLDEN_PATH and EVAL_FINAL_K?", "positive_text": "main():\n    if not os.path.exists(GOLDEN_PATH):\n        print('No golden file found at', GOLDEN_PATH)\n        return\n    gold = json.load(open(GOLDEN_PATH))\n    # Filter out comment entries\n    gold = [row for row in gold if 'q' in row]\n    total = len(gold)\n    hits_top1 = 0\n    hits_topk = 0\n    t0 = time.time()\n    for i, row in enumerate(gold, 1):\n        q = row['q']\n        repo = row.get('repo') or os.getenv('REPO','project')\n        expect = row.get('expect_paths') or []\n        if USE_M", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/eval/eval_rag.py:1-40", "negative_texts": ["golden_test(payload: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Test a single golden question and return retrieval results.\"\"\"\n    q = str(payload.get(\"q\") or \"\").strip()\n    if not q:\n        raise HTTPException(status_code=400, detail=\"Question required\")\n\n    repo = str(payload.get(\"repo\") or os.getenv(\"REPO\", \"agro\"))\n    expect_paths = list(payload.get(\"expect_paths\") or [])\n    final_k = int(payload.get(\"final_k\") or os.getenv(\"EVAL_FINAL_K\", \"5\"))\n    use_multi = payload.get(\"use_multi\", o", "#!/usr/bin/env python3\n\"\"\"Grid search to find optimal RAG parameters using golden questions.\n\nTests different combinations of RRF divisor, top-k values, and scoring weights.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom pathlib import Path\nfrom itertools import product\n\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom retrieval.hybrid_search import search_routed_multi\n\nGOLDEN = Path(\"data/golden.json\")\nevaluate(questions, **params):\n    \"\"\"Run eval with specific parameters.\"\"\"\n    # Set e", "#!/usr/bin/env python3\n\"\"\"Grid search to find optimal RAG parameters using golden questions.\n\nTests different combinations of RRF divisor, top-k values, and scoring weights.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom pathlib import Path\nfrom itertools import product\n\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom retrieval.hybrid_search import search_routed_multi\n\nGOLDEN = Path(\"data/golden.json\")\nevaluate(questions, **params):\n    \"\"\"Run eval with specific parameters.\"\"\"\n    # Set e", "      description: Golden questions file for evals (52 questions currently)\n      notes:\n        - Update golden.json when adding new test queries\n        - Mine triplets with scripts/mine_from_golden.py after changes\n        - Retrain cross-encoder with scripts/train_reranker.py for continuous improvement\n    - key: EVAL_MULTI\n      type: flag\n      default: \"1\"\n      description: Whether to use multi-query expansion in eval (recommended)\n    - key: EVAL_FINAL_K\n      type: integer\n      defaul"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-57", "/Users/davidmontgomery/agro-rag-engine/eval/tune_params.py:1-34", "/Users/davidmontgomery/agro-rag-engine/eval/tune_params.py:1-34", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-31"], "source": "golden.json"}
{"query": "What is SKIP_DENSE for BM25-only indexing?", "positive_text": "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "negative_texts": ["      default: 512\n      description: Output dimension for voyage-code-3 embeddings\n    - key: EMBEDDING_DIM\n      type: integer\n      default: 3072\n      description: Dimension for embeddings (3072 for text-embedding-3-large, 512 for MXBAI)\n    - key: SKIP_DENSE\n      type: flag\n      default: \"1\"\n      description: Skip dense embeddings + Qdrant upsert during indexing (recommended for small repos)\n      notes:\n        - Set to 1 for optimal AGRO performance (BM25-only outperforms hybrid)\n     ", "            VOYAGE_API_KEY: 'API key for Voyage embeddings.',\n            VOYAGE_EMBED_DIM: 'Output dimension for Voyage embeddings.',\n            EMBEDDING_DIM: 'Embedding dimension for MXBAI/local models.',\n            SKIP_DENSE: 'If 1, skip building dense vectors/Qdrant (sparse-only).',\n            ENRICH_CODE_CHUNKS: 'If true, store per-chunk summaries/keywords before embedding.',\n\n            // Reranking (verbose tips)\n            RERANK_BACKEND: 'Choose the reranking backend that orders ", "  - Optimal config for AGRO - SKIP_DENSE=1, RERANK_BACKEND=local, test exclusions enabled\n\nnotes:\n  - This file captures both env-driven and code-defined constants that influence behavior\n  - Some constants may require code support to hot-reload at runtime; mark such fields read-only in GUI until wired\n  - For repo-specific boosts (path/layer), prefer repos.json to keep tuning declarative\n  - Updated Oct 19, 2025 with findings from 92.3% top-5 accuracy optimization session\n", "\"\"\"Path configuration for AGRO RAG Engine.\"\"\"\nfrom pathlib import Path\nimport os\n\nrepo_root() -> Path:\n    \"\"\"Return the root directory of the repository.\"\"\"\n    return Path(__file__).resolve().parent\n\ndata_dir() -> Path:\n    \"\"\"Return the data directory for storing index artifacts.\"\"\"\n    root = repo_root()\n    data = root / \"data\"\n    data.mkdir(exist_ok=True)\n    return data\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-29", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-10", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-8", "/Users/davidmontgomery/agro-rag-engine/path_config.py:1-15"], "source": "golden.json"}
{"query": "How do I configure LangChain tracing with LANGCHAIN_TRACING_V2?", "positive_text": "Trace:\n    \"\"\"Lightweight per-request trace recorder.\n\n    - Stores structured breadcrumb events in-memory\n    - Persists to out/<repo>/traces/<ts>_<id>.json on save()\n    - Enabled when LANGCHAIN_TRACING_V2 is truthy (1/true/on)\n    \"\"\"\n\n    def __init__(self, repo: str, question: str):\n        self.repo = (repo or os.getenv(\"REPO\", \"agro\")).strip()\n        self.question = question\n        self.id = uuid.uuid4().hex[:8]\n        self.started_at = _now_iso()\n        self.events: List[Dict[str, An", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/tracing.py:1-118", "negative_texts": ["health_langsmith() -> Dict[str, Any]:\n    enabled = str(os.getenv('LANGCHAIN_TRACING_V2','0')).strip().lower() in {'1','true','on'}\n    project = os.getenv('LANGCHAIN_PROJECT') or os.getenv('LANGSMITH_PROJECT')\n    endpoint = os.getenv('LANGCHAIN_ENDPOINT') or 'https://api.smith.langchain.com'\n    key = os.getenv('LANGCHAIN_API_KEY') or os.getenv('LANGSMITH_API_KEY')\n    installed = True\n    can_connect = None\n    identity: Dict[str, Any] = {}\n    error = None\n    try:\n        from langsmith imp", "    - key: THREAD_ID\n      type: string\n      default: http or cli-chat\n      description: LangGraph thread id (configurable per client)\n    - key: PORT\n      type: integer\n      default: 8012\n      description: Uvicorn port for serve entrypoints\n    - key: agro_PATH\n      type: path\n      default: null\n      description: Optional reference path used by some helpers\n    - key: LANGCHAIN_TRACING_V2\n      type: flag\n      default: \"0\"\n      description: Optional tracing flag for LangChain-compatib", "// LangSmith viewer binder. Exported via window.LangSmith\n;(function(){\n  'use strict';\n  const api = (window.CoreUtils && window.CoreUtils.api) ? window.CoreUtils.api : (p=>p);\n  const state = (window.CoreUtils && window.CoreUtils.state) ? window.CoreUtils.state : {};\n\n  function bind(){\n    const btn = document.getElementById('btn-ls-latest');\n    if (!btn || btn.dataset.bound) return;\n    btn.dataset.bound = '1';\n    const projEl = document.getElementById('ls-project');\n    if (projEl && stat", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-38", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-32", "/Users/davidmontgomery/agro-rag-engine/gui/js/langsmith.js:1-23", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6"], "source": "golden.json"}
{"query": "What is ENRICH_CODE_CHUNKS and how does it improve retrieval quality?", "positive_text": "          ['Pull Models', 'https://github.com/ollama/ollama#quickstart'],\n          ['Code-Focused Models', 'https://ollama.com/search?c=tools'],\n          ['Enrichment Setup', '/docs/ENRICHMENT.md#ollama']\n        ],\n        [['Free (local)', 'info'], ['Requires model download', 'warn']]\n      ),\n      ENRICH_CODE_CHUNKS: L(\n        'Enrich Code Chunks',\n        'Enable per-chunk code summarization during indexing. When on, each code chunk gets an AI-generated summary and keywords stored alongs", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "negative_texts": ["            VOYAGE_API_KEY: 'API key for Voyage embeddings.',\n            VOYAGE_EMBED_DIM: 'Output dimension for Voyage embeddings.',\n            EMBEDDING_DIM: 'Embedding dimension for MXBAI/local models.',\n            SKIP_DENSE: 'If 1, skip building dense vectors/Qdrant (sparse-only).',\n            ENRICH_CODE_CHUNKS: 'If true, store per-chunk summaries/keywords before embedding.',\n\n            // Reranking (verbose tips)\n            RERANK_BACKEND: 'Choose the reranking backend that orders ", "#!/usr/bin/env python3\n\"\"\"\nCompare token usage across FOUR approaches:\n\n1. Claude Alone (no RAG) - reads full files via grep\n2. RAG CLI Standalone - RAG answers directly (no Claude)\n3. Claude + RAG Direct - Claude gets full code chunks from RAG\n4. Claude + RAG via MCP - Claude gets MCP metadata responses\n\nShows actual tokens sent to LLM in each scenario.\n\"\"\"\n\nimport sys\nimport os\nROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, ROOT_DIR)\nimport json\nfr", "#!/usr/bin/env python3\n\"\"\"\nSmart Keyword Generation for  and AGRO\n\nThis script analyzes codebases to generate meaningful, domain-specific keywords\nthat actually help with retrieval instead of generic programming terms.\n\nUsage:\n    python generate_smart_keywords.py  /path/to/\n    python generate_smart_keywords.py agro /path/to/agro\n\"\"\"\n\nimport json\nimport os\nimport re\nimport sys\nfrom collections import Counter, defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Set, Tuple\n\n", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-10", "/Users/davidmontgomery/agro-rag-engine/scripts/test_token_comparison.py:1-28", "/Users/davidmontgomery/agro-rag-engine/scripts/generate_smart_keywords.py:1-21", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27"], "source": "golden.json"}
{"query": "How do I configure the HTTP server port with PORT setting?", "positive_text": "        [\n          ['Vector Embeddings', 'https://en.wikipedia.org/wiki/Word_embedding'],\n          ['Dimensionality Tradeoffs', 'https://www.sbert.net/docs/pretrained_models.html#model-overview'],\n          ['Qdrant Vector Config', 'https://qdrant.tech/documentation/concepts/collections/#create-a-collection'],\n          ['Reindexing Guide', '/docs/INDEXING.md#full-reindex']\n        ],\n        [['Requires reindex','reindex'], ['Affects storage', 'warn']]\n      ),\n      PORT: L(\n        'HTTP Po", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "negative_texts": ["# server/webhook_config.py\n# Webhook configuration management - Slack/Discord URLs stored in GUI\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nWEBHOOK_CONFIG_FILE = CONFIG_DIR / \"webhooks.json\"\n\n\n@dataclass", "# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass", "    - key: THREAD_ID\n      type: string\n      default: http or cli-chat\n      description: LangGraph thread id (configurable per client)\n    - key: PORT\n      type: integer\n      default: 8012\n      description: Uvicorn port for serve entrypoints\n    - key: agro_PATH\n      type: path\n      default: null\n      description: Optional reference path used by some helpers\n    - key: LANGCHAIN_TRACING_V2\n      type: flag\n      default: \"0\"\n      description: Optional tracing flag for LangChain-compatib", "    const u = new URL('/mcp/tools/call', MCP_HTTP_URL);\n    const headers = token ? { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } : { 'Content-Type': 'application/json' };\n    const body = JSON.stringify({\n      name: 'web_get',\n      arguments: { url, max_bytes: max_bytes ? parseInt(max_bytes) : 20000 }\n    });\n    const r = await fetch(u.toString(), { method: 'POST', headers, body });\n    const data = await r.json();\n    res.json(data);\n  } catch (e) {\n    res.status"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/webhook_config.py:1-15", "/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-32", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-19"], "source": "golden.json"}
{"query": "What is THREAD_ID for conversation state in LangGraph?", "positive_text": "        [\n          ['Netlify Sites', 'https://docs.netlify.com/domains-https/custom-domains/'],\n          ['MCP Tool Usage', '/docs/MCP_TOOLS.md#netlify-deploy'],\n          ['Netlify Dashboard', 'https://app.netlify.com/']\n        ]\n      ),\n\n      // Misc\n      THREAD_ID: L(\n        'Thread ID',\n        'Unique identifier for conversation session state in LangGraph checkpoints or CLI chat. Use a stable value (e.g., \"session-123\", user email, UUID) to preserve chat history and context across ru", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "negative_texts": ["    - key: THREAD_ID\n      type: string\n      default: http or cli-chat\n      description: LangGraph thread id (configurable per client)\n    - key: PORT\n      type: integer\n      default: 8012\n      description: Uvicorn port for serve entrypoints\n    - key: agro_PATH\n      type: path\n      default: null\n      description: Optional reference path used by some helpers\n    - key: LANGCHAIN_TRACING_V2\n      type: flag\n      default: \"0\"\n      description: Optional tracing flag for LangChain-compatib", "get_graph():\n    global _graph\n    if _graph is None:\n        _graph = build_graph()\n    return _graph\n\nCFG = {\"configurable\": {\"thread_id\": \"http\"}}\nAnswer(BaseModel):\n    answer: str\n    event_id: Optional[str] = None\n\nROOT = repo_root()\nGUI_DIR = gui_dir()\nDOCS_DIR = docs_dir()\n\n# Serve static GUI assets\nif GUI_DIR.exists():\n    app.mount(\"/gui\", StaticFiles(directory=str(GUI_DIR), html=True), name=\"gui\")\n\n# Serve local docs and repo files for in-GUI links\nif DOCS_DIR.exists():\n    app.mount(", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "                const qs = new URLSearchParams({ project: prj, share: 'true' });\n                const r = await fetch(api(`/api/langsmith/latest?${qs.toString()}`));\n                const d = await r.json();\n                if (d && d.url) window.open(d.url, '_blank');\n                else alert('No recent LangSmith run found. Ask a question first.');\n            }catch(e){ alert('Unable to open LangSmith: '+e.message); }\n        });\n\n        // Chat bindings\n        const chatSend = document.g"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-32", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-31", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-18"], "source": "golden.json"}
{"query": "How do I configure Anthropic Claude models with ANTHROPIC_API_KEY?", "positive_text": "          ['Claude Models', 'https://docs.anthropic.com/en/docs/about-claude/models'],\n          ['API Quickstart', 'https://docs.anthropic.com/en/api/getting-started'],\n          ['Pricing', 'https://www.anthropic.com/pricing']\n        ]\n      ),\n      GOOGLE_API_KEY: L(\n        'Google API Key',\n        'API key for Google Gemini models and embedding endpoints (gemini-1.5-pro, gemini-1.5-flash, text-embedding-004). Required when using Google AI services. Create key at Google AI Studio. Gemini ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "negative_texts": ["        }\n\n        // Cost panel autopopulate from env\n        try {\n            // Generation provider heuristic: use GEN_MODEL hint if present; otherwise env keys\n            let provGuess = '';\n            const gm = env.GEN_MODEL || '';\n            if (/^gpt-|^o\\w+:/i.test(gm)) provGuess = 'openai';\n            else if (/^claude/i.test(gm)) provGuess = 'anthropic';\n            else if (/^gemini/i.test(gm)) provGuess = 'google';\n            else if (env.OLLAMA_URL) provGuess = 'local';\n      ", "    if (!model) return;\n    const baseUrl = promptStr('Base URL (optional; for proxies or local, e.g., http://127.0.0.1:11434)', '');\n    let apiKey = '';\n    if (provider !== 'local') apiKey = promptStr('API Key (optional; shown locally only)', '') || '';\n\n    const env = { GEN_MODEL: model };\n    if (provider === 'openai'){ if (apiKey) env.OPENAI_API_KEY = apiKey; if (baseUrl) env.OPENAI_BASE_URL = baseUrl; }\n    else if (provider === 'anthropic'){ if (apiKey) env.ANTHROPIC_API_KEY = apiKey; }", "      \"args\": [\"-m\", \"server.mcp.server\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n\nEOF\n\n    if [ ! -f \"$CLAUDE_CONFIG\" ]; then\n        read -p \"   Create this config now? (y/n) \" -n 1 -r\n        echo\n        if [[ $REPLY =~ ^[Yy]$ ]]; then\n            mkdir -p \"$CLAUDE_CONFIG_DIR\"\n            cat > \"$CLAUDE_CONFIG\" <<EOF\n{\n  \"mcpServers\": {\n    \"project-rag\": {\n      \"command\": \"$VENV_PYTHON\",\n      \"args\": [\"-m\", \"server.mcp.server\"],\n      \"env\": {\n   ", "import os\nfrom pathlib import Path\n\n# Initialize LangTrace FIRST - must precede ANY LLM/framework imports\ntry:\n    from langtrace_python_sdk import langtrace\n    LANGTRACE_KEY = os.getenv('LANGTRACE_API_KEY', '0b20be5d3e82b7c514cd1bea1fa583f92683e55ebe895452ece7d9261d4412d2')\n    langtrace.init(api_key=LANGTRACE_KEY)\n    print(\"✅ LangTrace initialized in FastAPI server\")\nexcept Exception as e:\n    print(f\"⚠️ LangTrace init failed: {e}\")\n\nfrom fastapi import FastAPI, Query, HTTPException, Request"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-23", "/Users/davidmontgomery/agro-rag-engine/scripts/SETUP_MCP.sh:1-51", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-65"], "source": "golden.json"}
{"query": "What is OPENAI_BASE_URL for OpenAI-compatible endpoints?", "positive_text": "        [\n          ['OpenAI API Reference', 'https://platform.openai.com/docs/api-reference'],\n          ['Azure OpenAI', 'https://learn.microsoft.com/en-us/azure/ai-services/openai/'],\n          ['LM Studio Setup', 'https://lmstudio.ai/docs/local-server'],\n          ['vLLM Compatibility', 'https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html']\n        ],\n        [['Advanced', 'warn'], ['For compatible endpoints only', 'info']]\n      ),\n\n      // Enrichment / Cards / Indexing\n  ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "negative_texts": ["      type: string\n      default: null\n      description: OpenAI API key for embeddings/generation (Responses API)\n    - key: OPENAI_BASE_URL\n      type: string\n      default: null\n      description: Optional OpenAI-compatible base URL (e.g., vLLM proxy)\n    - key: OLLAMA_URL\n      type: url\n      default: null\n      description: Local model endpoint for generation (Qwen etc.)\n    - key: ENRICH_BACKEND\n      type: enum\n      default: \"\"\n      allowed: [\"\", mlx, ollama]\n      description: Force b", "    if (!provider) return;\n    const model = promptStr('Embedding model ID (optional; depends on provider)', provider === 'openai' ? 'text-embedding-3-small' : '');\n    const baseUrl = promptStr('Base URL (optional)', '');\n    let apiKey = '';\n    if (provider !== 'local' && provider !== 'mxbai') apiKey = promptStr('API Key (optional)', '') || '';\n\n    const env = {};\n    if (provider === 'openai'){ env.EMBEDDING_TYPE = 'openai'; if (apiKey) env.OPENAI_API_KEY = apiKey; if (baseUrl) env.OPENAI_B", "    if (!model) return;\n    const baseUrl = promptStr('Base URL (optional; for proxies or local, e.g., http://127.0.0.1:11434)', '');\n    let apiKey = '';\n    if (provider !== 'local') apiKey = promptStr('API Key (optional; shown locally only)', '') || '';\n\n    const env = { GEN_MODEL: model };\n    if (provider === 'openai'){ if (apiKey) env.OPENAI_API_KEY = apiKey; if (baseUrl) env.OPENAI_BASE_URL = baseUrl; }\n    else if (provider === 'anthropic'){ if (apiKey) env.ANTHROPIC_API_KEY = apiKey; }", "web_get(url: str, max_bytes: int = 20000) -> Dict[str, Any]:\n    \"\"\"\n    HTTP GET for allowlisted documentation domains.\n    Allowed: openai.com, platform.openai.com, github.com, openai.github.io\n    \"\"\"\n    allowed_hosts = {\"openai.com\", \"platform.openai.com\", \"github.com\", \"openai.github.io\"}\n    \n    def _is_allowed(url: str) -> bool:\n        try:\n            u = urllib.parse.urlparse(url)\n            host = (u.netloc or \"\").lower()\n            return any(host == h or host.endswith(\".\" + h) f"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-38", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-19", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-23", "/Users/davidmontgomery/agro-rag-engine/server/mcp/http.py:1-46"], "source": "golden.json"}
{"query": "How do I configure Google Gemini models with GOOGLE_API_KEY?", "positive_text": "          ['Claude Models', 'https://docs.anthropic.com/en/docs/about-claude/models'],\n          ['API Quickstart', 'https://docs.anthropic.com/en/api/getting-started'],\n          ['Pricing', 'https://www.anthropic.com/pricing']\n        ]\n      ),\n      GOOGLE_API_KEY: L(\n        'Google API Key',\n        'API key for Google Gemini models and embedding endpoints (gemini-1.5-pro, gemini-1.5-flash, text-embedding-004). Required when using Google AI services. Create key at Google AI Studio. Gemini ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "negative_texts": ["        }\n\n        // Cost panel autopopulate from env\n        try {\n            // Generation provider heuristic: use GEN_MODEL hint if present; otherwise env keys\n            let provGuess = '';\n            const gm = env.GEN_MODEL || '';\n            if (/^gpt-|^o\\w+:/i.test(gm)) provGuess = 'openai';\n            else if (/^claude/i.test(gm)) provGuess = 'anthropic';\n            else if (/^gemini/i.test(gm)) provGuess = 'google';\n            else if (env.OLLAMA_URL) provGuess = 'local';\n      ", "    if (!model) return;\n    const baseUrl = promptStr('Base URL (optional; for proxies or local, e.g., http://127.0.0.1:11434)', '');\n    let apiKey = '';\n    if (provider !== 'local') apiKey = promptStr('API Key (optional; shown locally only)', '') || '';\n\n    const env = { GEN_MODEL: model };\n    if (provider === 'openai'){ if (apiKey) env.OPENAI_API_KEY = apiKey; if (baseUrl) env.OPENAI_BASE_URL = baseUrl; }\n    else if (provider === 'anthropic'){ if (apiKey) env.ANTHROPIC_API_KEY = apiKey; }", "import os\nfrom pathlib import Path\n\n# Initialize LangTrace FIRST - must precede ANY LLM/framework imports\ntry:\n    from langtrace_python_sdk import langtrace\n    LANGTRACE_KEY = os.getenv('LANGTRACE_API_KEY', '0b20be5d3e82b7c514cd1bea1fa583f92683e55ebe895452ece7d9261d4412d2')\n    langtrace.init(api_key=LANGTRACE_KEY)\n    print(\"✅ LangTrace initialized in FastAPI server\")\nexcept Exception as e:\n    print(f\"⚠️ LangTrace init failed: {e}\")\n\nfrom fastapi import FastAPI, Query, HTTPException, Request", "# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-23", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-65", "/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16"], "source": "golden.json"}
{"query": "What is EMBEDDING_DIM and how does it affect Qdrant storage?", "positive_text": "        [\n          ['Vector Embeddings', 'https://en.wikipedia.org/wiki/Word_embedding'],\n          ['Dimensionality Tradeoffs', 'https://www.sbert.net/docs/pretrained_models.html#model-overview'],\n          ['Qdrant Vector Config', 'https://qdrant.tech/documentation/concepts/collections/#create-a-collection'],\n          ['Reindexing Guide', '/docs/INDEXING.md#full-reindex']\n        ],\n        [['Requires reindex','reindex'], ['Affects storage', 'warn']]\n      ),\n      PORT: L(\n        'HTTP Po", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "negative_texts": ["            VOYAGE_API_KEY: 'API key for Voyage embeddings.',\n            VOYAGE_EMBED_DIM: 'Output dimension for Voyage embeddings.',\n            EMBEDDING_DIM: 'Embedding dimension for MXBAI/local models.',\n            SKIP_DENSE: 'If 1, skip building dense vectors/Qdrant (sparse-only).',\n            ENRICH_CODE_CHUNKS: 'If true, store per-chunk summaries/keywords before embedding.',\n\n            // Reranking (verbose tips)\n            RERANK_BACKEND: 'Choose the reranking backend that orders ", "      default: 512\n      description: Output dimension for voyage-code-3 embeddings\n    - key: EMBEDDING_DIM\n      type: integer\n      default: 3072\n      description: Dimension for embeddings (3072 for text-embedding-3-large, 512 for MXBAI)\n    - key: SKIP_DENSE\n      type: flag\n      default: \"1\"\n      description: Skip dense embeddings + Qdrant upsert during indexing (recommended for small repos)\n      notes:\n        - Set to 1 for optimal AGRO performance (BM25-only outperforms hybrid)\n     ", "import os\nfrom pathlib import Path\n\n# Initialize LangTrace FIRST - must precede ANY LLM/framework imports\ntry:\n    from langtrace_python_sdk import langtrace\n    LANGTRACE_KEY = os.getenv('LANGTRACE_API_KEY', '0b20be5d3e82b7c514cd1bea1fa583f92683e55ebe895452ece7d9261d4412d2')\n    langtrace.init(api_key=LANGTRACE_KEY)\n    print(\"✅ LangTrace initialized in FastAPI server\")\nexcept Exception as e:\n    print(f\"⚠️ LangTrace init failed: {e}\")\n\nfrom fastapi import FastAPI, Query, HTTPException, Request", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-10", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-29", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-65", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6"], "source": "golden.json"}
{"query": "How do I configure Redis for LangGraph checkpoints with REDIS_URL?", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-14", "negative_texts": ["ChatCLI:\n    \"\"\"Interactive CLI chat with RAG.\"\"\"\n\n    def __init__(self, repo: str = 'agro', thread_id: str = 'cli-chat'):\n        self.repo = repo\n        self.thread_id = thread_id\n        self.graph = None\n        self._init_graph()\n\n    def _init_graph(self):\n        \"\"\"Initialize LangGraph with Redis checkpoints.\"\"\"\n        try:\n            self.graph = build_graph()\n            console.print(\"[green]✓[/green] Graph initialized with Redis checkpoints\")\n        except Exception as e:\n      ", "      description: Redis for LangGraph checkpointer\n    - key: COLLECTION_NAME\n      type: string\n      default: code_chunks_{REPO}\n      description: Qdrant collection name override\n    - key: COLLECTION_SUFFIX\n      type: string\n      default: default\n      description: Optional suffix for collection grouping\n    - key: REPO\n      type: string\n      default: agro\n      description: Active repository tag for routing and out dirs\n    - key: REPO_PATH\n      type: path\n      default: null\n      de", "#!/usr/bin/env python3\n\"\"\"\nInteractive CLI chat interface for RAG service.\nUses LangGraph with Redis checkpoints for conversation memory.\n\nUsage:\n    export REPO=agro\n    export THREAD_ID=my-session-1\n    python -m cli.chat_cli\n\nCommands:\n    /repo <name>    - Switch repository (from repos.json)\n    /save           - Save conversation checkpoint\n    /clear          - Clear conversation history\n    /help           - Show commands\n    /exit, /quit    - Exit chat\n\"\"\"\nimport os\nimport sys\nimport req", "#!/usr/bin/env python3\n\"\"\"\nInteractive CLI chat interface for RAG service.\nUses LangGraph with Redis checkpoints for conversation memory.\n\nUsage:\n    export REPO=agro\n    export THREAD_ID=my-session-1\n    python -m cli.chat_cli\n\nCommands:\n    /repo <name>    - Switch repository (from repos.json)\n    /save           - Save conversation checkpoint\n    /clear          - Clear conversation history\n    /help           - Show commands\n    /exit, /quit    - Exit chat\n\"\"\"\nimport os\nimport sys\nimport req"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-252", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-45", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-27", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-27"], "source": "golden.json"}
{"query": "What is TRANSFORMERS_TRUST_REMOTE_CODE security warning about?", "positive_text": "        [\n          ['Security Notes', 'https://huggingface.co/docs/transformers/installation#security-notes'],\n          ['Custom Code in Models', 'https://huggingface.co/docs/transformers/custom_models'],\n          ['Model Security', 'https://huggingface.co/docs/hub/security']\n        ],\n        [['Security risk', 'warn'], ['Only for trusted models', 'warn']]\n      ),\n      LANGCHAIN_TRACING_V2: L(\n        'LangChain Tracing',\n        'Enable comprehensive tracing with LangSmith (v2 tracing pr", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "negative_texts": ["generate_node(state: RAGState) -> Dict:\n    q = state['question']; ctx = state['documents'][:5]\n    # packer summary for trace\n    try:\n        tr = get_trace()\n        if tr is not None:\n            budget = int(os.getenv('PACK_BUDGET_TOKENS', '4096') or 4096)\n            selected = []\n            for d in ctx:\n                sel = {\n                    'path': d.get('file_path'),\n                    'lines': f\"L{d.get('start_line')}-L{d.get('end_line')}\",\n                    'est_tokens': int", "import {themes as prismThemes} from 'prism-react-renderer';\nimport type {Config} from '@docusaurus/types';\nimport type * as Preset from '@docusaurus/preset-classic';\n\nconst config: Config = {\n  title: 'AGRO Documentation',\n  tagline: 'Local-first RAG engine for codebases',\n  favicon: 'img/favicon.ico',\n\n  future: {\n    v4: true,\n  },\n\n  url: 'https://dmontgomery40.github.io',\n  baseUrl: '/agro-rag-engine/',\n\n  organizationName: 'DMontgomery40',\n  projectName: 'agro-rag-engine',\n\n  onBrokenLinks:", "                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                component: ComponentCreator('/agro-rag-engine/configuration/alerting', 'ceb'),\n          ", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-151", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-56", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6"], "source": "golden.json"}
{"query": "How do I configure Netlify deployment with NETLIFY_API_KEY and NETLIFY_DOMAINS?", "positive_text": "        [\n          ['Netlify Sites', 'https://docs.netlify.com/domains-https/custom-domains/'],\n          ['MCP Tool Usage', '/docs/MCP_TOOLS.md#netlify-deploy'],\n          ['Netlify Dashboard', 'https://app.netlify.com/']\n        ]\n      ),\n\n      // Misc\n      THREAD_ID: L(\n        'Thread ID',\n        'Unique identifier for conversation session state in LangGraph checkpoints or CLI chat. Use a stable value (e.g., \"session-123\", user email, UUID) to preserve chat history and context across ru", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "negative_texts": ["netlify_deploy(domain: str = \"both\") -> Dict[str, Any]:\n    \"\"\"\n    Trigger Netlify builds for configured domains.\n    Args:\n        domain: Site to deploy - 'project.net', 'project.dev', or 'both'\n    \"\"\"\n    def _netlify_api(path: str, method: str = \"GET\", data: dict = None):\n        api_key = os.getenv(\"NETLIFY_API_KEY\")\n        if not api_key:\n            raise RuntimeError(\"NETLIFY_API_KEY not set\")\n        url = f\"https://api.netlify.com/api/v1{path}\"\n        req = urllib.request.Request(u", "#!/usr/bin/env python3\nimport os, sys, json, urllib.request, urllib.error\n\nAPI = \"https://api.netlify.com/api/v1\"\napi(path: str, method: str = \"GET\", data: dict | None = None) -> dict:\n    token = os.getenv(\"NETLIFY_API_KEY\")\n    if not token:\n        print(\"NETLIFY_API_KEY not set\", file=sys.stderr)\n        sys.exit(2)\n    url = f\"{API}{path}\"\n    req = urllib.request.Request(url, method=method)\n    req.add_header(\"Authorization\", f\"Bearer {token}\")\n    req.add_header(\"Content-Type\", \"applicati", "main():\n    if len(sys.argv) < 2:\n        print(\"Usage: netlify_deploy.py [project.net|project.dev|both|list]\", file=sys.stderr)\n        sys.exit(2)\n    cmd = sys.argv[1].strip().lower()\n    if cmd == \"list\":\n        sites = api(\"/sites\", \"GET\")\n        out = []\n        for s in sites if isinstance(sites, list) else []:\n            out.append({\"id\": s.get(\"id\"), \"name\": s.get(\"name\"), \"url\": s.get(\"url\"), \"custom_domain\": s.get(\"custom_domain\")})\n        print(json.dumps(out, indent=2))\n        ", "    }\n    res.end();\n  } catch (e) {\n    res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');\n    res.write(`data: [ERROR] ${String(e)}\\n\\n`);\n    res.end();\n  }\n});\n\n// Netlify deploy proxy (calls Python HTTP MCP on 8013)\napp.get('/mcp/netlify_deploy', async (req, res) => {\n  try {\n    const { domain, token } = req.query;\n    const MCP_HTTP_URL = process.env.MCP_HTTP_URL || 'http://127.0.0.1:8013';\n    const u = new URL('/mcp/tools/call', MCP_HTTP_URL);\n    const headers = token ?"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/mcp/http.py:1-45", "/Users/davidmontgomery/agro-rag-engine/scripts/netlify_deploy.py:1-28", "/Users/davidmontgomery/agro-rag-engine/scripts/netlify_deploy.py:1-20", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-34"], "source": "golden.json"}
{"query": "What is FINAL_K and how does it balance precision vs recall?", "positive_text": "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22", "negative_texts": ["get_topk(repo: Optional[str]) -> Tuple[int, int, int]:\n    kd = get_int(repo, \"TOPK_DENSE\", int(os.getenv(\"TOPK_DENSE\", \"75\") or 75), 75)\n    ks = get_int(repo, \"TOPK_SPARSE\", int(os.getenv(\"TOPK_SPARSE\", \"75\") or 75), 75)\n    fk = get_int(repo, \"FINAL_K\", int(os.getenv(\"FINAL_K\", \"10\") or 10), 10)\n    return kd, ks, fk\n\nget_mq_rewrites(repo: Optional[str]) -> int:\n    return get_int(repo, \"MQ_REWRITES\", int(os.getenv(\"MQ_REWRITES\", \"2\") or 2), 2)\n\nget_reranker_config(repo: Optional[str]) -> Dic", "set_retrieval_quality(topk: int, hits: int, mrr: Optional[float] = None):\n    RETRIEVAL_HITS.labels(topk=str(int(topk))).set(max(0, int(hits)))\n    if mrr is not None:\n        v = max(0.0, min(1.0, float(mrr)))\n        RR_MRR.set(v)\nrecord_canary(provider: str, model: str, passed: bool, margin: Optional[float] = None, winner: Optional[str] = None):\n    CANARY_TOTAL.labels(provider=provider, model=model).inc()\n    if passed:\n        CANARY_PASS_TOTAL.labels(provider=provider, model=model).inc()\n ", "import os\nfrom retrieval.hybrid_search import search_routed_multi\n\nTESTS = [\n    ('project','ai studio','easy'),\n    ('project','TBAC trait system','easy'),\n    ('project','plugin builder','easy'),\n    ('project','webhook verification','easy'),\n    ('project','three lane gateway','medium'),\n    ('project','plugin sandbox isolation','medium'),\n    ('project','provider adapter traits','medium'),\n    ('project','canonical event normalization','medium'),\n    ('project','how does TBAC prevent PHI acc", "#!/usr/bin/env python3\n\"\"\"\nCompare token usage across FOUR approaches:\n\n1. Claude Alone (no RAG) - reads full files via grep\n2. RAG CLI Standalone - RAG answers directly (no Claude)\n3. Claude + RAG Direct - Claude gets full code chunks from RAG\n4. Claude + RAG via MCP - Claude gets MCP metadata responses\n\nShows actual tokens sent to LLM in each scenario.\n\"\"\"\n\nimport sys\nimport os\nROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, ROOT_DIR)\nimport json\nfr"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/archive/runtime_config.py:1-17", "/Users/davidmontgomery/agro-rag-engine/server/metrics.py:1-16", "/Users/davidmontgomery/agro-rag-engine/scripts/benchmark_improvements.py:1-33", "/Users/davidmontgomery/agro-rag-engine/scripts/test_token_comparison.py:1-28"], "source": "golden.json"}
{"query": "How do I configure Ollama local models with OLLAMA_URL?", "positive_text": "      GEN_MODEL: L('Generation Model', 'Answer model. Local: qwen3-coder:14b via Ollama. Cloud: gpt-4o-mini, etc. Larger models cost more and can be slower; smaller ones are faster/cheaper.', [\n        ['OpenAI Models', 'https://platform.openai.com/docs/models'],\n        ['Ollama API (GitHub)', 'https://github.com/ollama/ollama/blob/main/docs/api.md']\n      ], [['Affects latency','info']]),\n      OLLAMA_URL: L('Ollama URL', 'Local inference endpoint for Ollama (e.g., http://127.0.0.1:11434/api).", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-13", "negative_texts": ["#!/bin/bash\nset -euo pipefail\nROOT_DIR=\"$(cd \"$(dirname \"$0\")\" && pwd)\"\ncd \"$ROOT_DIR\"\n. .venv/bin/activate\nexport PYTHONPATH=\"$ROOT_DIR\"\n# Optional local model: leave disabled by default\n# export OLLAMA_URL=http://127.0.0.1:11434/api\n# export GEN_MODEL=qwen3-coder:30b\npython scripts/test_token_comparison.py\n", "      type: string\n      default: null\n      description: OpenAI API key for embeddings/generation (Responses API)\n    - key: OPENAI_BASE_URL\n      type: string\n      default: null\n      description: Optional OpenAI-compatible base URL (e.g., vLLM proxy)\n    - key: OLLAMA_URL\n      type: url\n      default: null\n      description: Local model endpoint for generation (Qwen etc.)\n    - key: ENRICH_BACKEND\n      type: enum\n      default: \"\"\n      allowed: [\"\", mlx, ollama]\n      description: Force b", "        }\n\n        // Cost panel autopopulate from env\n        try {\n            // Generation provider heuristic: use GEN_MODEL hint if present; otherwise env keys\n            let provGuess = '';\n            const gm = env.GEN_MODEL || '';\n            if (/^gpt-|^o\\w+:/i.test(gm)) provGuess = 'openai';\n            else if (/^claude/i.test(gm)) provGuess = 'anthropic';\n            else if (/^gemini/i.test(gm)) provGuess = 'google';\n            else if (env.OLLAMA_URL) provGuess = 'local';\n      ", "            if (p === 'mxbai') return ['huggingface'];\n            if (p === 'hugging face') return ['huggingface'];\n            if (p === 'local'){\n                // For local: embeddings prefer local/ollama; rerank prefer huggingface/local\n                return (kind==='embed') ? ['local','ollama'] : ['huggingface','local','ollama','mlx'];\n            }\n            return [p];\n        }\n        function updateEmbedList(){\n            const sel = document.getElementById('cost-embed-provider')"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/run_token_test.sh:1-11", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-38", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-22"], "source": "golden.json"}
{"query": "What is HYDRATION_MAX_CHARS for preventing huge chunk bloat?", "positive_text": "          ['chunks.jsonl Format', '/docs/INDEXING.md#chunks-format']\n        ],\n        [['Lazy Recommended', 'info']]\n      ),\n      HYDRATION_MAX_CHARS: L(\n        'Hydration Max Chars',\n        'Maximum characters to load per chunk when hydrating results with code content. Prevents huge chunks from bloating responses and consuming excessive memory. 0 = no limit (may cause memory issues with large files). Recommended: 2000 for general use, 1000 for memory-constrained environments, 5000 for det", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "negative_texts": ["            HYDRATION_MODE: 'lazy: hydrate code snippets on demand; none: skip hydration.',\n            HYDRATION_MAX_CHARS: 'Max characters per hydrated code snippet.',\n            VENDOR_MODE: 'Prefer first-party or vendor paths when scoring files.',\n            project_PATH_BOOSTS: 'CSV of path substrings to boost (e.g., app/,lib/,config/).',\n            CARDS_MAX: 'Limit number of cards used for boosting (0 = all).',\n\n            // Confidence\n            CONF_TOP1: 'Accept answer if top-1 r", "    - key: TOPK_SPARSE\n      type: integer\n      default: 75\n      description: Sparse candidate count (BM25)\n    - key: MQ_REWRITES\n      type: integer\n      default: 2\n      description: Multi-query expansion count (conditional on query type)\n    - key: HYDRATION_MODE\n      type: enum\n      default: lazy\n      allowed: [lazy, none]\n      description: Whether to hydrate code bodies from chunks.jsonl\n    - key: HYDRATION_MAX_CHARS\n      type: integer\n      default: 2000\n      description: Trunca", "generate_node(state: RAGState) -> Dict:\n    q = state['question']; ctx = state['documents'][:5]\n    # packer summary for trace\n    try:\n        tr = get_trace()\n        if tr is not None:\n            budget = int(os.getenv('PACK_BUDGET_TOKENS', '4096') or 4096)\n            selected = []\n            for d in ctx:\n                sel = {\n                    'path': d.get('file_path'),\n                    'lines': f\"L{d.get('start_line')}-L{d.get('end_line')}\",\n                    'est_tokens': int", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-20", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-35", "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-151", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6"], "source": "golden.json"}
{"query": "How do I configure repos.json with REPOS_FILE setting?", "positive_text": "load_repos() -> Dict[str, Any]:\n    global _CACHE\n    if \"config\" in _CACHE:\n        return _CACHE[\"config\"]\n    p = _repos_file_path()\n    if p.exists():\n        try:\n            data = json.loads(p.read_text())\n            if isinstance(data, dict) and isinstance(data.get(\"repos\"), list):\n                _CACHE[\"config\"] = data\n                return data\n        except Exception:\n            pass\n    env_repo = (os.getenv(\"REPO\") or \"default\").strip()\n    env_path = os.getenv(\"REPO_PATH\") or ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/common/config_loader.py:1-37", "negative_texts": ["write_repos_json(rag_root: Path, name: str, code_path: Path) -> Path:\n    p = os.getenv('REPOS_FILE') or str(rag_root / 'repos.json')\n    repos_path = Path(p)\n    cfg = {'default_repo': name, 'repos': []}\n    if repos_path.exists():\n        try:\n            cfg = json.loads(repos_path.read_text())\n            if not isinstance(cfg, dict):\n                cfg = {'default_repo': name, 'repos': []}\n        except Exception:\n            cfg = {'default_repo': name, 'repos': []}\n    # Update or appen", "#!/usr/bin/env python3\n\"\"\"\nMake a repos.json from simple CLI args.\n\nUsage examples:\n  python scripts/make_repos_json.py repo-a=/abs/path/a repo-b=/abs/path/b --default repo-a\n\nEnvironment fallbacks:\n  REPO and REPO_PATH if provided (single repo).\n\nBehavior:\n  - Writes repos.json in repo root (or REPOS_FILE location if set)\n  - If repos.json exists, writes a timestamped backup next to it\n\"\"\"\nimport os, sys, json, time\nfrom pathlib import Path\n\nparse_args(argv):\n    pairs = []\n    default_repo = N", "        btn.disabled = false;\n    }\n}\n\n// Load repos on page load\nasync function loadRepos() {\n    try {\n        const response = await fetch('/api/config');\n        const config = await response.json();\n        const select = $('simple-repo-select');\n        \n        if (config.repos && config.repos.length > 0) {\n            select.innerHTML = '';\n            config.repos.forEach(repo => {\n                const opt = document.createElement('option');\n                opt.value = repo.name;\n     ", "main():\n    args = sys.argv[1:]\n    pairs, default_repo = parse_args(args)\n\n    # Fallback to env for single-repo if no pairs passed\n    if not pairs:\n        env_repo = (os.getenv('REPO') or '').strip()\n        env_path = (os.getenv('REPO_PATH') or '').strip()\n        if env_repo and env_path:\n            pairs = [(env_repo, env_path)]\n            if not default_repo:\n                default_repo = env_repo\n        else:\n            print('No repo arguments provided and REPO/REPO_PATH not set. "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-29", "/Users/davidmontgomery/agro-rag-engine/scripts/make_repos_json.py:1-45", "/Users/davidmontgomery/agro-rag-engine/gui/js/simple_index.js:1-40", "/Users/davidmontgomery/agro-rag-engine/scripts/make_repos_json.py:1-53"], "source": "golden.json"}
{"query": "What is REPO_PATH fallback when repos.json is not configured?", "positive_text": "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "negative_texts": ["main():\n    args = sys.argv[1:]\n    pairs, default_repo = parse_args(args)\n\n    # Fallback to env for single-repo if no pairs passed\n    if not pairs:\n        env_repo = (os.getenv('REPO') or '').strip()\n        env_path = (os.getenv('REPO_PATH') or '').strip()\n        if env_repo and env_path:\n            pairs = [(env_repo, env_path)]\n            if not default_repo:\n                default_repo = env_repo\n        else:\n            print('No repo arguments provided and REPO/REPO_PATH not set. ", "      description: Redis for LangGraph checkpointer\n    - key: COLLECTION_NAME\n      type: string\n      default: code_chunks_{REPO}\n      description: Qdrant collection name override\n    - key: COLLECTION_SUFFIX\n      type: string\n      default: default\n      description: Optional suffix for collection grouping\n    - key: REPO\n      type: string\n      default: agro\n      description: Active repository tag for routing and out dirs\n    - key: REPO_PATH\n      type: path\n      default: null\n      de", "#!/usr/bin/env python3\n\"\"\"\nMake a repos.json from simple CLI args.\n\nUsage examples:\n  python scripts/make_repos_json.py repo-a=/abs/path/a repo-b=/abs/path/b --default repo-a\n\nEnvironment fallbacks:\n  REPO and REPO_PATH if provided (single repo).\n\nBehavior:\n  - Writes repos.json in repo root (or REPOS_FILE location if set)\n  - If repos.json exists, writes a timestamped backup next to it\n\"\"\"\nimport os, sys, json, time\nfrom pathlib import Path\n\nparse_args(argv):\n    pairs = []\n    default_repo = N", "    async function changeRepo() {\n        showStatus('Loading repositories...', 'loading');\n\n        try {\n            const response = await fetch(api('/api/config'));\n            const data = await response.json();\n            const repos = data.repos || [];\n            const currentRepo = (data.env && data.env.REPO) || data.default_repo || 'agro';\n\n            if (repos.length === 0) {\n                showStatus('No repositories configured', 'error');\n                return;\n            }\n\n  "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/make_repos_json.py:1-53", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-45", "/Users/davidmontgomery/agro-rag-engine/scripts/make_repos_json.py:1-45", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-42"], "source": "golden.json"}
{"query": "How do I configure path boosts for repository routing?", "positive_text": "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "negative_texts": ["get_path_boosts(repo: Optional[str]) -> List[str]:\n    # Use repos.json, with optional env override per-repo (e.g., PROJECT_PATH_BOOSTS)\n    lst = _path_boosts_cfg(repo or \"\")\n    env_key = f\"{(repo or '').upper()}_PATH_BOOSTS\" if repo else None\n    if env_key:\n        env_val = os.getenv(env_key)\n        if not env_val and (repo or \"\").lower() == \"project\":\n            env_val = os.getenv(\"project_PATH_BOOSTS\")\n        if env_val:\n            lst.extend([t.strip() for t in env_val.split(',') if", "        - name: unset_layer_bonus\n          target: repos[].layer_bonuses[<intent>][<layer>]\n        - name: add_repo_path\n          target: repos[].path (string or list[string])\n          type: path\n          note: path entries are expanded with ~ and can be arrays\n        - name: remove_repo_path\n          target: repos[].path\n      notes:\n        - Editing repos.json changes routing (choose_repo_from_query) and boosts without code changes\n        - After path edits, rebuild indices for affect", "out_dir(name: str) -> str:\n    return str(_out_base_dir() / name)\n\nget_repo_keywords(name: str) -> List[str]:\n    r = _find_repo(name)\n    if not r:\n        return []\n    kws = r.get(\"keywords\") or []\n    return [str(k).lower() for k in kws if isinstance(k, str)]\n\npath_boosts(name: str) -> List[str]:\n    r = _find_repo(name)\n    if not r:\n        return []\n    lst = r.get(\"path_boosts\") or []\n    return [str(x) for x in lst if isinstance(x, str)]\n\nlayer_bonuses(name: str) -> Dict[str, Dict[str, ", "\"\"\"Path configuration for AGRO RAG Engine.\"\"\"\nfrom pathlib import Path\nimport os\n\nrepo_root() -> Path:\n    \"\"\"Return the root directory of the repository.\"\"\"\n    return Path(__file__).resolve().parent\n\ndata_dir() -> Path:\n    \"\"\"Return the data directory for storing index artifacts.\"\"\"\n    root = repo_root()\n    data = root / \"data\"\n    data.mkdir(exist_ok=True)\n    return data\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/archive/runtime_config.py:1-22", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-33", "/Users/davidmontgomery/agro-rag-engine/common/config_loader.py:1-30", "/Users/davidmontgomery/agro-rag-engine/path_config.py:1-15"], "source": "golden.json"}
{"query": "What is EVAL_MULTI for testing multi-query during evaluation?", "positive_text": "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22", "negative_texts": ["      description: Golden questions file for evals (52 questions currently)\n      notes:\n        - Update golden.json when adding new test queries\n        - Mine triplets with scripts/mine_from_golden.py after changes\n        - Retrain cross-encoder with scripts/train_reranker.py for continuous improvement\n    - key: EVAL_MULTI\n      type: flag\n      default: \"1\"\n      description: Whether to use multi-query expansion in eval (recommended)\n    - key: EVAL_FINAL_K\n      type: integer\n      defaul", "eval_run(payload: Dict[str, Any] = {}) -> Dict[str, Any]:\n    \"\"\"Run full evaluation suite in background.\"\"\"\n    global _EVAL_STATUS\n    import threading\n\n    if _EVAL_STATUS[\"running\"]:\n        return {\"ok\": False, \"error\": \"Evaluation already running\"}\n\n    use_multi = payload.get(\"use_multi\", os.getenv(\"EVAL_MULTI\", \"1\") == \"1\")\n    final_k = int(payload.get(\"final_k\") or os.getenv(\"EVAL_FINAL_K\", \"5\"))\n\n    def run_eval():\n        global _EVAL_STATUS\n        _EVAL_STATUS = {\n            \"run", "// Evaluation Runner\n// Handles running full evaluation suite and displaying results\n\nlet evalResults = null;\nlet evalPollingInterval = null;\n\n// Run full evaluation\nasync function runEvaluation() {\n    const useMulti = document.getElementById('eval-use-multi').value === '1';\n    const finalK = parseInt(document.getElementById('eval-final-k').value) || 5;\n\n    const btn = document.getElementById('btn-eval-run');\n    btn.disabled = true;\n    btn.textContent = 'Starting...';\n\n    try {\n        con", "RAGState(TypedDict):\n    question: str\n    documents: Annotated[List[Dict], operator.add]\n    generation: str\n    iteration: int\n    confidence: float\n    repo: str\nshould_use_multi_query(question: str) -> bool:\n    q = (question or '').lower().strip()\n    if len(q.split()) <= 3:\n        return False\n    for w in (\"how\", \"why\", \"explain\", \"compare\", \"tradeoff\"):\n        if w in q:\n            return True\n    return False\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-31", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-56", "/Users/davidmontgomery/agro-rag-engine/gui/js/eval_runner.js:1-59", "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-16"], "source": "golden.json"}
{"query": "How do I configure BASELINE_PATH for regression testing?", "positive_text": "        [\n          ['Golden Questions Format', '/docs/EVALUATION.md#golden-format'],\n          ['Eval Script Source', '/files/eval/eval_loop.py'],\n          ['Creating Golden Sets', '/docs/EVALUATION.md#creating-golden-questions'],\n          ['Evaluation Metrics', 'https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)']\n        ]\n      ),\n      BASELINE_PATH: L(\n        'Baseline Path',\n        'Directory where evaluation loop saves baseline results for regression testing an", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "negative_texts": ["eval_baseline_save() -> Dict[str, Any]:\n    \"\"\"Save current evaluation results as baseline.\"\"\"\n    if _EVAL_STATUS[\"results\"] is None:\n        raise HTTPException(status_code=400, detail=\"No evaluation results to save\")\n\n    # Prefer data/evals, fallback to root if overridden or missing\n    env_bp = os.getenv(\"BASELINE_PATH\")\n    if env_bp:\n        baseline_path = Path(env_bp)\n    else:\n        candidate = Path(\"data/evals/eval_baseline.json\")\n        baseline_path = candidate if candidate.paren", "eval_baseline_compare() -> Dict[str, Any]:\n    \"\"\"Compare current results with baseline.\"\"\"\n    if _EVAL_STATUS[\"results\"] is None:\n        raise HTTPException(status_code=400, detail=\"No current evaluation results\")\n\n    env_bp = os.getenv(\"BASELINE_PATH\")\n    if env_bp:\n        baseline_path = Path(env_bp)\n    else:\n        candidate = Path(\"data/evals/eval_baseline.json\")\n        baseline_path = candidate if candidate.exists() else Path(\"eval_baseline.json\")\n    if not baseline_path.exists():", "reranker_baseline_save() -> Dict[str, Any]:\n    \"\"\"Save current evaluation as baseline.\"\"\"\n    if not _RERANKER_STATUS.get(\"result\"):\n        return {\"ok\": False, \"error\": \"No evaluation results to save\"}\n    \n    baseline_path = Path(\"data/evals/reranker_baseline.json\")\n    baseline_path.parent.mkdir(parents=True, exist_ok=True)\n    _write_json(baseline_path, _RERANKER_STATUS[\"result\"])\n    \n    # Also backup current model\n    import shutil\n    model_path = Path(os.getenv(\"AGRO_RERANKER_MODEL_P", "reranker_baseline_compare() -> Dict[str, Any]:\n    \"\"\"Compare current results with baseline.\"\"\"\n    baseline_path = Path(\"data/evals/reranker_baseline.json\")\n    if not baseline_path.exists():\n        return {\"ok\": False, \"error\": \"No baseline found\"}\n    \n    if not _RERANKER_STATUS.get(\"result\"):\n        return {\"ok\": False, \"error\": \"No current evaluation results\"}\n    \n    baseline = _read_json(baseline_path, {})\n    current = _RERANKER_STATUS[\"result\"]\n    \n    # Parse metrics from output\n "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-16", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-74", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-21", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-40"], "source": "golden.json"}
{"query": "What is COHERE_RERANK_MODEL for specifying rerank model version?", "positive_text": "      ]),\n      COHERE_API_KEY: L('Cohere API Key', 'API key for Cohere reranking when RERANK_BACKEND=cohere.', [\n        ['Cohere Dashboard: API Keys', 'https://dashboard.cohere.com/api-keys']\n      ]),\n      COHERE_RERANK_MODEL: L('Cohere Rerank Model', 'Cohere rerank model name (e.g., rerank-3.5). Check the provider docs for the latest list and pricing.', [\n        ['Cohere Docs: Models', 'https://docs.cohere.com/docs/models']\n      ]),\n      RERANKER_MODEL: L(\n        'Local Reranker (HF)',\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-14", "negative_texts": ["            COHERE_API_KEY: 'Cohere API key for reranking when RERANK_BACKEND=cohere.\\nStored locally in .env and used only on your machine.',\n            COHERE_RERANK_MODEL: 'Cohere reranker to use when RERANK_BACKEND=cohere.\\nCommon: rerank-3.5 (general), rerank-english-v3.0, rerank-multilingual-v3.0, rerank-english-lite-v3.0.\\nPick from the dropdown or type a custom value.',\n            TRANSFORMERS_TRUST_REMOTE_CODE: 'Advanced: Allow Hugging Face models that need remote code execution (True", "    - key: RERANKER_MODEL\n      type: string\n      default: models/cross-encoder-agro\n      description: Local cross-encoder model path (trained on golden triplets)\n      notes:\n        - Train via scripts/train_reranker.py after mining triplets with scripts/mine_from_golden.py\n        - Current model trained on 43 triplets from golden.json (68% dev accuracy)\n    - key: COHERE_API_KEY\n      type: string\n      default: null\n      description: Key for Cohere reranking\n    - key: COHERE_RERANK_MODE", "    alert('Embedding model added.');\n  }\n\n  async function addRerankModelFlow(){\n    const provider = promptStr('Rerank provider (cohere, local, hf)', 'cohere');\n    if (!provider) return;\n    let model = promptStr('Rerank model ID (e.g., rerank-3.5 or BAAI/bge-reranker-v2-m3)', provider === 'cohere' ? 'rerank-3.5' : 'BAAI/bge-reranker-v2-m3');\n    const baseUrl = promptStr('Base URL (optional)', '');\n    let apiKey = '';\n    if (provider === 'cohere') apiKey = promptStr('Cohere API Key (optiona", "            VOYAGE_API_KEY: 'API key for Voyage embeddings.',\n            VOYAGE_EMBED_DIM: 'Output dimension for Voyage embeddings.',\n            EMBEDDING_DIM: 'Embedding dimension for MXBAI/local models.',\n            SKIP_DENSE: 'If 1, skip building dense vectors/Qdrant (sparse-only).',\n            ENRICH_CODE_CHUNKS: 'If true, store per-chunk summaries/keywords before embedding.',\n\n            // Reranking (verbose tips)\n            RERANK_BACKEND: 'Choose the reranking backend that orders "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-11", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-33", "/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-10"], "source": "golden.json"}
{"query": "How do I configure enrichment model with ENRICH_MODEL_OLLAMA?", "positive_text": "      ),\n      ENRICH_MODEL: L(\n        'Enrichment Model',\n        'Specific model name for code enrichment when ENRICH_BACKEND is set. For OpenAI: \"gpt-4o-mini\" (recommended, cheap), \"gpt-4o\" (higher quality, costly). For Ollama: specify via ENRICH_MODEL_OLLAMA instead. Smaller models (gpt-4o-mini, qwen2.5-coder:7b) balance cost and quality for summaries. Enrichment happens during indexing, not at query time.',\n        [\n          ['OpenAI Models', 'https://platform.openai.com/docs/models'],\n ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "negative_texts": ["      type: string\n      default: null\n      description: OpenAI API key for embeddings/generation (Responses API)\n    - key: OPENAI_BASE_URL\n      type: string\n      default: null\n      description: Optional OpenAI-compatible base URL (e.g., vLLM proxy)\n    - key: OLLAMA_URL\n      type: url\n      default: null\n      description: Local model endpoint for generation (Qwen etc.)\n    - key: ENRICH_BACKEND\n      type: enum\n      default: \"\"\n      allowed: [\"\", mlx, ollama]\n      description: Force b", "import os\nimport json\nfrom typing import Optional, Dict, Any, Tuple\n\ntry:\n    from openai import OpenAI\nexcept Exception as e:\n    raise RuntimeError(\"openai>=1.x is required for Responses API\") from e\n\n_DEFAULT_MODEL = os.getenv(\"GEN_MODEL\", os.getenv(\"ENRICH_MODEL\", \"gpt-4o-mini\"))\n_DEFAULT_TEMPERATURE = float(os.getenv(\"GEN_TEMPERATURE\", \"0.0\") or 0.0)\n\n_client = None\n_mlx_model = None\n_mlx_tokenizer = None\n_get_mlx_model():\n    global _mlx_model, _mlx_tokenizer\n    if _mlx_model is None:\n   ", "        }\n\n        // Cost panel autopopulate from env\n        try {\n            // Generation provider heuristic: use GEN_MODEL hint if present; otherwise env keys\n            let provGuess = '';\n            const gm = env.GEN_MODEL || '';\n            if (/^gpt-|^o\\w+:/i.test(gm)) provGuess = 'openai';\n            else if (/^claude/i.test(gm)) provGuess = 'anthropic';\n            else if (/^gemini/i.test(gm)) provGuess = 'google';\n            else if (env.OLLAMA_URL) provGuess = 'local';\n      ", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-38", "/Users/davidmontgomery/agro-rag-engine/server/env_model.py:1-28", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-23", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6"], "source": "golden.json"}
{"query": "What is AGRO_EDITION for feature gating in deployments?", "positive_text": "        'Edition',\n        'Product edition identifier for feature gating in multi-tier deployments. Values: \"oss\" (open source, all community features), \"pro\" (professional tier with advanced features), \"enterprise\" (full feature set with support). This flag enables/disables certain UI elements and API endpoints based on licensing. Most users should leave this as \"oss\".',\n        [\n          ['Feature Matrix', '/docs/EDITIONS.md'],\n          ['Licensing', '/docs/LICENSE.md'],\n          ['Enterp", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "negative_texts": ["\"\"\"\nFeature gating helpers.\n\n- is_pro(): True if edition/tier is 'pro' or 'enterprise'\n- is_enterprise(): True if edition/tier is 'enterprise'\n\nEnv controls (any of these work):\n- AGRO_EDITION=oss|pro|enterprise  (preferred)\n- TIER=free|pro|enterprise         (back-compat)\n- PRO_ENABLED=true/false           (optional override)\n- ENTERPRISE_ENABLED=true/false    (optional override)\n\"\"\"\nimport os\n\n_truthy(val: str | None) -> bool:\n    if not val:\n        return False\n    return val.strip().lower()", "      description: Bonus for files with provider/integration hints (heuristic)\n    - const: FEATURE_HINT_BONUS\n      value: 0.0\n      description: Feature bonus disabled (legacy phi/hipaa garbage removed)\n    - const: CARDS_TOPK\n      value: \"min(TOPK_SPARSE, 30)\"\n      description: Card-based retrieval budget for boosts\n    - const: FILENAME_BOOST_MULTIPLIERS\n      value: {basename_hit: 1.5, path_segment_hit: 1.2}\n      description: Post-rerank filename/path multipliers\n\n  confidence_gating:\n  ", "import {themes as prismThemes} from 'prism-react-renderer';\nimport type {Config} from '@docusaurus/types';\nimport type * as Preset from '@docusaurus/preset-classic';\n\nconst config: Config = {\n  title: 'AGRO Documentation',\n  tagline: 'Local-first RAG engine for codebases',\n  favicon: 'img/favicon.ico',\n\n  future: {\n    v4: true,\n  },\n\n  url: 'https://dmontgomery40.github.io',\n  baseUrl: '/agro-rag-engine/',\n\n  organizationName: 'DMontgomery40',\n  projectName: 'agro-rag-engine',\n\n  onBrokenLinks:", "  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/archive/feature_flags.py:1-38", "/Users/davidmontgomery/agro-rag-engine/ui/ALL_KNOBS.yaml:1-37", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-56", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6"], "source": "golden.json"}
{"query": "How do I create inline error messages with createInlineError?", "positive_text": "              `<a href=\"${url}\" target=\"_blank\" rel=\"noopener\" style=\"color: var(--link); text-decoration: none; padding: 4px 8px; background: var(--bg-elev1); border-radius: 4px; border: 1px solid var(--line);\">${label}</a>`\n            ).join('')}\n          </div>\n        </div>\n      `;\n    }\n\n    html += `</div>`;\n    return html;\n  }\n\n  /**\n   * Create a compact inline error message (for status lines)\n   */\n  function createInlineError(title, options = {}) {\n    const { links = [] } = optio", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/error-helpers.js:1-42", "negative_texts": ["  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "                            <div style=\"display: flex; justify-content: space-between; align-items: flex-start;\">\n                                <div style=\"flex: 1;\">\n                                    <div style=\"font-weight: 600; color: ${severityColor}; font-size: 13px;\">\n                                        ${severityEmoji} ${alertname}\n                                    </div>\n                                    <div style=\"font-size: 12px; color: var(--fg-muted); margin-top: 4px;\">\n", "should_index_file(path: str) -> bool:\n    p = pathlib.Path(path)\n    # 1) fast deny: extension must look like source\n    if p.suffix.lower() not in SOURCE_EXTS:\n        return False\n    # 2) glob excludes (vendor, caches, images, minified, etc.)\n    as_posix = p.as_posix()\n    for pat in _EXCLUDE_GLOBS:\n        if fnmatch.fnmatch(as_posix, pat):\n            return False\n    # 3) quick heuristic to skip huge/minified one-liners\n    try:\n        text = p.read_text(errors=\"ignore\")\n        if len(t", "            this.hideSuccess(input);\n        },\n\n        /**\n         * Clear validation state\n         * @param {HTMLElement} input - Input element\n         */\n        clearValidation(input) {\n            if (!input) return;\n\n            input.classList.remove('valid', 'invalid');\n            this.hideError(input);\n            this.hideSuccess(input);\n        },\n\n        /**\n         * Show error message\n         * @param {HTMLElement} input - Input element\n         * @param {string} message - "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/gui/js/alerts.js:1-34", "/Users/davidmontgomery/agro-rag-engine/indexer/index_repo.py:1-31", "/Users/davidmontgomery/agro-rag-engine/gui/js/ux-feedback.js:1-49"], "source": "golden.json"}
{"query": "What is createAlertError for alert-style error messages?", "positive_text": "    }\n\n    if (fixes.length > 0) {\n      text += `Quick fixes:\\n${fixes.map((f, i) => `${i + 1}. ${f}`).join('\\n')}\\n\\n`;\n    }\n\n    if (links.length > 0) {\n      text += `Learn more:\\n${links.map(([label, url]) => `• ${label}: ${url}`).join('\\n')}`;\n    }\n\n    return text;\n  }\n\n  /**\n   * Escape HTML to prevent XSS\n   */\n  function escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  // Export to window\n  window.ErrorHelp", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/error-helpers.js:1-34", "negative_texts": ["                }\n                // Reload thresholds to confirm\n                await loadAlertThresholds();\n            } else {\n                if (statusDiv) {\n                    statusDiv.textContent = `⚠️ ${result.message}`;\n                    statusDiv.style.color = 'var(--warn)';\n                }\n            }\n        } catch (e) {\n            const msg = window.ErrorHelpers ? window.ErrorHelpers.createAlertError('Failed to save alert thresholds', {\n                message: e.message", "                container.innerHTML = html;\n            }\n        } catch (e) {\n            const msg = window.ErrorHelpers ? window.ErrorHelpers.createAlertError('Failed to load alert history', {\n                message: e.message,\n                causes: [\n                    'Alert history database unavailable or corrupted',\n                    'AlertManager API endpoint not responding',\n                    'Network connection timeout or DNS failure',\n                    'Insufficient permiss", "                    statusDiv.style.color = 'var(--success)';\n                }\n                // Reload config to confirm\n                await loadWebhookConfig();\n            } else {\n                if (statusDiv) {\n                    statusDiv.textContent = `⚠️ ${result.message}`;\n                    statusDiv.style.color = 'var(--warn)';\n                }\n            }\n        } catch (e) {\n            const msg = window.ErrorHelpers ? window.ErrorHelpers.createAlertError('Failed to save", "# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/alerts.js:1-31", "/Users/davidmontgomery/agro-rag-engine/gui/js/alerts.js:1-34", "/Users/davidmontgomery/agro-rag-engine/gui/js/alerts.js:1-29", "/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16"], "source": "golden.json"}
{"query": "How does the tooltip system attach help icons to form fields?", "positive_text": "      icon.setAttribute('aria-label', `Help: ${name}`);\n      icon.textContent = '?';\n      icon.dataset.tooltipAttached = 'true';\n      const bubble = document.createElement('div');\n      bubble.className = 'tooltip-bubble';\n      bubble.setAttribute('role', 'tooltip');\n      bubble.innerHTML = html;\n      wrap.appendChild(icon);\n      wrap.appendChild(bubble);\n      label.appendChild(wrap);\n      attachTooltipListeners(icon, bubble, wrap);\n    });\n\n    // Also attach to manual tooltips in HTML", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20", "negative_texts": ["\n    // ---------------- Help Tooltips (delegated) ----------------\n    const addHelpTooltips = window.Tooltips?.attachTooltips || (() => {});\n\n    // ---------- Numbers formatting + per‑day converters ----------\n    // Number formatting functions - delegated to UiHelpers module\n    const getNum = window.UiHelpers?.getNum || ((id) => 0);\n    const setNum = window.UiHelpers?.setNum || (() => {});\n    const attachCommaFormatting = window.UiHelpers?.attachCommaFormatting || (() => {});\n    const wi", "            }\n        }\n    }\n\n    try { window.jumpToLine = jumpToLine; } catch {}\n\n    // Cards module auto-binds on DOMContentLoaded (see gui/js/cards.js)\n\n    // ---------------- Help Tooltips ----------------\n    function addHelpTooltips() {\n        const HELP = {\n            // Generation\n            GEN_MODEL: 'Primary inference model for generation (e.g., gpt-4o-mini or qwen3-coder:14b).',\n            OPENAI_API_KEY: 'API key for OpenAI-compatible endpoints (generation/embeddings).',\n   ", "      const bubble = wrap && wrap.querySelector('.tooltip-bubble');\n      if (!wrap || !bubble) return;\n      function show(){ bubble.classList.add('tooltip-visible'); }\n      function hide(){ bubble.classList.remove('tooltip-visible'); }\n      icon.addEventListener('mouseenter', show);\n      icon.addEventListener('mouseleave', hide);\n      icon.addEventListener('focus', show);\n      icon.addEventListener('blur', hide);\n      icon.addEventListener('click', (e)=>{ e.stopPropagation(); bubble.clas"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-26", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-26", "/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-16"], "source": "golden.json"}
{"query": "What is the buildTooltipMap function for configuration help?", "positive_text": "// GUI Tooltips: human-readable help + accurate links\n// Exposes window.Tooltips.{buildTooltipMap, attachTooltips}\n(function(){\n  function L(label, body, links, badges){\n    const linkHtml = (links||[]).map(([txt, href]) => `<a href=\"${href}\" target=\"_blank\" rel=\"noopener\">${txt}</a>`).join(' ');\n    const badgeHtml = (badges||[]).map(([txt, cls]) => `<span class=\"tt-badge ${cls||''}\">${txt}</span>`).join(' ');\n    const badgesBlock = badgeHtml ? `<div class=\"tt-badges\">${badgeHtml}</div>` : '';", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "negative_texts": ["  \"d78aee64\": [() => import(/* webpackChunkName: \"d78aee64\" */ \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\"), \"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-docs/default/p/agro-rag-engine-202.json\")],\n  \"dce658ce\": [() => import(/* webpackChunkName: \"dce658ce\" */ \"@site/docs/features/mcp.md\"), \"@site/docs/features/mcp.md\", require.resolveWeak(\"@site/docs/features/mcp.md\")]", "_load_env_file(env_path: Path) -> bool:\n    \"\"\"Load environment variables from .env if python-dotenv is installed.\n\n    This wrapper avoids conditional redefinition errors in static analysis.\n    \"\"\"\n    if _maybe_load_dotenv is not None:\n        return bool(_maybe_load_dotenv(env_path))\n    return False\n\n# Load environment\n_load_env_file(Path(__file__).resolve().parents[1] / \".env\")\n\nfrom server.langgraph_app import build_graph\nfrom common.config_loader import list_repos\nfrom rich.console impor", "            }\n        }\n    }\n\n    try { window.jumpToLine = jumpToLine; } catch {}\n\n    // Cards module auto-binds on DOMContentLoaded (see gui/js/cards.js)\n\n    // ---------------- Help Tooltips ----------------\n    function addHelpTooltips() {\n        const HELP = {\n            // Generation\n            GEN_MODEL: 'Primary inference model for generation (e.g., gpt-4o-mini or qwen3-coder:14b).',\n            OPENAI_API_KEY: 'API key for OpenAI-compatible endpoints (generation/embeddings).',\n   ", "// API Base URL Override - sets AGRO API endpoints\n(() => {\n  'use strict';\n\n  const BASE = window.location.origin + '/api';\n\n  function setupAPI() {\n    if (!window.CoreUtils) {\n      setTimeout(setupAPI, 100);\n      return;\n    }\n\n    try {\n      window.CoreUtils.API_BASE = BASE;\n\n      // Helper to build API URLs\n      window.CoreUtils.api = function(path) {\n        const p = String(path || '');\n        if (p.startsWith('/api/')) return BASE + p.slice(4);\n        if (p.startsWith('/')) return"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-6", "/Users/davidmontgomery/agro-rag-engine/cli/chat_cli.py:1-26", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-26", "/Users/davidmontgomery/agro-rag-engine/gui/api-base-override.js:1-37"], "source": "golden.json"}
{"query": "How do I troubleshoot Qdrant connection failures?", "positive_text": "from __future__ import annotations\n\n\"\"\"Qdrant recreate fallback wrappers to avoid hard failures on 404/exists.\"\"\"\nrecreate_collection(client, collection_name: str, vectors_config):\n    \"\"\"\n    Recreate a Qdrant collection with proper error handling.\n    Handles both old (flat) and new (nested) vector config formats.\n    \"\"\"\n    try:\n        # Check if collection exists first\n        try:\n            info = client.get_collection(collection_name)\n            print(f\"Collection '{collection_name}' ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/common/qdrant_utils.py:1-35", "negative_texts": ["#!/usr/bin/env bash\nset -euo pipefail\n\necho \"[status] MCP server:\"\nif pgrep -f \"server.mcp.server\" >/dev/null; then\n  echo \"  running (pid(s): $(pgrep -f \"server.mcp.server\" | paste -sd, -))\"\nelse\n  echo \"  not running\"\nfi\n\necho \"[status] Docker services:\"\ndocker ps --format 'table {{.Names}}\\t{{.Image}}\\t{{.Status}}'\n\necho \"[status] Qdrant collections:\"\ncurl -s http://127.0.0.1:6333/collections || echo \"(qdrant not reachable)\"\n\necho \"[status] Prometheus:\"\nif curl -s http://127.0.0.1:9090/-/read", "start_infra(rag_root: Path, progress: Progress, task_id) -> None:\n    progress.update(task_id, description='Starting Qdrant/Redis (docker compose)')\n    up = rag_root / 'scripts' / 'up.sh'\n    if not up.exists():\n        progress.update(task_id, description='Infra script not found (skipping)')\n        time.sleep(0.3)\n        return\n    try:\n        subprocess.check_call(['bash', str(up)])\n    except Exception as e:\n        console.print(f\"[yellow]Infra start skipped/failed:[/yellow] {e}\")\n    # ", "    exit 1\n  fi\n}\n\nensure_docker\n\necho \"[up] Starting infra (Qdrant + Redis + Prometheus + Grafana) ...\"\n(\n  cd \"$ROOT_DIR/infra\"\n  docker compose up -d\n)\n\necho \"[up] Verifying Qdrant ...\"\ncurl -s http://127.0.0.1:6333/collections >/dev/null || echo \"[warn] Qdrant not reachable yet\"\n\necho \"[up] Verifying Redis ...\"\nif docker ps --format '{{.Names}}' | grep -qi redis; then\n  docker exec \"$(docker ps --format '{{.Names}}' | grep -i redis | head -n1)\" redis-cli ping || true\nfi\n\necho \"[up] Verifying", "                    ['Docker Log Drivers', 'https://docs.docker.com/config/containers/logging/']\n                ]\n            }) : `Failed to download logs: ${e.message}`;\n            if (window.showStatus) window.showStatus(msg, 'error');\n            else alert(msg);\n        }\n    }\n\n    /**\n     * Check infrastructure service status\n     */\n    async function checkInfraStatus() {\n        // Check Qdrant\n        try {\n            const qdrantStatus = $('#qdrant-status');\n            const r = "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/status.sh:1-30", "/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-23", "/Users/davidmontgomery/agro-rag-engine/scripts/up.sh:1-37", "/Users/davidmontgomery/agro-rag-engine/gui/js/docker.js:1-32"], "source": "golden.json"}
{"query": "How do I fix retrieval returning no results?", "positive_text": "_load_bm25_map(idx_dir: str):\n    pid_json = os.path.join(idx_dir, 'bm25_point_ids.json')\n    if os.path.exists(pid_json):\n        m = json.load(open(pid_json))\n        return [m[str(i)] for i in range(len(m))]\n    map_path = os.path.join(idx_dir, 'chunk_ids.txt')\n    if os.path.exists(map_path):\n        with open(map_path, 'r', encoding='utf-8') as f:\n            ids = [line.strip() for line in f if line.strip()]\n        return ids\n    return None\n\n_load_cards_bm25(repo: str):\n    idx_dir = os.", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-22", "negative_texts": ["reranker_nohits() -> Dict[str, Any]:\n    \"\"\"Get queries that had no hits.\"\"\"\n    log_path = Path(os.getenv(\"AGRO_LOG_PATH\", \"data/logs/queries.jsonl\"))\n    \n    if not log_path.exists():\n        return {\"queries\": [], \"count\": 0}\n    \n    nohits = []\n    with log_path.open(\"r\") as f:\n        for line in f:\n            try:\n                evt = json.loads(line)\n                if evt.get(\"type\") != \"query\":\n                    continue\n                # Check if any retrieval results\n           ", "rerank_results(query: str, results: List[Dict], top_k: int = 10, trace: Any = None) -> List[Dict]:\n    if not results:\n        return []\n    # Read backend dynamically to respect GUI updates without server restart\n    backend = (os.getenv('RERANK_BACKEND', 'local') or 'local').lower()\n    print(f\"🔧 Reranker backend: {backend}\")  # DEBUG\n    if backend in ('none', 'off', 'disabled'):\n        for i, r in enumerate(results):\n            r['rerank_score'] = float(1.0 - (i * 0.01))\n        return res", "set_retrieval_quality(topk: int, hits: int, mrr: Optional[float] = None):\n    RETRIEVAL_HITS.labels(topk=str(int(topk))).set(max(0, int(hits)))\n    if mrr is not None:\n        v = max(0.0, min(1.0, float(mrr)))\n        RR_MRR.set(v)\nrecord_canary(provider: str, model: str, passed: bool, margin: Optional[float] = None, winner: Optional[str] = None):\n    CANARY_TOTAL.labels(provider=provider, model=model).inc()\n    if passed:\n        CANARY_PASS_TOTAL.labels(provider=provider, model=model).inc()\n ", "search(repo: str, question: str, top_k: int = 10) -> Dict[str, Any]:\n    \"\"\"Retrieve relevant code locations without generation.\"\"\"\n    allowed = set(list_repos())\n    if repo not in allowed:\n        return {\"error\": f\"invalid repo '{repo}', allowed={sorted(allowed)}\"}\n    docs = search_routed_multi(question, repo_override=repo, m=4, final_k=top_k)\n    results = [{\n        \"file_path\": d.get(\"file_path\", \"\"),\n        \"start_line\": d.get(\"start_line\", 0),\n        \"end_line\": d.get(\"end_line\", 0),"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-27", "/Users/davidmontgomery/agro-rag-engine/retrieval/rerank.py:1-188", "/Users/davidmontgomery/agro-rag-engine/server/metrics.py:1-16", "/Users/davidmontgomery/agro-rag-engine/server/mcp/http.py:1-18"], "source": "golden.json"}
{"query": "What causes reranking model load failures?", "positive_text": "\nimport math\nimport os\nfrom typing import List, Dict, Any\nfrom rerankers import Reranker  # type: ignore[import-untyped]\nfrom typing import Optional\n\ntry:\n    from dotenv import load_dotenv\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\n_HF_PIPE = None\n_RERANKER = None\n\n# Default local/HF cross-encoder model for reranking\n# Upgraded to MiniLM-L-12-v2 per request\nDEFAULT_MODEL = os.getenv('RERANKER_MODEL', 'cross-encoder/ms-marco-MiniLM-L-12-v2')\n# Note: Backend/model can change at r", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/rerank.py:1-31", "negative_texts": ["reranker_train(payload: Dict[str, Any] = {}) -> Dict[str, Any]:\n    \"\"\"Train reranker model.\"\"\"\n    global _RERANKER_STATUS\n    import threading\n    import subprocess\n    \n    if _RERANKER_STATUS[\"running\"]:\n        return {\"ok\": False, \"error\": \"A reranker task is already running\"}\n    \n    epochs = int(payload.get(\"epochs\", 2))\n    batch_size = int(payload.get(\"batch_size\", 16))\n    \n    def run_train():\n        global _RERANKER_STATUS\n        _RERANKER_STATUS = {\"running\": True, \"task\": \"trai", "main():\n    ap = argparse.ArgumentParser(description=\"Evaluate reranker performance\")\n    ap.add_argument(\"--triplets\", default=\"data/training/triplets.jsonl\",\n                    help=\"Path to triplets JSONL file\")\n    ap.add_argument(\"--model\", default=\"models/cross-encoder-agro\",\n                    help=\"Path to trained model\")\n    args = ap.parse_args()\n\n    triplets = load_triplets(Path(args.triplets))\n    \n    # Use last 10% as test set\n    cut = max(1, int(0.1 * len(triplets)))\n    test ", "get_reranker() -> CrossEncoder:\n    \"\"\"\n    Loads and (optionally) hot-reloads the CrossEncoder model.\n    Env:\n      AGRO_RERANKER_MODEL_PATH   (dir or HF id; default MiniLM)\n      AGRO_RERANKER_RELOAD_ON_CHANGE=1\n      AGRO_RERANKER_RELOAD_PERIOD_SEC (default 60)\n      AGRO_RERANKER_MAXLEN (default 512)\n    \"\"\"\n    global _RERANKER, _RERANKER_PATH, _RERANKER_MTIME, _LAST_CHECK\n    path = os.getenv(\"AGRO_RERANKER_MODEL_PATH\", \"cross-encoder/ms-marco-MiniLM-L-12-v2\")\n    need_reload = False\n\n   ", "reranker_rollback() -> Dict[str, Any]:\n    \"\"\"Rollback to baseline model.\"\"\"\n    import shutil\n    model_path = Path(os.getenv(\"AGRO_RERANKER_MODEL_PATH\", \"models/cross-encoder-agro\"))\n    backup_path = model_path.parent / (model_path.name + \".backup\")\n    \n    if not backup_path.exists():\n        return {\"ok\": False, \"error\": \"No backup model found\"}\n    \n    try:\n        # Backup current to .old\n        if model_path.exists():\n            old_path = model_path.parent / (model_path.name + \".old"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/app.py:1-69", "/Users/davidmontgomery/agro-rag-engine/scripts/eval_reranker.py:1-31", "/Users/davidmontgomery/agro-rag-engine/server/reranker.py:1-30", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-24"], "source": "golden.json"}
{"query": "How do I implement OAuth authentication in this codebase?", "positive_text": "    //     In summary, SEI payload data is context-specific and often applies to multiple frames within a specified time range. It is not frame-specific but provides supplemental information that helps maintain synchronization, enhance accessibility, or optimize video playback over a period of time within the video stream. The specific behavior may vary depending on the type of SEI message and the video codec being used.\n    sei?: Buffer;\n}\n\nexport class H264Repacketizer {\n    extraPackets = 0;\n", "positive_doc_id": "/Users/davidmontgomery//plugins/homekit/src/types/camera/h264-packetizer.ts:1-25", "negative_texts": ["\"\"\"\n# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or", "# Lint as: python3\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the", "# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or im", "# copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or impl"], "negative_doc_ids": ["/Users/davidmontgomery//plugins/rknn/src/rec_utils/operators.py:1-27", "/Users/davidmontgomery//plugins/tensorflow-lite/src/tflite/tflite_common.py:1-29", "/Users/davidmontgomery//plugins/rknn/src/det_utils/db_postprocess.py:1-28", "/Users/davidmontgomery//plugins/rknn/src/rec_utils/rec_postprocess.py:1-20"], "source_event_id": "5aba0819-ae59-458b-85e4-0a4a965d97d1"}
{"query": "hi there", "positive_text": "#!/usr/bin/env python3\n\"\"\"Train cross-encoder reranker on mined triplets.\n\nLoads triplets from data/training/triplets.jsonl and fine-tunes\na cross-encoder model for improved retrieval ranking.\n\"\"\"\nimport json\nimport random\nimport argparse\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom sentence_transformers import CrossEncoder, InputExample\nfrom torch.utils.data import DataLoader\nload_triplets(path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Load all triplets from JSONL fi", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/scripts/train_reranker.py:1-32", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"Evaluate reranker performance using MRR and Hit@K metrics.\n\nLoads triplets and computes ranking metrics for the trained model.\n\"\"\"\nimport json\nimport argparse\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom sentence_transformers import CrossEncoder\nimport numpy as np\nload_triplets(path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Load all triplets from JSONL file.\"\"\"\n    items = []\n    with path.open(\"r\", encoding=\"utf-8\") as f:\n        for line in f:\n       ", "#!/usr/bin/env python3\n\"\"\"Mine training triplets from query logs.\n\nReads data/logs/queries.jsonl and extracts positive/negative examples\nfor reranker training based on clicks, feedback, and ground truth.\n\"\"\"\nimport json\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict, Any, Optional\n\nLOG = Path(\"data/logs/queries.jsonl\")\nOUT = Path(\"data/training/triplets.jsonl\")\niter_events():\n    \"\"\"Yield all events from the query log.\"\"\"\n    if not LOG.exists():\n        return\n    with LOG.op", "\nrouter = APIRouter()\n\n@router.get(\"/api/reranker/info\")\ndef reranker_info():\n    # trigger lazy load / hot-reload check if needed\n    get_reranker()\n    return get_reranker_info()\nPY\n\n3) Mount the router in server/app.py (safe patch)\ncd \"$REPO\" && \\\npython - <<'PY'\nfrom pathlib import Path\np = Path(\"server/app.py\")\ns = p.read_text(encoding=\"utf-8\")\n\nimp = \"from server.reranker_info import router as reranker_info_router\"\ninc = \"app.include_router(reranker_info_router)\"\n\nchanged = False\nif imp no", "main():\n    \"\"\"Entry point.\"\"\"\n    # Check dependencies\n    try:\n        from rich.console import Console\n        from rich.markdown import Markdown\n        from rich.panel import Panel\n        from rich.prompt import Prompt\n    except ImportError:\n        print(\"Error: Missing 'rich' library. Install with: pip install rich\")\n        sys.exit(1)\n\n    # Get config from environment\n    repo = os.getenv('REPO', 'agro')\n    thread_id = os.getenv('THREAD_ID', 'cli-chat')\n\n    # Create and run chat\n  "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/eval_reranker.py:1-19", "/Users/davidmontgomery/agro-rag-engine/scripts/mine_triplets.py:1-27", "/Users/davidmontgomery/agro-rag-engine/internal_docs.md/reranker-phase2.md:1-39", "/Users/davidmontgomery/agro-rag-engine/chat_cli.py:1-24"], "source_event_id": "439ab438-64d6-4900-bdb1-d5804d185d97"}
{"query": "where is langgraph used in agro", "positive_text": "  \"citations\": [\n    \"auth/middleware.py:45-67\",\n    \"server/auth.py:120-145\"\n  ],\n  \"repo\": \"agro\",\n  \"confidence\": 0.78,\n  \"retrieval_count\": 5\n}\n```\n\n**Example:**\n```bash\ncurl \"http://127.0.0.1:8012/answer?q=Where%20is%20OAuth%20validated&repo=agro\"\n```\n\n---\n\n### GET `/search`\n\nRetrieval only (no generation). Returns ranked code chunks with rerank scores.\n\n**Query Parameters:**\n- `q` (string, required) - Search query\n- `repo` (string, optional) - Repository name\n- `top_k` (integer, optional) ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/docs/API_REFERENCE.md:1-60", "negative_texts": ["# Claude Code Alone vs Claude Code + RAG\n\n![Evals](../assets/evals.png)\n\n**Bottom line: RAG saves 91% tokens. That means 11x more queries before hitting your Claude rate limits.**\n\n**📊 [Contributing benchmarks](CONTRIBUTING.md)** - Help us test with different Claude models & tiers!\n\n---\n\n## The Comparison\n\n**Date:** 2025-10-08\n**Query:** \"Where is OAuth processed in this repo, and which plugins must validate with it?\" (large repo of mine, thought it was decent baseline quesstion)\n**Claude:** Son", "  | <code>How do I implement OAuth authentication in this codebase?</code> | <code># copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.<br>#<br># Licensed under the Apache License, Version 2.0 (the \"License\");<br># you may not use this file except in compliance with the License.<br># You may obtain a copy of the License at<br>#<br>#    http://www.apache.org/licenses/LICENSE-2.0<br>#<br># Unless required by applicable law or agreed to in writing, software<br># distributed under the Lice", "- Secure your proxy with IP allowlists or auth if exposing publicly.\n\n", "    const headers = token ? { Authorization: `Bearer ${token}` } : {};\n    const r = await fetch(u.toString(), { headers });\n    const data = await r.json();\n    res.json(data);\n  } catch (e) {\n    res.status(500).json({ error: String(e) });\n  }\n});\n\n// SSE proxy for streaming answer\napp.get('/mcp/answer_stream', async (req, res) => {\n  try {\n    const { q, repo, token } = req.query;\n    const u = new URL('/answer_stream', RAG_API_URL);\n    if (q) u.searchParams.set('q', q);\n    if (repo) u.sear"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/docs/PERFORMANCE_AND_COST.md:1-31", "/Users/davidmontgomery/agro-rag-engine/models/cross-encoder-agro/README.md:1-3", "/Users/davidmontgomery/agro-rag-engine/docs/REMOTE_MCP.md:1-3", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-36"], "source_event_id": "2d3820ca-629b-4e16-ad33-b3b57264f43d"}
{"query": "how do i setup the and mcp server through http?", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-16", "negative_texts": ["main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "            console.log('[VSCode] URL copied to clipboard (fallback)');\n            showNotification('VS Code URL copied to clipboard');\n        } catch (e) {\n            console.error('[VSCode] Fallback copy failed:', e);\n            showNotification(`VS Code URL: ${url}`);\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n\n    /**\n     * Restart VS Code server\n     */\n    async function restart() {\n        console.log('[VSCode] Restarting editor...');\n       ", "      OUT_DIR_BASE: L('Out Dir Base', 'Where retrieval looks for indices (chunks.jsonl, bm25_index/). Use ./out.noindex-shared for one index across branches so MCP and local tools stay in sync. Symptom of mismatch: rag_search returns 0 results.', [\n        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L('RAG Out Base', 'Optional override for Out Dir Base; used by internal loaders if provided.'),\n      MCP_HTTP_HOST: L('MCP HTTP Host", "#!/usr/bin/env python3\n\"\"\"Debug GUI by opening it and printing console errors\"\"\"\nfrom __future__ import annotations\nimport time\nfrom playwright.sync_api import sync_playwright\n\nBASE = \"http://127.0.0.1:8012\"\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-8"], "source_event_id": "1fc2b49e-4876-4a67-9344-3b1dac2c9c8c"}
{"query": "how do i use the cli tool for agro?", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-16", "negative_texts": ["main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "            console.log('[VSCode] URL copied to clipboard (fallback)');\n            showNotification('VS Code URL copied to clipboard');\n        } catch (e) {\n            console.error('[VSCode] Fallback copy failed:', e);\n            showNotification(`VS Code URL: ${url}`);\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n\n    /**\n     * Restart VS Code server\n     */\n    async function restart() {\n        console.log('[VSCode] Restarting editor...');\n       ", "      OUT_DIR_BASE: L('Out Dir Base', 'Where retrieval looks for indices (chunks.jsonl, bm25_index/). Use ./out.noindex-shared for one index across branches so MCP and local tools stay in sync. Symptom of mismatch: rag_search returns 0 results.', [\n        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L('RAG Out Base', 'Optional override for Out Dir Base; used by internal loaders if provided.'),\n      MCP_HTTP_HOST: L('MCP HTTP Host", "#!/usr/bin/env python3\n\"\"\"Debug GUI by opening it and printing console errors\"\"\"\nfrom __future__ import annotations\nimport time\nfrom playwright.sync_api import sync_playwright\n\nBASE = \"http://127.0.0.1:8012\"\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-8"], "source_event_id": "fe7c303a-7217-4e9e-afc0-392e149aa4e5"}
{"query": "feedback is IN CHAT interface now : \n\n\"\"\"\n### Conclusion\n\nBy porting the feedback mechanism from the /answer endpoint to the chat interface, you can enhance user interaction and ensure that feedback contributes to model improvements. This integration will require modifications to the chat message handling and feedback capturing logic, but it will lead to a more cohesive system.\n\n### References\n- **Chat Interface**: /Users/davidmontgomery/agro-rag-engine/gui/js/chat.js:1-128\n- **Feedback Mechanism**: /Users/davidmontgomery/agro-rag-engine/server/feedback.py:1-13`\n                \n👍 Helpful\n👎 Not Helpful\nor rate:\n⭐\n⭐⭐\n⭐⭐⭐\n⭐⭐⭐⭐\n⭐⭐⭐⭐⭐\nWhat was missing? (optional)\n✓ Feedback recorded: 2 stars\n💡 This helps train search quality (only the reranker, not the chat model)\n\n\"\"\"\n\nwhat i'm talking about is this statement: \n💡 This helps train search quality (only the reranker, not the chat model)\n\n\nwhy can't the /chat endpoint be as smart as teh /answer endpoint??", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-16", "negative_texts": ["main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "            console.log('[VSCode] URL copied to clipboard (fallback)');\n            showNotification('VS Code URL copied to clipboard');\n        } catch (e) {\n            console.error('[VSCode] Fallback copy failed:', e);\n            showNotification(`VS Code URL: ${url}`);\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n\n    /**\n     * Restart VS Code server\n     */\n    async function restart() {\n        console.log('[VSCode] Restarting editor...');\n       ", "      OUT_DIR_BASE: L('Out Dir Base', 'Where retrieval looks for indices (chunks.jsonl, bm25_index/). Use ./out.noindex-shared for one index across branches so MCP and local tools stay in sync. Symptom of mismatch: rag_search returns 0 results.', [\n        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L('RAG Out Base', 'Optional override for Out Dir Base; used by internal loaders if provided.'),\n      MCP_HTTP_HOST: L('MCP HTTP Host", "#!/usr/bin/env python3\n\"\"\"Debug GUI by opening it and printing console errors\"\"\"\nfrom __future__ import annotations\nimport time\nfrom playwright.sync_api import sync_playwright\n\nBASE = \"http://127.0.0.1:8012\"\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-8"], "source_event_id": "6ee191fa-49d0-4d3c-9e9c-b082fa1976b5"}
{"query": "Where are RAG subtabs defined?", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-16", "negative_texts": ["main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "            console.log('[VSCode] URL copied to clipboard (fallback)');\n            showNotification('VS Code URL copied to clipboard');\n        } catch (e) {\n            console.error('[VSCode] Fallback copy failed:', e);\n            showNotification(`VS Code URL: ${url}`);\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n\n    /**\n     * Restart VS Code server\n     */\n    async function restart() {\n        console.log('[VSCode] Restarting editor...');\n       ", "      OUT_DIR_BASE: L('Out Dir Base', 'Where retrieval looks for indices (chunks.jsonl, bm25_index/). Use ./out.noindex-shared for one index across branches so MCP and local tools stay in sync. Symptom of mismatch: rag_search returns 0 results.', [\n        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L('RAG Out Base', 'Optional override for Out Dir Base; used by internal loaders if provided.'),\n      MCP_HTTP_HOST: L('MCP HTTP Host", "#!/usr/bin/env python3\n\"\"\"Debug GUI by opening it and printing console errors\"\"\"\nfrom __future__ import annotations\nimport time\nfrom playwright.sync_api import sync_playwright\n\nBASE = \"http://127.0.0.1:8012\"\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-8"], "source_event_id": "2997aabd-04d0-4124-a176-93376963e1d4"}
{"query": "whre is the .json file store that holds the grafana dashboard stuff", "positive_text": "# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16", "negative_texts": ["  \"content---agro-rag-engine-operations-troubleshooting-2-db-f82\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-operations-troubleshooting-2-db-f82\" */ \"@site/docs/operations/troubleshooting.md\"), \"@site/docs/operations/troubleshooting.md\", require.resolveWeak(\"@site/docs/operations/troubleshooting.md\")],\n  \"plugin---agro-rag-engine-aba-746\": [() => import(/* webpackChunkName: \"plugin---agro-rag-engine-aba-746\" */ \"@generated/docusaurus-plugin-content-docs/default/__plugin.json\"", "    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/routes',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/routes', '8e6'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/markdown-page',\n    component: ComponentCreator('/agro-rag-engine/markdown-page', '699'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/search',\n    component: ComponentCreator('/agro-rag-engine/search', 'd97'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/',\n    c", "  \"plugin---agro-rag-engine-markdown-pagea-74-4ee\": [() => import(/* webpackChunkName: \"plugin---agro-rag-engine-markdown-pagea-74-4ee\" */ \"@generated/docusaurus-plugin-content-pages/default/__plugin.json\"), \"@generated/docusaurus-plugin-content-pages/default/__plugin.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-pages/default/__plugin.json\")],\n  \"plugin---agro-rag-engine-searchc-14-63e\": [() => import(/* webpackChunkName: \"plugin---agro-rag-engine-searchc-14-63e\" */ \"@generat", "\"\"\"Path configuration for AGRO RAG Engine.\"\"\"\nfrom pathlib import Path\nimport os\n\nrepo_root() -> Path:\n    \"\"\"Return the root directory of the repository.\"\"\"\n    return Path(__file__).resolve().parent\n\ndata_dir() -> Path:\n    \"\"\"Return the data directory for storing index artifacts.\"\"\"\n    root = repo_root()\n    data = root / \"data\"\n    data.mkdir(exist_ok=True)\n    return data\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-4", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-43", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-3", "/Users/davidmontgomery/agro-rag-engine/path_config.py:1-15"], "source_event_id": "a21ece7a-640a-4adf-8661-41980d3e7fb9"}
