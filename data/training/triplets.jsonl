{"query": "How do I implement OAuth authentication in this codebase?", "positive_text": "    //     In summary, SEI payload data is context-specific and often applies to multiple frames within a specified time range. It is not frame-specific but provides supplemental information that helps maintain synchronization, enhance accessibility, or optimize video playback over a period of time within the video stream. The specific behavior may vary depending on the type of SEI message and the video codec being used.\n    sei?: Buffer;\n}\n\nexport class H264Repacketizer {\n    extraPackets = 0;\n", "positive_doc_id": "/Users/davidmontgomery//plugins/homekit/src/types/camera/h264-packetizer.ts:1-25", "negative_texts": ["\"\"\"\n# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or", "# Lint as: python3\n# Copyright 2019 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the", "# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or im", "# copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or impl"], "negative_doc_ids": ["/Users/davidmontgomery//plugins/rknn/src/rec_utils/operators.py:1-27", "/Users/davidmontgomery//plugins/tensorflow-lite/src/tflite/tflite_common.py:1-29", "/Users/davidmontgomery//plugins/rknn/src/det_utils/db_postprocess.py:1-28", "/Users/davidmontgomery//plugins/rknn/src/rec_utils/rec_postprocess.py:1-20"], "source_event_id": "5aba0819-ae59-458b-85e4-0a4a965d97d1"}
{"query": "hi there", "positive_text": "#!/usr/bin/env python3\n\"\"\"Train cross-encoder reranker on mined triplets.\n\nLoads triplets from data/training/triplets.jsonl and fine-tunes\na cross-encoder model for improved retrieval ranking.\n\"\"\"\nimport json\nimport random\nimport argparse\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom sentence_transformers import CrossEncoder, InputExample\nfrom torch.utils.data import DataLoader\nload_triplets(path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Load all triplets from JSONL fi", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/scripts/train_reranker.py:1-32", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"Evaluate reranker performance using MRR and Hit@K metrics.\n\nLoads triplets and computes ranking metrics for the trained model.\n\"\"\"\nimport json\nimport argparse\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom sentence_transformers import CrossEncoder\nimport numpy as np\nload_triplets(path: Path) -> List[Dict[str, Any]]:\n    \"\"\"Load all triplets from JSONL file.\"\"\"\n    items = []\n    with path.open(\"r\", encoding=\"utf-8\") as f:\n        for line in f:\n       ", "#!/usr/bin/env python3\n\"\"\"Mine training triplets from query logs.\n\nReads data/logs/queries.jsonl and extracts positive/negative examples\nfor reranker training based on clicks, feedback, and ground truth.\n\"\"\"\nimport json\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict, Any, Optional\n\nLOG = Path(\"data/logs/queries.jsonl\")\nOUT = Path(\"data/training/triplets.jsonl\")\niter_events():\n    \"\"\"Yield all events from the query log.\"\"\"\n    if not LOG.exists():\n        return\n    with LOG.op", "\nrouter = APIRouter()\n\n@router.get(\"/api/reranker/info\")\ndef reranker_info():\n    # trigger lazy load / hot-reload check if needed\n    get_reranker()\n    return get_reranker_info()\nPY\n\n3) Mount the router in server/app.py (safe patch)\ncd \"$REPO\" && \\\npython - <<'PY'\nfrom pathlib import Path\np = Path(\"server/app.py\")\ns = p.read_text(encoding=\"utf-8\")\n\nimp = \"from server.reranker_info import router as reranker_info_router\"\ninc = \"app.include_router(reranker_info_router)\"\n\nchanged = False\nif imp no", "main():\n    \"\"\"Entry point.\"\"\"\n    # Check dependencies\n    try:\n        from rich.console import Console\n        from rich.markdown import Markdown\n        from rich.panel import Panel\n        from rich.prompt import Prompt\n    except ImportError:\n        print(\"Error: Missing 'rich' library. Install with: pip install rich\")\n        sys.exit(1)\n\n    # Get config from environment\n    repo = os.getenv('REPO', 'agro')\n    thread_id = os.getenv('THREAD_ID', 'cli-chat')\n\n    # Create and run chat\n  "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/eval_reranker.py:1-19", "/Users/davidmontgomery/agro-rag-engine/scripts/mine_triplets.py:1-27", "/Users/davidmontgomery/agro-rag-engine/internal_docs.md/reranker-phase2.md:1-39", "/Users/davidmontgomery/agro-rag-engine/chat_cli.py:1-24"], "source_event_id": "439ab438-64d6-4900-bdb1-d5804d185d97"}
{"query": "where is langgraph used in agro", "positive_text": "  \"citations\": [\n    \"auth/middleware.py:45-67\",\n    \"server/auth.py:120-145\"\n  ],\n  \"repo\": \"agro\",\n  \"confidence\": 0.78,\n  \"retrieval_count\": 5\n}\n```\n\n**Example:**\n```bash\ncurl \"http://127.0.0.1:8012/answer?q=Where%20is%20OAuth%20validated&repo=agro\"\n```\n\n---\n\n### GET `/search`\n\nRetrieval only (no generation). Returns ranked code chunks with rerank scores.\n\n**Query Parameters:**\n- `q` (string, required) - Search query\n- `repo` (string, optional) - Repository name\n- `top_k` (integer, optional) ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/docs/API_REFERENCE.md:1-60", "negative_texts": ["# Claude Code Alone vs Claude Code + RAG\n\n![Evals](../assets/evals.png)\n\n**Bottom line: RAG saves 91% tokens. That means 11x more queries before hitting your Claude rate limits.**\n\n**📊 [Contributing benchmarks](CONTRIBUTING.md)** - Help us test with different Claude models & tiers!\n\n---\n\n## The Comparison\n\n**Date:** 2025-10-08\n**Query:** \"Where is OAuth processed in this repo, and which plugins must validate with it?\" (large repo of mine, thought it was decent baseline quesstion)\n**Claude:** Son", "  | <code>How do I implement OAuth authentication in this codebase?</code> | <code># copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.<br>#<br># Licensed under the Apache License, Version 2.0 (the \"License\");<br># you may not use this file except in compliance with the License.<br># You may obtain a copy of the License at<br>#<br>#    http://www.apache.org/licenses/LICENSE-2.0<br>#<br># Unless required by applicable law or agreed to in writing, software<br># distributed under the Lice", "- Secure your proxy with IP allowlists or auth if exposing publicly.\n\n", "    const headers = token ? { Authorization: `Bearer ${token}` } : {};\n    const r = await fetch(u.toString(), { headers });\n    const data = await r.json();\n    res.json(data);\n  } catch (e) {\n    res.status(500).json({ error: String(e) });\n  }\n});\n\n// SSE proxy for streaming answer\napp.get('/mcp/answer_stream', async (req, res) => {\n  try {\n    const { q, repo, token } = req.query;\n    const u = new URL('/answer_stream', RAG_API_URL);\n    if (q) u.searchParams.set('q', q);\n    if (repo) u.sear"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/docs/PERFORMANCE_AND_COST.md:1-31", "/Users/davidmontgomery/agro-rag-engine/models/cross-encoder-agro/README.md:1-3", "/Users/davidmontgomery/agro-rag-engine/docs/REMOTE_MCP.md:1-3", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-36"], "source_event_id": "2d3820ca-629b-4e16-ad33-b3b57264f43d"}
{"query": "how do i setup the and mcp server through http?", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-16", "negative_texts": ["main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "            console.log('[VSCode] URL copied to clipboard (fallback)');\n            showNotification('VS Code URL copied to clipboard');\n        } catch (e) {\n            console.error('[VSCode] Fallback copy failed:', e);\n            showNotification(`VS Code URL: ${url}`);\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n\n    /**\n     * Restart VS Code server\n     */\n    async function restart() {\n        console.log('[VSCode] Restarting editor...');\n       ", "      OUT_DIR_BASE: L('Out Dir Base', 'Where retrieval looks for indices (chunks.jsonl, bm25_index/). Use ./out.noindex-shared for one index across branches so MCP and local tools stay in sync. Symptom of mismatch: rag_search returns 0 results.', [\n        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L('RAG Out Base', 'Optional override for Out Dir Base; used by internal loaders if provided.'),\n      MCP_HTTP_HOST: L('MCP HTTP Host", "#!/usr/bin/env python3\n\"\"\"Debug GUI by opening it and printing console errors\"\"\"\nfrom __future__ import annotations\nimport time\nfrom playwright.sync_api import sync_playwright\n\nBASE = \"http://127.0.0.1:8012\"\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-8"], "source_event_id": "1fc2b49e-4876-4a67-9344-3b1dac2c9c8c"}
{"query": "how do i use the cli tool for agro?", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-16", "negative_texts": ["main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "            console.log('[VSCode] URL copied to clipboard (fallback)');\n            showNotification('VS Code URL copied to clipboard');\n        } catch (e) {\n            console.error('[VSCode] Fallback copy failed:', e);\n            showNotification(`VS Code URL: ${url}`);\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n\n    /**\n     * Restart VS Code server\n     */\n    async function restart() {\n        console.log('[VSCode] Restarting editor...');\n       ", "      OUT_DIR_BASE: L('Out Dir Base', 'Where retrieval looks for indices (chunks.jsonl, bm25_index/). Use ./out.noindex-shared for one index across branches so MCP and local tools stay in sync. Symptom of mismatch: rag_search returns 0 results.', [\n        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L('RAG Out Base', 'Optional override for Out Dir Base; used by internal loaders if provided.'),\n      MCP_HTTP_HOST: L('MCP HTTP Host", "#!/usr/bin/env python3\n\"\"\"Debug GUI by opening it and printing console errors\"\"\"\nfrom __future__ import annotations\nimport time\nfrom playwright.sync_api import sync_playwright\n\nBASE = \"http://127.0.0.1:8012\"\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-8"], "source_event_id": "fe7c303a-7217-4e9e-afc0-392e149aa4e5"}
{"query": "feedback is IN CHAT interface now : \n\n\"\"\"\n### Conclusion\n\nBy porting the feedback mechanism from the /answer endpoint to the chat interface, you can enhance user interaction and ensure that feedback contributes to model improvements. This integration will require modifications to the chat message handling and feedback capturing logic, but it will lead to a more cohesive system.\n\n### References\n- **Chat Interface**: /Users/davidmontgomery/agro-rag-engine/gui/js/chat.js:1-128\n- **Feedback Mechanism**: /Users/davidmontgomery/agro-rag-engine/server/feedback.py:1-13`\n                \n👍 Helpful\n👎 Not Helpful\nor rate:\n⭐\n⭐⭐\n⭐⭐⭐\n⭐⭐⭐⭐\n⭐⭐⭐⭐⭐\nWhat was missing? (optional)\n✓ Feedback recorded: 2 stars\n💡 This helps train search quality (only the reranker, not the chat model)\n\n\"\"\"\n\nwhat i'm talking about is this statement: \n💡 This helps train search quality (only the reranker, not the chat model)\n\n\nwhy can't the /chat endpoint be as smart as teh /answer endpoint??", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-16", "negative_texts": ["main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "            console.log('[VSCode] URL copied to clipboard (fallback)');\n            showNotification('VS Code URL copied to clipboard');\n        } catch (e) {\n            console.error('[VSCode] Fallback copy failed:', e);\n            showNotification(`VS Code URL: ${url}`);\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n\n    /**\n     * Restart VS Code server\n     */\n    async function restart() {\n        console.log('[VSCode] Restarting editor...');\n       ", "      OUT_DIR_BASE: L('Out Dir Base', 'Where retrieval looks for indices (chunks.jsonl, bm25_index/). Use ./out.noindex-shared for one index across branches so MCP and local tools stay in sync. Symptom of mismatch: rag_search returns 0 results.', [\n        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L('RAG Out Base', 'Optional override for Out Dir Base; used by internal loaders if provided.'),\n      MCP_HTTP_HOST: L('MCP HTTP Host", "#!/usr/bin/env python3\n\"\"\"Debug GUI by opening it and printing console errors\"\"\"\nfrom __future__ import annotations\nimport time\nfrom playwright.sync_api import sync_playwright\n\nBASE = \"http://127.0.0.1:8012\"\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-8"], "source_event_id": "6ee191fa-49d0-4d3c-9e9c-b082fa1976b5"}
{"query": "Where are RAG subtabs defined?", "positive_text": "      ]),\n      REDIS_URL: L('Redis URL', 'Connection string for Redis, used for LangGraph checkpoints and optional session memory. The graph runs even if Redis is down (stateless mode).', [\n        ['Redis Docs', 'https://redis.io/docs/latest/']\n      ]),\n      REPO: L('Active Repository', 'Logical repository name for routing and indexing. MCP and CLI use this to scope retrieval.', [\n        ['Docs: MCP Quickstart', '/docs/QUICKSTART_MCP.md']\n      ]),\n      COLLECTION_NAME: L('Collection Name'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-16", "negative_texts": ["main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "            console.log('[VSCode] URL copied to clipboard (fallback)');\n            showNotification('VS Code URL copied to clipboard');\n        } catch (e) {\n            console.error('[VSCode] Fallback copy failed:', e);\n            showNotification(`VS Code URL: ${url}`);\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n\n    /**\n     * Restart VS Code server\n     */\n    async function restart() {\n        console.log('[VSCode] Restarting editor...');\n       ", "      OUT_DIR_BASE: L('Out Dir Base', 'Where retrieval looks for indices (chunks.jsonl, bm25_index/). Use ./out.noindex-shared for one index across branches so MCP and local tools stay in sync. Symptom of mismatch: rag_search returns 0 results.', [\n        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L('RAG Out Base', 'Optional override for Out Dir Base; used by internal loaders if provided.'),\n      MCP_HTTP_HOST: L('MCP HTTP Host", "#!/usr/bin/env python3\n\"\"\"Debug GUI by opening it and printing console errors\"\"\"\nfrom __future__ import annotations\nimport time\nfrom playwright.sync_api import sync_playwright\n\nBASE = \"http://127.0.0.1:8012\"\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-47", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_debug.py:1-8"], "source_event_id": "2997aabd-04d0-4124-a176-93376963e1d4"}
{"query": "whre is the .json file store that holds the grafana dashboard stuff", "positive_text": "# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16", "negative_texts": ["  \"content---agro-rag-engine-operations-troubleshooting-2-db-f82\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-operations-troubleshooting-2-db-f82\" */ \"@site/docs/operations/troubleshooting.md\"), \"@site/docs/operations/troubleshooting.md\", require.resolveWeak(\"@site/docs/operations/troubleshooting.md\")],\n  \"plugin---agro-rag-engine-aba-746\": [() => import(/* webpackChunkName: \"plugin---agro-rag-engine-aba-746\" */ \"@generated/docusaurus-plugin-content-docs/default/__plugin.json\"", "    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/routes',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/routes', '8e6'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/markdown-page',\n    component: ComponentCreator('/agro-rag-engine/markdown-page', '699'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/search',\n    component: ComponentCreator('/agro-rag-engine/search', 'd97'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/',\n    c", "  \"plugin---agro-rag-engine-markdown-pagea-74-4ee\": [() => import(/* webpackChunkName: \"plugin---agro-rag-engine-markdown-pagea-74-4ee\" */ \"@generated/docusaurus-plugin-content-pages/default/__plugin.json\"), \"@generated/docusaurus-plugin-content-pages/default/__plugin.json\", require.resolveWeak(\"@generated/docusaurus-plugin-content-pages/default/__plugin.json\")],\n  \"plugin---agro-rag-engine-searchc-14-63e\": [() => import(/* webpackChunkName: \"plugin---agro-rag-engine-searchc-14-63e\" */ \"@generat", "\"\"\"Path configuration for AGRO RAG Engine.\"\"\"\nfrom pathlib import Path\nimport os\n\nrepo_root() -> Path:\n    \"\"\"Return the root directory of the repository.\"\"\"\n    return Path(__file__).resolve().parent\n\ndata_dir() -> Path:\n    \"\"\"Return the data directory for storing index artifacts.\"\"\"\n    root = repo_root()\n    data = root / \"data\"\n    data.mkdir(exist_ok=True)\n    return data\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-4", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-43", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-3", "/Users/davidmontgomery/agro-rag-engine/path_config.py:1-15"], "source_event_id": "a21ece7a-640a-4adf-8661-41980d3e7fb9"}
{"query": "in the gui, under the tab 'rag', subtab 'learning reranker', a terminal drops down when you hit the button 'mine triplets', where do those logs come from?", "positive_text": "#!/usr/bin/env python3\n\"\"\"Mine training triplets from query logs.\n\nReads data/logs/queries.jsonl and extracts positive/negative examples\nfor reranker training based on clicks, feedback, and ground truth.\n\"\"\"\nimport json\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict, Any, Optional, Set\n\n# Resolve repo root (parent of this scripts/ directory)\nBASE = Path(__file__).resolve().parents[1]\n\n# Respect AGRO_LOG_PATH if provided (absolute or relative to repo root)\n_log_env = ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/scripts/mine_triplets.py:1-27", "negative_texts": ["#!/usr/bin/env python3\nfrom __future__ import annotations\nfrom fastapi.testclient import TestClient\nimport io\nfrom pathlib import Path\nimport json, sys\nROOT = Path(__file__).resolve().parents[1]\nsys.path.insert(0, str(ROOT))\n# Provide a lightweight stub for rerankers to avoid import-time type errors\nimport types as _types\nif 'rerankers' not in sys.modules:\n    m = _types.ModuleType('rerankers')\n    class Reranker:  # minimal placeholder\n        def __init__(self, *a, **k):\n            pass\n    m", "            COLLECTION_SUFFIX: 'Optional suffix to group collections in Qdrant.',\n            COLLECTION_NAME: 'Override Qdrant collection name.',\n            REPO_PATH: 'Fallback path when repos.json is absent.',\n            REPO_ROOT: 'Override project root. Affects GUI/docs/files mounts.',\n            FILES_ROOT: 'Root directory served at /files.',\n            GUI_DIR: 'Directory of GUI assets served at /gui.',\n            DOCS_DIR: 'Directory of docs served at /docs.',\n            DATA_DIR: ", "#!/usr/bin/env python3\nfrom __future__ import annotations\nimport os, time, json, tempfile, signal, subprocess\nfrom pathlib import Path\nfrom playwright.sync_api import sync_playwright, expect\n\nROOT = Path(__file__).resolve().parents[1]\nBASE = \"http://127.0.0.1:8012\"\n\nwait_health(timeout=20):\n    import urllib.request, urllib.error\n    start = time.time()\n    while time.time() - start < timeout:\n        try:\n            with urllib.request.urlopen(f\"{BASE}/health\", timeout=2) as resp:\n            ", "#!/usr/bin/env python3\n\"\"\"Mine training triplets from golden.json test questions.\n\nRuns each golden question through retrieval and generates triplets\nbased on expect_paths matches.\n\"\"\"\nimport json\nimport sys\nfrom pathlib import Path\n\n# Add parent dir to path so we can import retrieval\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom retrieval.hybrid_search import search\n\n# Get repo root (scripts/ -> agro/)\nREPO_ROOT = Path(__file__).parent.parent\nGOLDEN = REPO_ROOT / \"data\" / \"golden."], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/test_backend.py:1-20", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-22", "/Users/davidmontgomery/agro-rag-engine/scripts/gui_smoke.py:1-22", "/Users/davidmontgomery/agro-rag-engine/scripts/mine_from_golden.py:1-20"], "source_event_id": "94cf33cc-3eca-467b-89fb-d484552a2f1c"}
