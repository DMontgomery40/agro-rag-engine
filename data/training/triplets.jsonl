{"query": "Where is the hybrid search implementation that combines BM25 and vector search?", "positive_text": "_provider_plugin_hint(fp: str, code: str) -> float:\n    fp = (fp or '').lower()\n    code = (code or '').lower()\n    keys = ['provider', 'providers', 'integration', 'adapter', 'webhook', 'pushover', 'apprise', 'hubspot']\n    return 0.06 if any(k in fp or k in code for k in keys) else 0.0\n\n_origin_bonus(origin: str, mode: str) -> float:\n    origin = (origin or '').lower()\n    mode = (mode or 'prefer_first_party').lower()\n    if mode == 'prefer_first_party':\n        return 0.06 if origin == 'first_", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-18", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "import os\nfrom retrieval.hybrid_search import search_routed_multi\n\nTESTS = [\n    ('project','ai studio','easy'),\n    ('project','TBAC trait system','easy'),\n    ('project','plugin builder','easy'),\n    ('project','webhook verification','easy'),\n    ('project','three lane gateway','medium'),\n    ('project','plugin sandbox isolation','medium'),\n    ('project','provider adapter traits','medium'),\n    ('project','canonical event normalization','medium'),\n    ('project','how does TBAC prevent PHI acc", "          ['Hybrid Search Benefits', 'https://www.pinecone.io/learn/hybrid-search-intro/'],\n          ['Fast Indexing Guide', '/docs/INDEXING.md#bm25-only']\n        ],\n        [['Much faster', 'info'], ['Keyword-only', 'warn'], ['No semantic search', 'warn']]\n      ),\n      VENDOR_MODE: L(\n        'Vendor Mode',\n        'Controls scoring preference for your code vs third-party library code during reranking. \"prefer_first_party\" (recommended) boosts your app code (+0.06) and penalizes node_module", "      description: 'Local/HF reranker model used when backend = local or hf (e.g., BAAI/bge-reranker-v2-m3).',\n      category: 'Retrieval',\n      icon: '⚙️'\n    },\n    MQ_REWRITES: {\n      name: 'Multi-Query Expansion',\n      description: 'Number of query variations generated to cast a wider search net. More rewrites = better recall but higher cost.',\n      category: 'Search Strategy',\n      icon: '🎯',\n      valueExplainer: (v) => v + ' variations per query'\n    },\n    TOPK_SPARSE: {\n      name:"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/scripts/benchmark_improvements.py:1-33", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19", "/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-29"], "source": "golden.json"}
{"query": "How does the indexing pipeline work? Where is the main indexer?", "positive_text": "main() -> None:\n    files = collect_files(BASES)\n    print(f'Discovered {len(files)} source files.')\n    all_chunks: List[Dict] = []\n    for fp in files:\n        if not should_index_file(fp):\n            continue\n        lang = lang_from_path(fp)\n        if not lang:\n            continue\n        try:\n            with open(fp, 'r', encoding='utf-8', errors='ignore') as f:\n                src = f.read()\n        except Exception:\n            continue\n        ch = chunk_code(src, fp, lang, target=90", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/indexer/index_repo.py:1-205", "negative_texts": ["main() -> None:\n    os.makedirs(BASE, exist_ok=True)\n    \n    # Add domain context based on repo\n    domain_context = \"\"\n    if REPO == '':\n        domain_context = \"\\nDOMAIN CONTEXT: This is  - a smart home automation platform. Focus on:\\n- Plugin architecture (device plugins, automation plugins)\\n- Camera/streaming functionality (RTSP, ONVIF, FFmpeg)\\n- HomeKit integration and device bridging\\n- Motion detection and AI analysis\\n- Webhook notifications and automation rules\\n- Device management", "\"\"\"Indexer package (index building and cards).\n\nRoot-level shims keep backward compatibility for commands like\n`python index_repo.py` while the canonical modules live here.\n\"\"\"\n\n", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "    }catch(_e){}\n  }\n\n  async function startIndexing(){\n    try{\n      if (window.showStatus) window.showStatus('Starting indexer...', 'loading');\n      await fetch(api('/api/index/start'), { method:'POST' });\n      if (indexPoll) clearInterval(indexPoll);\n      indexPoll = setInterval(pollIndexStatus, 800);\n      await pollIndexStatus();\n    }catch(e){ if (window.showStatus) window.showStatus('Failed to start indexer: ' + e.message, 'error'); throw e; }\n  }\n\n  window.IndexStatus = { formatIndex"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/indexer/build_cards.py:1-68", "/Users/davidmontgomery/agro-rag-engine/indexer/__init__.py:1-7", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/gui/js/index_status.js:1-16"], "source": "golden.json"}
{"query": "Where is the FastAPI server and main API routes defined?", "positive_text": "get_prices():\n    prices_path = GUI_DIR / \"prices.json\"\n    data = _read_json(prices_path, _default_prices())\n    return JSONResponse(data)\n\n@app.post(\"/api/prices/upsert\")upsert_price(item: Dict[str, Any]) -> Dict[str, Any]:\n    prices_path = GUI_DIR / \"prices.json\"\n    data = _read_json(prices_path, {\"models\": []})\n    models: List[Dict[str, Any]] = list(data.get(\"models\", []))\n    key = (str(item.get(\"provider\")), str(item.get(\"model\")))\n    idx = next((i for i, m in enumerate(models) if (str", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-21", "negative_texts": ["main() -> int:\n    app = serve_rag.app\n    c = TestClient(app)\n\n    # Prices\n    r = c.get('/api/prices')\n    assert r.status_code == 200, r.text\n    models = r.json().get('models', [])\n    print('prices models:', len(models))\n\n    # Upsert a model\n    r = c.post('/api/prices/upsert', json={\"provider\":\"local\",\"model\":\"qwen3-coder:14b\",\"unit\":\"request\"})\n    assert r.status_code == 200 and r.json().get('ok'), r.text\n\n    # Cost estimate\n    r = c.post('/api/cost/estimate', json={\"provider\":\"opena", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "main():\n    rag_root = Path(__file__).resolve().parents[1]\n    # Allow explicit path override for code repo\n    forced_path = None\n    forced_name = None\n    argv = sys.argv[1:]\n    for i, a in enumerate(argv):\n        if a.startswith('--path='):\n            forced_path = a.split('=', 1)[1].strip()\n        elif a == '--path' and i+1 < len(argv):\n            forced_path = argv[i+1].strip()\n        elif a.startswith('--name='):\n            forced_name = a.split('=', 1)[1].strip()\n        elif a ==", "_dispatch_notifications(status: str, alerts: List[Dict[str, Any]]):\n    # Gate by config\n    if not _notify_enabled():\n        return\n    if status == \"resolved\" and not _include_resolved():\n        return\n    if not alerts:\n        return\n\n    allowed = set(_notify_severities())\n    selected: List[Dict[str, Any]] = []\n    for a in alerts:\n        sev = str(a.get(\"labels\", {}).get(\"severity\", \"\")).lower()\n        if sev in allowed:\n            selected.append(a)\n    if not selected:\n        retu"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/scripts/test_backend.py:1-41", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/scripts/quick_setup.py:1-93", "/Users/davidmontgomery/agro-rag-engine/server/alerts.py:1-318"], "source": "golden.json"}
{"query": "Where is the LangGraph conversational RAG pipeline implemented?", "positive_text": "build_graph():\n    builder = StateGraph(RAGState)\n    builder.add_node('retrieve', retrieve_node)\n    builder.add_node('rewrite_query', rewrite_query)\n    builder.add_node('generate', generate_node)\n    builder.add_node('fallback', fallback_node)\n    builder.set_entry_point('retrieve')\n    builder.add_conditional_edges('retrieve', route_after_retrieval, {\n        'generate': 'generate', 'rewrite_query': 'rewrite_query', 'fallback': 'fallback'\n    })\n    builder.add_edge('rewrite_query', 'retriev", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-28", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "import React from 'react';\nimport ComponentCreator from '@docusaurus/ComponentCreator';\n\nexport default [\n  {\n    path: '/agro-rag-engine/__docusaurus/debug',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug', '5a0'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/config',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/config', '84e'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/content',\n    component", "  \"content---agro-rag-engine-configuration-modelse-23-af5\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-modelse-23-af5\" */ \"@site/docs/configuration/models.md\"), \"@site/docs/configuration/models.md\", require.resolveWeak(\"@site/docs/configuration/models.md\")],\n  \"content---agro-rag-engine-configuration-performanceeec-690\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-performanceeec-690\" */ \"@site/docs/configuration/performance.md\"), \""], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-33", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-5"], "source": "golden.json"}
{"query": "How does the cross-encoder reranker work?", "positive_text": "\nimport math\nimport os\nfrom typing import List, Dict, Any\nfrom rerankers import Reranker  # type: ignore[import-untyped]\nfrom typing import Optional\n\ntry:\n    from dotenv import load_dotenv\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\n_HF_PIPE = None\n_RERANKER = None\n\nDEFAULT_MODEL = os.getenv('RERANKER_MODEL', 'BAAI/bge-reranker-v2-m3')\n# Note: Backend/model can change at runtime via GUI. Read env at call-time in rerank_results.\nCOHERE_MODEL = os.getenv('COHERE_RERANK_MODEL', 're", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/rerank.py:1-29", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "            if (embList) setOpts(embList, unique(items));\n            if (input && items.length && !items.includes(input.value)) input.value = '';\n        }\n        function normProviderName(p){\n            p = String(p||'').toLowerCase();\n            if (p === 'hf' || p === 'hugging face') return 'huggingface';\n            return p;\n        }\n        function updateRerankList(){\n            const sel = document.getElementById('cost-rerank-provider');\n            const input = document.getElemen", "          ['Local Reranker README', '/models/cross-encoder-agro.baseline/README.md'],\n          ['Training Custom Reranker', '/docs/RERANKER.md#training']\n        ],\n        [['Free (no API costs)', 'info'], ['Requires download', 'warn']]\n      ),\n\n      // Retrieval tuning\n      MQ_REWRITES: L(\n        'Multi‑Query Rewrites',\n        'Number of query variations to generate for improved recall. Each rewrite searches independently, then results are fused and reranked. For example, query \"auth flo", "      description: 'Local/HF reranker model used when backend = local or hf (e.g., BAAI/bge-reranker-v2-m3).',\n      category: 'Retrieval',\n      icon: '⚙️'\n    },\n    MQ_REWRITES: {\n      name: 'Multi-Query Expansion',\n      description: 'Number of query variations generated to cast a wider search net. More rewrites = better recall but higher cost.',\n      category: 'Search Strategy',\n      icon: '🎯',\n      valueExplainer: (v) => v + ' variations per query'\n    },\n    TOPK_SPARSE: {\n      name:"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-24", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/profile_renderer.js:1-29"], "source": "golden.json"}
{"query": "Where is the MCP (Model Context Protocol) server for stdio transport?", "positive_text": "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/mcp/server.py:1-25", "negative_texts": ["# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "mcp_stdio_test() -> Dict[str, Any]:\n    \"\"\"Test stdio MCP server (one-shot)\"\"\"\n    import subprocess\n    try:\n        # Test stdio MCP\n        result = subprocess.run(\n            [str(ROOT / \".venv\" / \"bin\" / \"python\"), \"-m\", \"server.mcp.server\"],\n            input='{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}\\n',\n            capture_output=True, text=True, timeout=10, cwd=str(ROOT)\n        )\n        \n        if result.returncode == 0 and result.stdout:\n            import json\n   ", "from __future__ import annotations\n\n# MCP package initializer. Exposes convenient imports for shims/tools.\n\nfrom .server import MCPServer  # re-export for convenience\n\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-30", "/Users/davidmontgomery/agro-rag-engine/server/mcp/__init__.py:1-7"], "source": "golden.json"}
{"query": "Where is the GUI main HTML and JavaScript?", "positive_text": "        bindQuickAction('dash-change-repo', changeRepo);\n        bindQuickAction('dash-reload-config', reloadConfig);\n        // Keep cost panel in sync with wizard selections\n        const map = [\n            ['wizard-gen-model','cost-model'],\n            ['wizard-embed-provider','cost-embed-provider'],\n            ['wizard-rerank-provider','cost-rerank-provider'],\n            ['wizard-rerank-model','cost-rerank-model'],\n        ];\n        map.forEach(([a,b]) => { const elA = document.getElemen", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-17", "negative_texts": ["        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "    if (folderBtn && folderPicker){ folderBtn.addEventListener('click', ()=>folderPicker.click()); folderPicker.addEventListener('change',(e)=>{ if(e.target.files && e.target.files.length>0){ const path=e.target.files[0].webkitRelativePath || e.target.files[0].path || ''; const folderName = path.split('/')[0] || 'Selected folder'; if (folderDisplay) folderDisplay.textContent = folderName; if (folderPath) folderPath.value = folderName; } }); }\n    $$('.ob-ask-btn').forEach(btn=>{ btn.addEventList", "// Core Utilities - Shared helpers for all GUI modules\n// Provides API base resolution, DOM helpers, and global state\n;(function() {\n  'use strict';\n\n  // Backend API base: respects ?api= override; defaults to local FastAPI\n  const API_BASE = (() => {\n    try {\n      const u = new URL(window.location.href);\n      const q = new URLSearchParams(u.search);\n      const override = q.get('api');\n      if (override) return override.replace(/\\/$/, '');\n      // Prefer same-origin whenever we were served"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/onboarding.js:1-6", "/Users/davidmontgomery/agro-rag-engine/gui/js/core-utils.js:1-36"], "source": "golden.json"}
{"query": "How does the navigation system work in the GUI?", "positive_text": "                            if (window.Navigation) {\n                                window.Navigation.navigateTo('admin');\n                                setTimeout(()=>{ const a = $('#admin-integrations-anchor'); if (a) a.scrollIntoView({behavior:'smooth'}); }, 50);\n                            }\n                            return;\n                        }\n                        if (parent === 'admin' && sub === 'git') {\n                            if (window.Navigation) {\n                  ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/navigation.js:1-33", "negative_texts": ["                    window.Navigation.navigateTo(tabId);\n                }\n            });\n        });\n        \n        console.log('[RAG] RAG navigation initialized');\n    }\n\n    // Public API\n    window.RAGNavigation = {\n        showRagSubtabs,\n        hideRagSubtabs,\n        switchRagSubtab,\n        getCurrentSubtab: () => currentSubtab,\n        init\n    };\n\n    // Initialize on DOM ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', init);", "            if (infraTab) {\n                $$('.tab-content').forEach(content => content.classList.remove('active'));\n                infraTab.classList.add('active');\n            }\n        }\n        \n        // Handle Admin tab\n        if (tabId === 'admin') {\n            const adminTab = $('#tab-settings-general');\n            if (adminTab) {\n                $$('.tab-content').forEach(content => content.classList.remove('active'));\n                adminTab.classList.add('active');\n           ", "// AGRO GUI - RAG Tab Navigation\n// Handles the mega-tab structure for RAG with subtabs\n// Author: AGRO Redesign (Phase 2)\n\n(function() {\n    'use strict';\n\n    const { $, $$, events } = window.CoreUtils || {};\n\n    // RAG Subtab mappings to existing content\n    const RAG_SUBTAB_MAP = {\n        'data-quality': ['config-repos', 'keywords', 'cards'],\n        'retrieval': ['config-models', 'config-retrieval'],\n        'external-rerankers': ['config-reranking'],\n        'learning-ranker': ['reranker", "            }\n        });\n    } else {\n        console.warn('[mcp_server.js] Navigation API not available, falling back to legacy mode');\n        // Legacy mode: auto-init\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initMCPServerUI);\n        } else {\n            initMCPServerUI();\n        }\n    }\n\n    console.log('[mcp_server.js] Module loaded (PRIMARY for infrastructure, coordinates docker.js)');\n})();\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/rag-navigation.js:1-28", "/Users/davidmontgomery/agro-rag-engine/gui/js/rag-navigation.js:1-48", "/Users/davidmontgomery/agro-rag-engine/gui/js/rag-navigation.js:1-48", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-15"], "source": "golden.json"}
{"query": "Where is the chat interface implementation?", "positive_text": "// Chat interface for RAG system\n// Handles sending questions to /answer endpoint and displaying responses\n\n// Default chat settings\nconst DEFAULT_CHAT_SETTINGS = {\n    model: '',  // Empty = use GEN_MODEL\n    temperature: 0.0,\n    maxTokens: 1000,\n    multiQuery: 3,\n    finalK: 20,\n    confidence: 0.55,\n    showCitations: true,\n    showConfidence: false,\n    autoScroll: true,\n    syntaxHighlight: false,\n    systemPrompt: '',\n    // History settings\n    historyEnabled: true,\n    historyLimit: 10", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/chat.js:1-26", "negative_texts": ["        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci", "// API Base URL Override - sets AGRO API endpoints\n(() => {\n  'use strict';\n\n  const BASE = window.location.origin + '/api';\n\n  function setupAPI() {\n    if (!window.CoreUtils) {\n      setTimeout(setupAPI, 100);\n      return;\n    }\n\n    try {\n      window.CoreUtils.API_BASE = BASE;\n\n      // Helper to build API URLs\n      window.CoreUtils.api = function(path) {\n        const p = String(path || '');\n        if (p.startsWith('/api/')) return BASE + p.slice(4);\n        if (p.startsWith('/')) return"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22", "/Users/davidmontgomery/agro-rag-engine/gui/api-base-override.js:1-37"], "source": "golden.json"}
{"query": "Where is the AST-aware code chunking implemented?", "positive_text": "main() -> None:\n    files = collect_files(BASES)\n    print(f'Discovered {len(files)} source files.')\n    all_chunks: List[Dict] = []\n    for fp in files:\n        if not should_index_file(fp):\n            continue\n        lang = lang_from_path(fp)\n        if not lang:\n            continue\n        try:\n            with open(fp, 'r', encoding='utf-8', errors='ignore') as f:\n                src = f.read()\n        except Exception:\n            continue\n        ch = chunk_code(src, fp, lang, target=90", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/indexer/index_repo.py:1-205", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                    <div style=\"color: var(--fg-muted, var(--fg-muted)); font-size: 11px; text-transform: uppercase; margin-bottom: 8px;\">Total Chunks</div>\n                    <div style=\"color: var(--ok, var(--accent)); font-size: 24px; font-weight: 700; font-family: 'SF Mono', monospace;\">\n                        ${totalChunks.toLocaleString()}\n                    </div>\n                </div>\n            `;\n\n            // Total size\n            html += `\n                <div style=\"backgrou", "          ['Pull Models', 'https://github.com/ollama/ollama#quickstart'],\n          ['Code-Focused Models', 'https://ollama.com/search?c=tools'],\n          ['Enrichment Setup', '/docs/ENRICHMENT.md#ollama']\n        ],\n        [['Free (local)', 'info'], ['Requires model download', 'warn']]\n      ),\n      ENRICH_CODE_CHUNKS: L(\n        'Enrich Code Chunks',\n        'Enable per-chunk code summarization during indexing. When on, each code chunk gets an AI-generated summary and keywords stored alongs", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/gui/js/indexing.js:1-22", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-17", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38"], "source": "golden.json"}
{"query": "How does the embedding cache work to avoid recomputation?", "positive_text": "EmbeddingCache:\n    def __init__(self, outdir: str):\n        os.makedirs(outdir, exist_ok=True)\n        self.path = os.path.join(outdir, \"embed_cache.jsonl\")\n        self.cache = {}\n        if os.path.exists(self.path):\n            with open(self.path, \"r\", encoding=\"utf-8\") as f:\n                for line in f:\n                    try:\n                        o = json.loads(line)\n                        self.cache[o[\"hash\"]] = o[\"vec\"]\n                    except Exception:\n                      ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/embed_cache.py:1-63", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "   */\n  function getSettings() {\n    return { ...settingsCache };\n  }\n\n  /**\n   * Check if editor embedding is enabled\n   * @returns {boolean} Whether embedding is enabled\n   */\n  function isEmbeddingEnabled() {\n    // Check environment variable first (from config)\n    try {\n      const ci = String(window.CoreUtils?.state?.config?.env?.CI ?? '').toLowerCase();\n      if (ci === '1' || ci === 'true' || ci === 'yes') return false; // CI guard\n\n      const fld = document.querySelector('[name=\"EDITOR", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "\"\"\"Path configuration for AGRO RAG Engine.\"\"\"\nfrom pathlib import Path\nimport os\n\nrepo_root() -> Path:\n    \"\"\"Return the root directory of the repository.\"\"\"\n    return Path(__file__).resolve().parent\n\ndata_dir() -> Path:\n    \"\"\"Return the data directory for storing index artifacts.\"\"\"\n    root = repo_root()\n    data = root / \"data\"\n    data.mkdir(exist_ok=True)\n    return data\n"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/gui/js/editor-settings.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/path_config.py:1-15"], "source": "golden.json"}
{"query": "Where is the semantic card building logic?", "positive_text": "          `<div style=\"text-align: center; padding: 24px; color: var(--fg-muted);\">\n            <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" style=\"opacity: 0.3; margin-bottom: 12px;\">\n              <rect x=\"3\" y=\"4\" width=\"18\" height=\"16\" rx=\"2\" ry=\"2\"></rect>\n              <line x1=\"3\" y1=\"9\" x2=\"21\" y2=\"9\"></line>\n              <line x1=\"9\" y1=\"4\" x2=\"9\" y2=\"20\"></line>\n            </svg>\n            <div>No cards available</div>\n       ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/cards.js:1-16", "negative_texts": ["        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "// Cards Builder (Job + SSE) logic with PERMANENT VISIBLE PROGRESS. Exported via window.CardsBuilder\n;(function(){\n  'use strict';\n  const api = (window.CoreUtils && window.CoreUtils.api) ? window.CoreUtils.api : (p=>p);\n  const state = (window.CoreUtils && window.CoreUtils.state) ? window.CoreUtils.state : {};\n  const $ = (id) => document.getElementById(id);\n  let cardsJob = { id: null, timer: null, sse: null };\n\n  // Populate repo dropdown\n  async function populateRepoSelect(){\n    const sel =", "                            <span style=\"color:var(--link);\">Discriminative:</span> ${discr} keywords\n                        </div>\n                        <div style=\"font-size:12px;color:var(--fg);margin-bottom:4px;\">\n                            <span style=\"color:var(--link);\">Semantic:</span> ${sema} keywords\n                        </div>\n                        <div style=\"font-size:12px;color:var(--fg);margin-bottom:4px;\">\n                            <span style=\"color:var(--link);\">LLM:", "                    const dur = (last.result && typeof last.result.duration_s==='number') ? ` • ${last.result.duration_s}s` : '';\n                    lastBox.textContent = `Last build: ${when}${cnt}${dur}`;\n                    lastBox.style.display = 'block';\n                } else {\n                    lastBox.style.display = 'none';\n                }\n            }\n            const cardsContainer = document.getElementById('cards-viewer');\n            if (cardsContainer) {\n                cards"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/cards_builder.js:1-30", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-26", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-23"], "source": "golden.json"}
{"query": "Where is the Qdrant vector database integration?", "positive_text": "_project_path_boost(fp: str, repo_tag: str) -> float:\n    import os as _os\n    if (repo_tag or '').lower() != 'project':\n        return 0.0\n    cfg = _os.getenv('project_PATH_BOOSTS', 'app/,lib/,config/,scripts/,server/,api/,api/app,app/services,app/routers,api/admin_ui,app/plugins')\n    tokens = [t.strip().lower() for t in cfg.split(',') if t.strip()]\n    s = (fp or '').lower()\n    bonus = 0.0\n    for tok in tokens:\n        if tok and tok in s:\n            bonus += 0.06\n    return min(bonus, 0.", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py:1-33", "negative_texts": ["        min_qps: adv.slo.min_qps,\n      },\n      tuning: { use_heuristic_quality: !!adv.heur },\n      defaults: { gen_model: env.GEN_MODEL || '' }\n    };\n    try{\n      setPhase('Calling selector...');\n      const r = await fetchWithTimeout(api('/api/profile/autoselect'), { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload), timeout: 15000 });\n      if (!r.ok){ const txt = await r.text(); throw new Error(txt || 'autoselect failed'); }\n      setPhase('Render", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "        [\n          ['Vector Embeddings', 'https://en.wikipedia.org/wiki/Word_embedding'],\n          ['Dimensionality Tradeoffs', 'https://www.sbert.net/docs/pretrained_models.html#model-overview'],\n          ['Qdrant Vector Config', 'https://qdrant.tech/documentation/concepts/collections/#create-a-collection'],\n          ['Reindexing Guide', '/docs/INDEXING.md#full-reindex']\n        ],\n        [['Requires reindex','reindex'], ['Affects storage', 'warn']]\n      ),\n      PORT: L(\n        'HTTP Po"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/autoprofile_v2.js:1-26", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-20"], "source": "golden.json"}
{"query": "How does multi-query expansion work?", "positive_text": "RAGState(TypedDict):\n    question: str\n    documents: Annotated[List[Dict], operator.add]\n    generation: str\n    iteration: int\n    confidence: float\n    repo: str\nshould_use_multi_query(question: str) -> bool:\n    q = (question or '').lower().strip()\n    if len(q.split()) <= 3:\n        return False\n    for w in (\"how\", \"why\", \"explain\", \"compare\", \"tradeoff\"):\n        if w in q:\n            return True\n    return False\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-16", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "import React from 'react';\nimport ComponentCreator from '@docusaurus/ComponentCreator';\n\nexport default [\n  {\n    path: '/agro-rag-engine/__docusaurus/debug',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug', '5a0'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/config',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/config', '84e'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/content',\n    component", "  \"content---agro-rag-engine-configuration-modelse-23-af5\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-modelse-23-af5\" */ \"@site/docs/configuration/models.md\"), \"@site/docs/configuration/models.md\", require.resolveWeak(\"@site/docs/configuration/models.md\")],\n  \"content---agro-rag-engine-configuration-performanceeec-690\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-performanceeec-690\" */ \"@site/docs/configuration/performance.md\"), \""], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-33", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-5"], "source": "golden.json"}
{"query": "Where is the tracing system for debugging RAG pipelines?", "positive_text": "start_trace(repo: str, question: str) -> Trace:\n    tr = Trace(repo=repo, question=question)\n    _TRACE_VAR.set(tr)\n    return tr\n\nget_trace() -> Optional[Trace]:\n    return _TRACE_VAR.get()\n\nend_trace() -> Optional[str]:\n    tr = _TRACE_VAR.get()\n    if tr is None:\n        return None\n    try:\n        if getattr(tr, '_ls_client', None) is not None and getattr(tr, '_ls_run_id', None) is not None:\n            from datetime import datetime, timezone\n            try:\n                tr._ls_client.u", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/tracing.py:1-39", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "import React from 'react';\nimport ComponentCreator from '@docusaurus/ComponentCreator';\n\nexport default [\n  {\n    path: '/agro-rag-engine/__docusaurus/debug',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug', '5a0'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/config',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/config', '84e'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/content',\n    component", "  \"content---agro-rag-engine-configuration-modelse-23-af5\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-modelse-23-af5\" */ \"@site/docs/configuration/models.md\"), \"@site/docs/configuration/models.md\", require.resolveWeak(\"@site/docs/configuration/models.md\")],\n  \"content---agro-rag-engine-configuration-performanceeec-690\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-performanceeec-690\" */ \"@site/docs/configuration/performance.md\"), \""], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-33", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-5"], "source": "golden.json"}
{"query": "How does the reranker training with triplets work?", "positive_text": "\nimport math\nimport os\nfrom typing import List, Dict, Any\nfrom rerankers import Reranker  # type: ignore[import-untyped]\nfrom typing import Optional\n\ntry:\n    from dotenv import load_dotenv\n    load_dotenv(override=False)\nexcept Exception:\n    pass\n\n_HF_PIPE = None\n_RERANKER = None\n\nDEFAULT_MODEL = os.getenv('RERANKER_MODEL', 'BAAI/bge-reranker-v2-m3')\n# Note: Backend/model can change at runtime via GUI. Read env at call-time in rerank_results.\nCOHERE_MODEL = os.getenv('COHERE_RERANK_MODEL', 're", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/rerank.py:1-29", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "// gui/js/reranker.js - Learning Reranker UI Module\n// Handles feedback collection, triplet mining, training, evaluation, and all reranker features\n\n// ============ FEEDBACK SYSTEM ============\n\n// Track file link clicks\nwindow.trackFileClick = async function(eventId, docId) {\n    if (!eventId || !docId) return;\n    \n    try {\n        await fetch('/api/reranker/click', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ ev", "initRerankerUI() {\n    // Mine button\n    const mineBtn = document.getElementById('reranker-mine-btn');\n    if (mineBtn) {\n        mineBtn.addEventListener('click', async () => {\n            mineBtn.disabled = true;\n            mineBtn.textContent = 'Mining...';\n            try {\n                await mineTriplets();\n            } catch (error) {\n                alert(error.message);\n            } finally {\n                setTimeout(() => {\n                    mineBtn.disabled = false;\n        ", "addFeedbackButtons(messageElement, eventId) {\n    if (!eventId) return;\n    \n    const feedbackDiv = document.createElement('div');\n    feedbackDiv.style.cssText = 'margin-top:12px; padding:12px; background:var(--card-bg); border-radius:6px; border-left:3px solid var(--link);';\n    feedbackDiv.innerHTML = `\n        <div style=\"display:flex; gap:12px; align-items:center; margin-bottom:8px;\">\n            <button class=\"feedback-btn\" data-event-id=\"${eventId}\" data-signal=\"thumbsup\" \n              "], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-97", "/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-235"], "source": "golden.json"}
{"query": "Where is the Grafana dashboard configuration?", "positive_text": "    return wrap && wrap.style.display !== 'none';\n  }\n\n  function getConfig() {\n    return {\n      baseUrl: vFromDom('GRAFANA_BASE_URL', 'http://127.0.0.1:3000'),\n      dashboardUid: vFromDom('GRAFANA_DASHBOARD_UID', 'agro-overview'),\n      embedEnabled: vFromDom('GRAFANA_EMBED_ENABLED', 'true')\n    };\n  }\n\n  // Register with Navigation API\n  function registerGrafanaView() {\n    if (window.Navigation && typeof window.Navigation.registerView === 'function') {\n      window.Navigation.registerView(", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/grafana.js:1-47", "negative_texts": ["        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci", "// API Base URL Override - sets AGRO API endpoints\n(() => {\n  'use strict';\n\n  const BASE = window.location.origin + '/api';\n\n  function setupAPI() {\n    if (!window.CoreUtils) {\n      setTimeout(setupAPI, 100);\n      return;\n    }\n\n    try {\n      window.CoreUtils.API_BASE = BASE;\n\n      // Helper to build API URLs\n      window.CoreUtils.api = function(path) {\n        const p = String(path || '');\n        if (p.startsWith('/api/')) return BASE + p.slice(4);\n        if (p.startsWith('/')) return"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22", "/Users/davidmontgomery/agro-rag-engine/gui/api-base-override.js:1-37"], "source": "golden.json"}
{"query": "Where is the Prometheus metrics configuration?", "positive_text": "# server/metrics.py\n# AGRO Prometheus instrumentation (FastAPI-first).\n# Exposes /metrics and provides helpers for RAG/canary metrics you asked for.\n\nfrom contextlib import contextmanager\nfrom typing import Optional\nimport time\n\nfrom prometheus_client import (\n    Counter, Histogram, Gauge, make_asgi_app\n)\n\n# Latency buckets tuned for LLM/RAG (seconds)\nLATENCY_BUCKETS = (0.05, 0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 13, 21, 34, 60)\n\n# ---- Core request & latency ----\nREQUESTS_TOTAL = Counter(\n    \"agro_r", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/metrics.py:1-114", "negative_texts": ["        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22"], "source": "golden.json"}
{"query": "Where is the evaluation harness for testing RAG quality?", "positive_text": "#!/usr/bin/env python3\nimport os\nimport json\nimport time\nfrom typing import List\nfrom dotenv import load_dotenv\nfrom retrieval.hybrid_search import search_routed, search_routed_multi\n\nload_dotenv()\n\nGOLDEN_PATH = os.getenv('GOLDEN_PATH', 'golden.json')\nUSE_MULTI = os.getenv('EVAL_MULTI','1') == '1'\nFINAL_K = int(os.getenv('EVAL_FINAL_K','5'))\nMULTI_M = int(os.getenv('EVAL_MULTI_M', '10'))  # Multi-query expansion count\n\n\"\"\"\nGolden file format (golden.json):\n[\n  {\"q\": \"Where is ProviderSetupWizar", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/eval/eval_rag.py:1-25", "negative_texts": ["#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought", "// Evaluation Runner\n// Handles running full evaluation suite and displaying results\n\nlet evalResults = null;\nlet evalPollingInterval = null;\n\n// Run full evaluation\nasync function runEvaluation() {\n    const useMulti = document.getElementById('eval-use-multi').value === '1';\n    const finalK = parseInt(document.getElementById('eval-final-k').value) || 5;\n\n    const btn = document.getElementById('btn-eval-run');\n    btn.disabled = true;\n    btn.textContent = 'Starting...';\n\n    try {\n        con", "agro_rag_solver():\n    \"\"\"Custom solver that uses AGRO's RAG instead of an LLM.\"\"\"\n    async def solve(state, generate):\n        # Get the input question\n        question = state.user_prompt.text\n        \n        # Run retrieval\n        results = search_routed_multi(question, repo_override=\"agro\", m=2, final_k=5)\n        \n        # Format output\n        output = \"\\n\".join(f\"{i+1}. {r['file_path']}\" for i, r in enumerate(results))\n        \n        # Add to messages\n        state.messages.append(\n", "#!/usr/bin/env python3\n\"\"\"Inspect AI evaluation for AGRO RAG system.\n\nRuns golden questions through retrieval and evaluates performance\nwith full trace visibility in LangTrace.\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom inspect_ai import Task, task, eval\nfrom inspect_ai.dataset import csv_dataset, FieldSpec\nfrom inspect_ai.scorer import match, includes\nfrom inspect_ai.solver import generate, chain_of_thought"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27", "/Users/davidmontgomery/agro-rag-engine/gui/js/eval_runner.js:1-61", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-42", "/Users/davidmontgomery/agro-rag-engine/eval/inspect_eval.py:1-27"], "source": "golden.json"}
{"query": "How does the theme system work in the GUI?", "positive_text": "      const selTop = $('#theme-mode');\n      const selMisc = $('#misc-theme-mode');\n      if (selTop) selTop.value = mode;\n      if (selMisc) selMisc.value = mode;\n      applyTheme(mode);\n\n      // React to system changes when Auto\n      if (window.matchMedia) {\n        const mq = window.matchMedia('(prefers-color-scheme: dark)');\n        const onChange = () => {\n          const current = (selTop && selTop.value) || (selMisc && selMisc.value) || mode;\n          if (String(current || 'auto').toLo", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/theme.js:1-36", "negative_texts": ["        }\n\n        // Save state to localStorage\n        const storageKey = `collapsed-${targetId}`;\n        localStorage.setItem(storageKey, isCollapsed ? '0' : '1');\n      });\n\n      // Restore collapsed state from localStorage\n      const targetId = header.getAttribute('data-target');\n      const storageKey = `collapsed-${targetId}`;\n      const savedState = localStorage.getItem(storageKey);\n\n      if (savedState === '1') {\n        const content = document.getElementById(targetId);\n        if", "    if (selMisc) selMisc.addEventListener('change', () => onThemeChange(selMisc));\n  }\n\n  // ---------------- Resizable Sidepanel ----------------\n  function bindResizableSidepanel() {\n    const handle = $('.resize-handle');\n    if (!handle) return;\n\n    const MIN_WIDTH = 300;\n    const MAX_WIDTH = 600; // prevent sidepanel from covering too much content\n    const DEFAULT_WIDTH = 360;\n    const STORAGE_KEY = 'agro-sidepanel-width';\n\n    // Restore saved width with viewport constraints\n    const ", "// AGRO GUI - Config Module\n// Handles configuration form loading, population, and saving\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, $$, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !$$ || !state) {\n        console.error('[config.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Load configuration from API and populate form\n     */\n    async function loadConfig() {\n        try {\n            try { await fetch(api('/api/env/reload'),", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/ui-helpers.js:1-38", "/Users/davidmontgomery/agro-rag-engine/gui/js/ui-helpers.js:1-29", "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-44", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74"], "source": "golden.json"}
{"query": "Where is the configuration management in the GUI?", "positive_text": "// AGRO GUI - Config Module\n// Handles configuration form loading, population, and saving\n\n(function () {\n    'use strict';\n\n    // Import utilities\n    const { api, $, $$, state } = window.CoreUtils || {};\n\n    if (!api || !$ || !$$ || !state) {\n        console.error('[config.js] CoreUtils not loaded!');\n        return;\n    }\n\n    /**\n     * Load configuration from API and populate form\n     */\n    async function loadConfig() {\n        try {\n            try { await fetch(api('/api/env/reload'),", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/config.js:1-44", "negative_texts": ["        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci", "        bindQuickAction('dash-change-repo', changeRepo);\n        bindQuickAction('dash-reload-config', reloadConfig);\n        // Keep cost panel in sync with wizard selections\n        const map = [\n            ['wizard-gen-model','cost-model'],\n            ['wizard-embed-provider','cost-embed-provider'],\n            ['wizard-rerank-provider','cost-rerank-provider'],\n            ['wizard-rerank-model','cost-rerank-model'],\n        ];\n        map.forEach(([a,b]) => { const elA = document.getElemen"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-17"], "source": "golden.json"}
{"query": "Where is the index statistics computation?", "positive_text": "\"\"\"Root shim for backward compatibility: re-export get_index_stats from server.index_stats\"\"\"\nfrom server.index_stats import get_index_stats  # noqa: F401\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/indexer/index_stats.py:1-3", "negative_texts": ["        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "main() -> None:\n    files = collect_files(BASES)\n    print(f'Discovered {len(files)} source files.')\n    all_chunks: List[Dict] = []\n    for fp in files:\n        if not should_index_file(fp):\n            continue\n        lang = lang_from_path(fp)\n        if not lang:\n            continue\n        try:\n            with open(fp, 'r', encoding='utf-8', errors='ignore') as f:\n                src = f.read()\n        except Exception:\n            continue\n        ch = chunk_code(src, fp, lang, target=90", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/indexer/index_repo.py:1-205", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22"], "source": "golden.json"}
{"query": "How does the confidence gating work in LangGraph?", "positive_text": "route_after_retrieval(state:RAGState)->str:\n    conf = float(state.get(\"confidence\", 0.0) or 0.0)\n    it = int(state.get(\"iteration\", 0) or 0)\n    docs = state.get(\"documents\", []) or []\n    scores = sorted([float(d.get(\"rerank_score\",0.0) or 0.0) for d in docs], reverse=True)\n    top1 = scores[0] if scores else 0.0\n    avg5 = (sum(scores[:5])/min(5, len(scores))) if scores else 0.0\n    try:\n        CONF_TOP1 = float(os.getenv('CONF_TOP1', '0.62'))\n        CONF_AVG5 = float(os.getenv('CONF_AVG5'", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-38", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "import React from 'react';\nimport ComponentCreator from '@docusaurus/ComponentCreator';\n\nexport default [\n  {\n    path: '/agro-rag-engine/__docusaurus/debug',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug', '5a0'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/config',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/config', '84e'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/content',\n    component", "  \"content---agro-rag-engine-configuration-modelse-23-af5\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-modelse-23-af5\" */ \"@site/docs/configuration/models.md\"), \"@site/docs/configuration/models.md\", require.resolveWeak(\"@site/docs/configuration/models.md\")],\n  \"content---agro-rag-engine-configuration-performanceeec-690\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-performanceeec-690\" */ \"@site/docs/configuration/performance.md\"), \""], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-33", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-5"], "source": "golden.json"}
{"query": "Where are the API endpoint handlers for RAG queries?", "positive_text": "#!/usr/bin/env python3\nfrom __future__ import annotations\n\n\"\"\"\nMCP server exposing RAG tools for Codex/Claude integration (stdio transport).\n\nTools (sanitized names for OpenAI tool spec):\n  - rag_answer(repo, question) → full LangGraph answer + citations\n  - rag_search(repo, question) → retrieval-only (for debugging)\nCompatibility: accepts legacy names \"rag.answer\" and \"rag.search\" on tools/call.\n\"\"\"\nimport sys\nimport json\nimport os\nfrom typing import Dict, Any, List\nimport urllib.request, urlli", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/mcp/server.py:1-25", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "import express from 'express';\nimport fetch from 'node-fetch';\n\nconst app = express();\nconst PORT = process.env.PORT || 8014;\nconst RAG_API_URL = process.env.RAG_API_URL || 'http://127.0.0.1:8012';\n\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', proxy: true, target: RAG_API_URL });\n});\n\n// JSON answer proxy\napp.get('/mcp/answer', async (req, res) => {\n  try {\n    const { q, repo, token } = req.query;\n    const u = new URL('/answer', RAG_API_URL);\n    if (q) u.searchParams.set('q',", "    const u = new URL('/mcp/tools/call', MCP_HTTP_URL);\n    const headers = token ? { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } : { 'Content-Type': 'application/json' };\n    const body = JSON.stringify({\n      name: 'web_get',\n      arguments: { url, max_bytes: max_bytes ? parseInt(max_bytes) : 20000 }\n    });\n    const r = await fetch(u.toString(), { method: 'POST', headers, body });\n    const data = await r.json();\n    res.json(data);\n  } catch (e) {\n    res.status", "    const headers = token ? { Authorization: `Bearer ${token}` } : {};\n    const r = await fetch(u.toString(), { headers });\n    const data = await r.json();\n    res.json(data);\n  } catch (e) {\n    res.status(500).json({ error: String(e) });\n  }\n});\n\n// SSE proxy for streaming answer\napp.get('/mcp/answer_stream', async (req, res) => {\n  try {\n    const { q, repo, token } = req.query;\n    const u = new URL('/answer_stream', RAG_API_URL);\n    if (q) u.searchParams.set('q', q);\n    if (repo) u.sear"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-36", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-19", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-36"], "source": "golden.json"}
{"query": "How does the query rewriting work when confidence is low?", "positive_text": "rewrite_query(state: RAGState) -> Dict:\n    q = state['question']\n    sys = \"You rewrite developer questions into search-optimized queries without changing meaning.\"\n    user = f\"Rewrite this for code search (expand CamelCase, include API nouns), one line.\\n\\n{q}\"\n    newq, _ = generate_text(user_input=user, system_instructions=sys, reasoning_effort=None)\n    newq = (newq or '').strip()\n    return {'question': newq}\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py:1-8", "negative_texts": ["_infer_quality_score(row: Dict[str, Any], comp_type: str) -> Number:\n    \"\"\"Heuristic quality when not provided in prices.json.\n    Tries to be sensible for performance mode ranking.\n    \"\"\"\n    prov = (row.get(\"provider\") or \"\").lower()\n    fam = (row.get(\"family\") or \"\").lower()\n    model = (row.get(\"model\") or \"\").lower()\n    c = comp_type.upper()\n\n    if c == \"GEN\":\n        # OpenAI / o-series / GPT-4 family hierarchy\n        if prov == \"openai\":\n            if model.startswith(\"o1\"):\n      ", "# server/alert_config.py\n# Alert configuration management - stores user-configurable thresholds\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\n\nCONFIG_DIR = Path(__file__).parent.parent / \"data\" / \"config\"\nCONFIG_DIR.mkdir(parents=True, exist_ok=True)\nALERT_CONFIG_FILE = CONFIG_DIR / \"alert_thresholds.json\"\n\n\n@dataclass", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "rerank_candidates(\n    query: str,\n    candidates: List[Dict[str, Any]],\n    blend_alpha: float = float(os.getenv(\"AGRO_RERANKER_ALPHA\", \"0.7\"))\n) -> List[Dict[str, Any]]:\n    \"\"\"\n    Feature gate:\n      AGRO_RERANKER_TOPN=N (default 50). 0 = rerank ALL.\n    candidates: [{\"doc_id\": str, \"score\": float, \"text\": str, \"clicked\": bool}, ...]\n    \"\"\"\n    if not candidates or \"text\" not in candidates[0]:\n        return candidates\n\n    base_sorted = sorted(candidates, key=lambda c: float(c.get(\"score\","], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/server/autoprofile.py:1-67", "/Users/davidmontgomery/agro-rag-engine/server/alert_config.py:1-16", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/server/reranker.py:1-35"], "source": "golden.json"}
{"query": "Where is the synonym expansion for semantic search?", "positive_text": "\"\"\"\nSemantic Synonym Expander for Query Enhancement\n\nExpands queries with semantic synonyms to improve retrieval accuracy.\nExample: \"auth\" -> \"auth authentication oauth jwt bearer token\"\n\"\"\"\n\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List, Set\n\n\n_SYNONYMS_CACHE: Dict[str, Dict[str, List[str]]] = {}\n\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/retrieval/synonym_expander.py:1-16", "negative_texts": ["        ['OpenAI Embeddings', 'https://platform.openai.com/docs/guides/embeddings'],\n        ['Voyage AI Embeddings', 'https://docs.voyageai.com/docs/embeddings'],\n        ['Google Gemini Embeddings', 'https://ai.google.dev/gemini-api/docs/embeddings'],\n        ['SentenceTransformers Docs', 'https://www.sbert.net/']\n      ], [['Requires reindex','reindex']]),\n      VOYAGE_API_KEY: L('Voyage API Key', 'API key for Voyage AI embeddings when EMBEDDING_TYPE=voyage.', [\n        ['Voyage AI Docs', 'ht", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "        [\n          ['Vector Similarity Search', 'https://qdrant.tech/documentation/concepts/search/'],\n          ['Semantic Search', 'https://en.wikipedia.org/wiki/Semantic_search'],\n          ['Top-K Retrieval', 'https://en.wikipedia.org/wiki/Nearest_neighbor_search#k-nearest_neighbors']\n        ],\n        [['Affects latency','info'], ['Semantic matches', 'info']]\n      ),\n      TOPK_SPARSE: L(\n        'Top‑K Sparse',\n        'Number of candidate results to retrieve from BM25 keyword (lexical)"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-15", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-19"], "source": "golden.json"}
{"query": "Where is the telemetry logging for queries and feedback?", "positive_text": "log_feedback_event(event_id: str, feedback: Dict[str, Any]) -> None:\n    \"\"\"Log feedback for a previous query event.\n    \n    Args:\n        event_id: The event_id from log_query_event\n        feedback: Feedback dict with 'signal', optional 'doc_id', 'note'\n    \"\"\"\n    evt = {\n        \"type\": \"feedback\",\n        \"event_id\": event_id,\n        \"ts\": _now(),\n        \"feedback\": feedback,\n    }\n    with LOG_PATH.open(\"a\", encoding=\"utf-8\") as f:\n        f.write(json.dumps(evt, ensure_ascii=False) + \"", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/telemetry.py:1-17", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "  \"content---agro-rag-engine-configuration-modelse-23-af5\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-modelse-23-af5\" */ \"@site/docs/configuration/models.md\"), \"@site/docs/configuration/models.md\", require.resolveWeak(\"@site/docs/configuration/models.md\")],\n  \"content---agro-rag-engine-configuration-performanceeec-690\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-performanceeec-690\" */ \"@site/docs/configuration/performance.md\"), \"", "  \"content---agro-rag-engine-api-mcp-toolsffa-df0\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-api-mcp-toolsffa-df0\" */ \"@site/docs/api/mcp-tools.md\"), \"@site/docs/api/mcp-tools.md\", require.resolveWeak(\"@site/docs/api/mcp-tools.md\")],\n  \"content---agro-rag-engine-api-reference-47-b-f06\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-api-reference-47-b-f06\" */ \"@site/docs/api/reference.md\"), \"@site/docs/api/reference.md\", require.resolveWeak(\"@site/docs/api/ref"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-5", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-5"], "source": "golden.json"}
{"query": "How does the MCP HTTP server work?", "positive_text": "MCPServer:\n    \"\"\"Minimal MCP server over stdio.\"\"\"\n\n    def __init__(self):\n        self.graph = None\n        self._init_graph()\n\n    def _init_graph(self):\n        try:\n            self.graph = build_graph()\n        except Exception as e:\n            self._error(f\"Failed to initialize graph: {e}\")\n\n    def _error(self, msg: str):\n        print(f\"ERROR: {msg}\", file=sys.stderr)\n\n    def _log(self, msg: str):\n        print(f\"LOG: {msg}\", file=sys.stderr)\n\n    def handle_rag_answer(self, repo: st", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/mcp/server.py:1-312", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "mcp_http_start() -> Dict[str, Any]:\n    \"\"\"Start HTTP MCP server on port 8013\"\"\"\n    import subprocess\n    try:\n        # Check if already running\n        status = mcp_http_status()\n        if status[\"running\"]:\n            return {\"success\": False, \"error\": \"HTTP MCP already running on port 8013\"}\n        \n        # Start in background\n        subprocess.Popen(\n            [str(ROOT / \".venv\" / \"bin\" / \"python\"), \"-m\", \"server.mcp.http\"],\n            cwd=str(ROOT),\n            stdout=open(\"/tmp", "    }\n    res.end();\n  } catch (e) {\n    res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');\n    res.write(`data: [ERROR] ${String(e)}\\n\\n`);\n    res.end();\n  }\n});\n\n// Netlify deploy proxy (calls Python HTTP MCP on 8013)\napp.get('/mcp/netlify_deploy', async (req, res) => {\n  try {\n    const { domain, token } = req.query;\n    const MCP_HTTP_URL = process.env.MCP_HTTP_URL || 'http://127.0.0.1:8013';\n    const u = new URL('/mcp/tools/call', MCP_HTTP_URL);\n    const headers = token ?", "    const u = new URL('/mcp/tools/call', MCP_HTTP_URL);\n    const headers = token ? { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } : { 'Content-Type': 'application/json' };\n    const body = JSON.stringify({\n      name: 'web_get',\n      arguments: { url, max_bytes: max_bytes ? parseInt(max_bytes) : 20000 }\n    });\n    const r = await fetch(u.toString(), { method: 'POST', headers, body });\n    const data = await r.json();\n    res.json(data);\n  } catch (e) {\n    res.status"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-39", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-34", "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-19"], "source": "golden.json"}
{"query": "Where is the Node.js MCP server implementation?", "positive_text": "import express from 'express';\nimport fetch from 'node-fetch';\n\nconst app = express();\nconst PORT = process.env.PORT || 8014;\nconst RAG_API_URL = process.env.RAG_API_URL || 'http://127.0.0.1:8012';\n\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', proxy: true, target: RAG_API_URL });\n});\n\n// JSON answer proxy\napp.get('/mcp/answer', async (req, res) => {\n  try {\n    const { q, repo, token } = req.query;\n    const u = new URL('/answer', RAG_API_URL);\n    if (q) u.searchParams.set('q',", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/node_mcp/server.js:1-36", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "from __future__ import annotations\n\n# MCP package initializer. Exposes convenient imports for shims/tools.\n\nfrom .server import MCPServer  # re-export for convenience\n\n", "MCPServer:\n    \"\"\"Minimal MCP server over stdio.\"\"\"\n\n    def __init__(self):\n        self.graph = None\n        self._init_graph()\n\n    def _init_graph(self):\n        try:\n            self.graph = build_graph()\n        except Exception as e:\n            self._error(f\"Failed to initialize graph: {e}\")\n\n    def _error(self, msg: str):\n        print(f\"ERROR: {msg}\", file=sys.stderr)\n\n    def _log(self, msg: str):\n        print(f\"LOG: {msg}\", file=sys.stderr)\n\n    def handle_rag_answer(self, repo: st", "mcp_http_start() -> Dict[str, Any]:\n    \"\"\"Start HTTP MCP server on port 8013\"\"\"\n    import subprocess\n    try:\n        # Check if already running\n        status = mcp_http_status()\n        if status[\"running\"]:\n            return {\"success\": False, \"error\": \"HTTP MCP already running on port 8013\"}\n        \n        # Start in background\n        subprocess.Popen(\n            [str(ROOT / \".venv\" / \"bin\" / \"python\"), \"-m\", \"server.mcp.http\"],\n            cwd=str(ROOT),\n            stdout=open(\"/tmp"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/server/mcp/__init__.py:1-7", "/Users/davidmontgomery/agro-rag-engine/server/mcp/server.py:1-312", "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-39"], "source": "golden.json"}
{"query": "How does the file selection and upload work in the GUI?", "positive_text": "// Secrets - Drag & Drop secrets file ingestion\n// Handles .env file upload and secrets management\n;(function() {\n  'use strict';\n\n  // Get shared utilities\n  const api = window.CoreUtils?.api || ((p) => `/api${p}`);\n  const $ = window.CoreUtils?.$ || ((s) => document.querySelector(s));\n\n  // Ingest a secrets file\n  async function ingestFile(file) {\n    const persist = $('#persist-secrets')?.checked || false;\n    const fd = new FormData();\n    fd.append('file', file);\n    fd.append('persist', St", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/secrets.js:1-45", "negative_texts": ["    if (folderBtn && folderPicker){ folderBtn.addEventListener('click', ()=>folderPicker.click()); folderPicker.addEventListener('change',(e)=>{ if(e.target.files && e.target.files.length>0){ const path=e.target.files[0].webkitRelativePath || e.target.files[0].path || ''; const folderName = path.split('/')[0] || 'Selected folder'; if (folderDisplay) folderDisplay.textContent = folderName; if (folderPath) folderPath.value = folderName; } }); }\n    $$('.ob-ask-btn').forEach(btn=>{ btn.addEventList", "        if (path && !path.value.trim()){ alert('Please select a folder or enter a path'); return; }\n        onboardingState.projectDraft.folderPath = path ? path.value.trim() : '';\n      } else if (mode === 'github'){\n        const url = $('#onboard-github-url'); if (url && !url.value.trim()){ alert('Please enter a GitHub repository URL'); return; }\n        onboardingState.projectDraft.githubUrl = url ? url.value.trim() : '';\n        const branch = $('#onboard-github-branch'); const token = $('#", "// gui/js/reranker.js - Learning Reranker UI Module\n// Handles feedback collection, triplet mining, training, evaluation, and all reranker features\n\n// ============ FEEDBACK SYSTEM ============\n\n// Track file link clicks\nwindow.trackFileClick = async function(eventId, docId) {\n    if (!eventId || !docId) return;\n    \n    try {\n        await fetch('/api/reranker/click', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ ev", "      }\n    } catch (e) {\n      console.error('[onboarding.js] Failed to save onboarding completion:', e);\n    }\n  }\n\n  function initOnboarding(){\n    try{ const savedStep = localStorage.getItem('onboarding_step'); if(savedStep){ const step=parseInt(savedStep,10); if(step>=1 && step<=onboardingState.maxStep){ onboardingState.step = step; } } }catch{}\n    $$('.ob-card').forEach(card=>{ card.addEventListener('click', ()=>{ const choice = card.getAttribute('data-choice'); onboardingState.projectDra"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/onboarding.js:1-6", "/Users/davidmontgomery/agro-rag-engine/gui/js/onboarding.js:1-20", "/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/onboarding.js:1-12"], "source": "golden.json"}
{"query": "Where is the golden questions test runner?", "positive_text": "#!/usr/bin/env python3\nimport os\nimport json\nimport time\nfrom typing import List\nfrom dotenv import load_dotenv\nfrom retrieval.hybrid_search import search_routed, search_routed_multi\n\nload_dotenv()\n\nGOLDEN_PATH = os.getenv('GOLDEN_PATH', 'golden.json')\nUSE_MULTI = os.getenv('EVAL_MULTI','1') == '1'\nFINAL_K = int(os.getenv('EVAL_FINAL_K','5'))\nMULTI_M = int(os.getenv('EVAL_MULTI_M', '10'))  # Multi-query expansion count\n\n\"\"\"\nGolden file format (golden.json):\n[\n  {\"q\": \"Where is ProviderSetupWizar", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/eval/eval_rag.py:1-25", "negative_texts": ["// Evaluation Runner\n// Handles running full evaluation suite and displaying results\n\nlet evalResults = null;\nlet evalPollingInterval = null;\n\n// Run full evaluation\nasync function runEvaluation() {\n    const useMulti = document.getElementById('eval-use-multi').value === '1';\n    const finalK = parseInt(document.getElementById('eval-final-k').value) || 5;\n\n    const btn = document.getElementById('btn-eval-run');\n    btn.disabled = true;\n    btn.textContent = 'Starting...';\n\n    try {\n        con", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "main():\n    with GOLDEN.open() as f:\n        questions = [q for q in json.load(f) if 'q' in q]\n    \n    print(f\"🔬 GRID SEARCH - Tuning RAG parameters\")\n    print(f\"   {len(questions)} golden questions\")\n    print(f\"   Testing parameter combinations...\\n\")\n    \n    # Parameter grid\n    grid = {\n        'topk_dense': [50, 75, 100],\n        'topk_sparse': [50, 75, 100],\n        # Add more params as needed\n    }\n    \n    results = []\n    \n    # Baseline\n    print(\"📊 Testing baseline...\")\n    baselin", "        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/eval_runner.js:1-61", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/eval/tune_params.py:1-47", "/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74"], "source": "golden.json"}
{"query": "Where is the infrastructure management in the GUI?", "positive_text": "                ],\n                links: [\n                    ['Docker Getting Started', 'https://docs.docker.com/get-started/'],\n                    ['Docker Compose Documentation', 'https://docs.docker.com/compose/']\n                ]\n            }) : `Failed to start infrastructure: ${e.message}`;\n            if (window.showStatus) {\n                window.showStatus(msg, 'error');\n            } else {\n                alert(msg);\n            }\n        } finally {\n            if (btn) btn.di", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/docker.js:1-43", "negative_texts": ["        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "        [\n          ['repos.json Format', '/files/repos.json'],\n          ['Migration Guide', '/docs/MIGRATION.md#legacy-env-vars'],\n          ['REPO_PATH Setting', '/docs/CONFIGURATION.md#repo-path']\n        ],\n        [['Deprecated', 'warn'], ['Use repos.json instead', 'warn']]\n      ),\n      agro_PATH_BOOSTS: L(\n        'agro Path Boosts (CSV)',\n        'DEPRECATED: Legacy comma-separated path boosts for the \"agro\" repository only (e.g., \"app/,lib/,config/\"). Repo-specific environment variabl", "        [\n          ['Multi-Query RAG', 'https://arxiv.org/abs/2305.14283'],\n          ['Evaluation Setup', '/docs/EVALUATION.md#multi-query'],\n          ['MQ_REWRITES Setting', '/docs/RETRIEVAL.md#multi-query']\n        ],\n        [['Affects eval time', 'warn']]\n      ),\n      EVAL_FINAL_K: L(\n        'Eval Final‑K',\n        'Number of top results to consider when evaluating Hit@K metrics. If set to 10, eval checks if the expected answer appears in the top 10 results. Lower values (5) test preci", "        setInterval(() => {\n            const infraTab = $('#tab-infrastructure');\n            if (infraTab && infraTab.classList.contains('active')) {\n                updateHTTPStatus();\n            }\n        }, 10000);\n    }\n\n    // Export to window\n    window.MCPServer = {\n        updateHTTPStatus,\n        startHTTPServer,\n        stopHTTPServer,\n        restartHTTPServer,\n        testStdioServer,\n        initMCPServerUI\n    };\n\n    // Initialization function for infrastructure view\n    windo"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-22", "/Users/davidmontgomery/agro-rag-engine/gui/js/mcp_server.js:1-39"], "source": "golden.json"}
{"query": "How does the reranker UI component work?", "positive_text": "initRerankerUI() {\n    // Mine button\n    const mineBtn = document.getElementById('reranker-mine-btn');\n    if (mineBtn) {\n        mineBtn.addEventListener('click', async () => {\n            mineBtn.disabled = true;\n            mineBtn.textContent = 'Mining...';\n            try {\n                await mineTriplets();\n            } catch (error) {\n                alert(error.message);\n            } finally {\n                setTimeout(() => {\n                    mineBtn.disabled = false;\n        ", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/reranker.js:1-97", "negative_texts": ["    alert('Embedding model added.');\n  }\n\n  async function addRerankModelFlow(){\n    const provider = promptStr('Rerank provider (cohere, local, hf)', 'cohere');\n    if (!provider) return;\n    let model = promptStr('Rerank model ID (e.g., rerank-3.5 or BAAI/bge-reranker-v2-m3)', provider === 'cohere' ? 'rerank-3.5' : 'BAAI/bge-reranker-v2-m3');\n    const baseUrl = promptStr('Base URL (optional)', '');\n    let apiKey = '';\n    if (provider === 'cohere') apiKey = promptStr('Cohere API Key (optiona", "      ]),\n      COHERE_API_KEY: L('Cohere API Key', 'API key for Cohere reranking when RERANK_BACKEND=cohere.', [\n        ['Cohere Dashboard: API Keys', 'https://dashboard.cohere.com/api-keys']\n      ]),\n      COHERE_RERANK_MODEL: L('Cohere Rerank Model', 'Cohere rerank model name (e.g., rerank-3.5). Check the provider docs for the latest list and pricing.', [\n        ['Cohere Docs: Models', 'https://docs.cohere.com/docs/models']\n      ]),\n      RERANKER_MODEL: L(\n        'Local Reranker (HF)',\n", "        ['OpenAI Embeddings', 'https://platform.openai.com/docs/guides/embeddings'],\n        ['Voyage AI Embeddings', 'https://docs.voyageai.com/docs/embeddings'],\n        ['Google Gemini Embeddings', 'https://ai.google.dev/gemini-api/docs/embeddings'],\n        ['SentenceTransformers Docs', 'https://www.sbert.net/']\n      ], [['Requires reindex','reindex']]),\n      VOYAGE_API_KEY: L('Voyage API Key', 'API key for Voyage AI embeddings when EMBEDDING_TYPE=voyage.', [\n        ['Voyage AI Docs', 'ht", "            if (embList) setOpts(embList, unique(items));\n            if (input && items.length && !items.includes(input.value)) input.value = '';\n        }\n        function normProviderName(p){\n            p = String(p||'').toLowerCase();\n            if (p === 'hf' || p === 'hugging face') return 'huggingface';\n            return p;\n        }\n        function updateRerankList(){\n            const sel = document.getElementById('cost-rerank-provider');\n            const input = document.getElemen"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/js/model_flows.js:1-21", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-14", "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-15", "/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-24"], "source": "golden.json"}
{"query": "How does the profiles system work for saving configurations?", "positive_text": "profiles_list() -> Dict[str, Any]:\n    prof_dir = GUI_DIR / \"profiles\"\n    prof_dir.mkdir(parents=True, exist_ok=True)\n    names = []\n    for p in prof_dir.glob(\"*.json\"):\n        names.append(p.stem)\n    return {\"profiles\": sorted(names), \"default\": None}\n\n@app.get(\"/api/profiles/{name}\")profiles_get(name: str) -> Dict[str, Any]:\n    prof_dir = GUI_DIR / \"profiles\"\n    path = prof_dir / f\"{name}.json\"\n    if not path.exists():\n        raise HTTPException(status_code=404, detail=f\"Profile '{name", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/app.py:1-26", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "\"\"\"Path configuration for AGRO RAG Engine.\"\"\"\nfrom pathlib import Path\nimport os\n\nrepo_root() -> Path:\n    \"\"\"Return the root directory of the repository.\"\"\"\n    return Path(__file__).resolve().parent\n\ndata_dir() -> Path:\n    \"\"\"Return the data directory for storing index artifacts.\"\"\"\n    root = repo_root()\n    data = root / \"data\"\n    data.mkdir(exist_ok=True)\n    return data\n", "import React from 'react';\nimport ComponentCreator from '@docusaurus/ComponentCreator';\n\nexport default [\n  {\n    path: '/agro-rag-engine/__docusaurus/debug',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug', '5a0'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/config',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/config', '84e'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/content',\n    component"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/path_config.py:1-15", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-33"], "source": "golden.json"}
{"query": "Where is the VS Code integration for embedded editor?", "positive_text": "// AGRO GUI - VS Code Integration Module (Compatibility Layer)\n// Provides backward-compatible API wrapping the unified Editor module\n// This module is now primarily a shim for the newer editor.js implementation\n;(function() {\n    'use strict';\n\n    /**\n     * Show the VS Code editor - delegates to Editor module\n     */\n    function showEditor() {\n        console.log('[VSCode] Delegating showEditor to Editor module');\n        const container = document.getElementById('editor-iframe-container');\n", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/vscode.js:1-37", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "import React from 'react';\nimport ComponentCreator from '@docusaurus/ComponentCreator';\n\nexport default [\n  {\n    path: '/agro-rag-engine/__docusaurus/debug',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug', '5a0'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/config',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/config', '84e'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/content',\n    component", "  \"content---agro-rag-engine-configuration-modelse-23-af5\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-modelse-23-af5\" */ \"@site/docs/configuration/models.md\"), \"@site/docs/configuration/models.md\", require.resolveWeak(\"@site/docs/configuration/models.md\")],\n  \"content---agro-rag-engine-configuration-performanceeec-690\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-performanceeec-690\" */ \"@site/docs/configuration/performance.md\"), \""], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-33", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-5"], "source": "golden.json"}
{"query": "How does the feedback collection system work?", "positive_text": "from fastapi import APIRouter, HTTPException\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, Dict, Any\nfrom .telemetry import log_feedback_event\n\nrouter = APIRouter()\nFeedbackBody(BaseModel):\n    event_id: str = Field(..., description=\"event id returned by the ask call\")\n    signal: str = Field(..., description=\"thumbsup | thumbsdown | click | noclick\")\n    doc_id: Optional[str] = None\n    note: Optional[str] = None\n\n@router.post(\"/api/feedback\")", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/server/feedback.py:1-13", "negative_texts": ["        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          type: 'docSidebar',\n          sidebarId: 'docs',\n          position: 'left',\n          label: 'Docs',\n        },\n        {\n          href: 'https://github.com/DMontgomery40/agro-rag-engine',\n          label: 'GitHub',\n          position: 'right',\n        },\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Documentation',\n          items: [\n            {\n              label: 'Quic", "                component: ComponentCreator('/agro-rag-engine/api/mcp-tools', 'fd2'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/api/reference',\n                component: ComponentCreator('/agro-rag-engine/api/reference', 'b63'),\n                exact: true,\n                sidebar: \"docs\"\n              },\n              {\n                path: '/agro-rag-engine/configuration/alerting',\n                com", "import React from 'react';\nimport ComponentCreator from '@docusaurus/ComponentCreator';\n\nexport default [\n  {\n    path: '/agro-rag-engine/__docusaurus/debug',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug', '5a0'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/config',\n    component: ComponentCreator('/agro-rag-engine/__docusaurus/debug/config', '84e'),\n    exact: true\n  },\n  {\n    path: '/agro-rag-engine/__docusaurus/debug/content',\n    component", "  \"content---agro-rag-engine-configuration-modelse-23-af5\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-modelse-23-af5\" */ \"@site/docs/configuration/models.md\"), \"@site/docs/configuration/models.md\", require.resolveWeak(\"@site/docs/configuration/models.md\")],\n  \"content---agro-rag-engine-configuration-performanceeec-690\": [() => import(/* webpackChunkName: \"content---agro-rag-engine-configuration-performanceeec-690\" */ \"@site/docs/configuration/performance.md\"), \""], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/website/docusaurus.config.ts:1-74", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-38", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/routes.js:1-33", "/Users/davidmontgomery/agro-rag-engine/website/.docusaurus/registry.js:1-5"], "source": "golden.json"}
{"query": "Where are GUI tooltips implemented?", "positive_text": "        ['Docs: Shared Index', '/files/README.md']\n      ], [['Requires restart (MCP)','info']]),\n      RAG_OUT_BASE: L(\n        'RAG Out Base',\n        'Optional override for OUT_DIR_BASE setting. Advanced users can set this to use a different output directory for specific retrieval operations while keeping OUT_DIR_BASE for indexing. Most users should leave this empty and only configure OUT_DIR_BASE. Used internally by loader modules.',\n        [\n          ['Directory Structure', '/docs/DIRECTO", "positive_doc_id": "/Users/davidmontgomery/agro-rag-engine/gui/js/tooltips.js:1-23", "negative_texts": ["            }\n        }\n    }\n\n    try { window.jumpToLine = jumpToLine; } catch {}\n\n    // Cards module auto-binds on DOMContentLoaded (see gui/js/cards.js)\n\n    // ---------------- Help Tooltips ----------------\n    function addHelpTooltips() {\n        const HELP = {\n            // Generation\n            GEN_MODEL: 'Primary inference model for generation (e.g., gpt-4o-mini or qwen3-coder:14b).',\n            OPENAI_API_KEY: 'API key for OpenAI-compatible endpoints (generation/embeddings).',\n   ", "// API Base URL Override - sets AGRO API endpoints\n(() => {\n  'use strict';\n\n  const BASE = window.location.origin + '/api';\n\n  function setupAPI() {\n    if (!window.CoreUtils) {\n      setTimeout(setupAPI, 100);\n      return;\n    }\n\n    try {\n      window.CoreUtils.API_BASE = BASE;\n\n      // Helper to build API URLs\n      window.CoreUtils.api = function(path) {\n        const p = String(path || '');\n        if (p.startsWith('/api/')) return BASE + p.slice(4);\n        if (p.startsWith('/')) return"], "negative_doc_ids": ["/Users/davidmontgomery/agro-rag-engine/gui/app.js:1-26", "/Users/davidmontgomery/agro-rag-engine/gui/api-base-override.js:1-37"], "source": "golden.json"}
