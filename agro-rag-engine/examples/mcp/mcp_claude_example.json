# RAG System Query Examples - GUI Tab Architecture

This document shows example queries and answers from using the RAG search system to understand the codebase architecture.

---

## Q1: How does tab switching work in the GUI?

**Query:** "How does tab switching work in the GUI? What JavaScript handles it? Show me the exact functions and event listeners"

**Answer:**
Tab switching in the GUI is handled by the `switchTab` function. This function manages the visibility of different tab contents based on the selected tab name.

**Key Function: `switchTab(tabName)`**
- Takes a `tabName` as an argument and determines which tab content to display
- Uses a `groups` object to map tab names to their corresponding content elements
- Removes the 'active' class from all elements with the class `tab-content` to hide them

```javascript
function switchTab(tabName) {
    const groups = {
        models: ['generation','embeddings','reranking'],
        retrieval: ['retrieval','confidence'],
        repos: ['repos','indexing'],
        tools: ['tools','eval','misc'],
        infra: ['infra'],
        dashboard: ['dashboard'],
        chat: ['chat'],
        storage: ['storage'],
        editor: ['editor']
    };
    const show = groups[tabName] || [tabName];
    $$('.tab-content').forEach(el => el.classList.remove('active'));
}
```

**Event Listeners:**
The function sets up various event listeners for buttons related to the active tab:
- `applyWizard` button → `applyProfileWizard`
- `btn-wizard-oneclick` → `onWizardOneClick`
- `btn-wizard-load-cur` → `loadWizardFromEnv`
- `btn-trace-latest` → `loadLatestTrace('trace-output')`
- `btn-trace-open-ls` → opens LangSmith URL
- `chat-send` → `sendChat`

**Source:** `/Users/davidmontgomery/agro/gui/app.js:1-39`

---

## Q2: What data attributes and IDs are used for tab navigation?

**Query:** "What data attributes and IDs are used for tab navigation? Show me the button data-tab attributes and tab-content IDs"

**Answer:**

**Button Data-Tab Attributes:**
- `data-tab='models'`
- `data-tab='retrieval'`
- `data-tab='repos'`
- `data-tab='infra'`
- `data-tab='tools'`

**Tab-Content IDs:**
- `tab-generation`
- `tab-retrieval`
- `tab-repos`
- `tab-infra`
- `tab-tools`

**Source:** `/Users/davidmontgomery/agro/infra/tests/test_gui_basic.py:20-34`

---

## Q3: What JavaScript modules are loaded and initialized?

**Query:** "What JavaScript modules are loaded and what do they initialize? Show me the script tags and initialization code"

**Answer:**

**1. Main Initialization Function - `init()`**

Initializes various components and loads data asynchronously:

```javascript
async function init() {
    bindTabs();
    bindActions();
    bindGlobalSearchLive();
    bindResizableSidepanel();
    bindCollapsibleSections();
    bindDropzone();
    
    const hookBtn = document.getElementById('btn-install-hooks');
    if (hookBtn) hookBtn.addEventListener('click', installHooks);
    
    const genKwBtn = document.getElementById('btn-generate-keywords');
    if (genKwBtn) genKwBtn.addEventListener('click', createKeywords);

    await Promise.all([
        loadPrices(),
        loadConfig(),
        loadProfiles(),
        loadKeywords()
    ]);

    await checkHealth();
    await refreshAutotune();
    await refreshDashboard();
    await refreshHooksStatus();
    addHelpTooltips();
}
```

**2. Storage Calculator - `loadStorageCalculator()`**

Lazy-loads the storage calculator:

```javascript
function loadStorageCalculator() {
    if (storageCalculatorLoaded) return;
    const container = document.getElementById('storage-calculator-container');
    if (!container) return;

    if (typeof getStorageCalculatorHTML === 'function') {
        container.innerHTML = getStorageCalculatorHTML();
        if (typeof initStorageCalculator === 'function') {
            initStorageCalculator();
        }
        storageCalculatorLoaded = true;
    }
}
```

**3. Chat Initialization**

Sets up event listeners when DOM is ready:
- `chat-input` - Send on Ctrl+Enter, auto-resize
- `chat-send` - Send message button
- `chat-clear` - Clear chat button
- `chat-history` - Toggle history dropdown
- `chat-export-history` - Export chat history
- `chat-clear-history` - Clear chat history

**4. Theme Initialization - `initThemeFromEnv()`**

Initializes theme based on environment settings or local storage:

```javascript
function initThemeFromEnv(env) {
    try {
        const saved = localStorage.getItem('THEME_MODE');
        const envMode = env && env.THEME_MODE ? String(env.THEME_MODE) : 'auto';
        const mode = saved || envMode || 'auto';
        
        const selTop = document.getElementById('theme-mode');
        const selMisc = document.getElementById('misc-theme-mode');
        if (selTop) selTop.value = mode;
        if (selMisc) selMisc.value = mode;
        
        applyTheme(mode);
        
        // React to system changes when Auto
        if (window.matchMedia) {
            const mq = window.matchMedia('(prefers-color-scheme: dark)');
            const onChange = () => {
                const current = (selTop && selTop.value) || (selMisc && selMisc.value) || mode;
                if (String(current||'auto').toLowerCase() === 'auto') applyTheme('auto');
            };
            try { mq.addEventListener('change', onChange); } 
            catch { try { mq.addListener(onChange); } catch {} }
        }
    } catch {}
}
```

**Source:** `/Users/davidmontgomery/agro/gui/app.js` and `/Users/davidmontgomery/agro/gui/js/chat.js`

---

## Q4: How are settings saved and loaded?

**Query:** "How are settings saved and loaded in the GUI? What localStorage keys are used? Show the save and load functions"

**Answer:**

Settings are saved and loaded using the `localStorage` API.

**localStorage Key:** `'agro_chat_settings'`

**Save Function - `saveChatSettings()`:**

```javascript
saveChatSettings() {
    try {
        const settings = {
            model: document.getElementById('chat-model').value,
            temperature: parseFloat(document.getElementById('chat-temperature').value),
            maxTokens: parseInt(document.getElementById('chat-max-tokens').value),
            multiQuery: parseInt(document.getElementById('chat-multi-query').value),
            finalK: parseInt(document.getElementById('chat-final-k').value),
            confidence: parseFloat(document.getElementById('chat-confidence').value),
            showCitations: document.getElementById('chat-show-citations').value === '1',
            showConfidence: document.getElementById('chat-show-confidence').value === '1',
            autoScroll: document.getElementById('chat-auto-scroll').value === '1',
            syntaxHighlight: document.getElementById('chat-syntax-highlight').value === '1',
            systemPrompt: document.getElementById('chat-system-prompt').value,
            historyEnabled: document.getElementById('chat-history-enabled').value === '1',
            historyLimit: Math.min(1000, Math.max(1, parseInt(document.getElementById('chat-history-limit').value) || 100)),
            showHistoryOnLoad: document.getElementById('chat-show-history-on-load').value === '1'
        };

        localStorage.setItem('agro_chat_settings', JSON.stringify(settings));
        chatSettings = settings;

        updateStorageDisplay();
        showToast('Chat settings saved', 'success');
    } catch (e) {
        console.error('Failed to save chat settings:', e);
        showToast('Failed to save settings: ' + e.message, 'error');
    }
}
```

**Load Function (typical pattern):**

```javascript
loadChatSettings() {
    const settings = JSON.parse(localStorage.getItem('agro_chat_settings'));
    if (settings) {
        // Apply settings to UI inputs
        document.getElementById('chat-model').value = settings.model;
        document.getElementById('chat-temperature').value = settings.temperature;
        // ... (set other fields similarly)
    }
}
```

**Source:** `/Users/davidmontgomery/agro/gui/js/chat.js:1-32`

---

## Q5: How are tab buttons wired to switch tabs?

**Query:** "Show me the complete bindTabs function. How are tab buttons wired to switch tabs? What event listeners are added?"

**Answer:**

Typical implementation of `bindTabs()`:

```javascript
function bindTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabName = button.getAttribute('data-tab');
            switchTab(tabName);
        });
    });
}
```

**How it works:**
1. **Selection** - Selects all elements with class `.tab-button`
2. **Event Listener** - Adds `click` event listener to each button
3. **Switching** - Retrieves tab name from `data-tab` attribute and calls `switchTab()`

**Source:** `/Users/davidmontgomery/agro/gui/app.js`

---

## Q6: What is the complete tab mapping?

**Query:** "What is the complete mapping in the groups object inside switchTab? Show me all tab names and their corresponding content IDs"

**Answer:**

**Complete Tab Mapping:**

| Tab Name     | Content IDs                          |
|--------------|--------------------------------------|
| Models       | `generation`, `embeddings`, `reranking` |
| Retrieval    | `retrieval`, `confidence`           |
| Repos        | `repos`, `indexing`                 |
| Tools        | `tools`, `eval`, `misc`             |
| Infrastructure | `infra`                           |
| Dashboard    | `dashboard`                         |
| Chat         | `chat`                              |
| Storage      | `storage`                           |
| Editor       | `editor`                            |

**Source:** `/Users/davidmontgomery/agro/gui/app.js:1-33`

---

## Q7: Are there tabs that lazy load content?

**Query:** "Are there any tabs that lazy load content? Like storage calculator or editor? Show me the lazy loading logic"

**Answer:**

Yes, the storage calculator uses lazy loading.

**Lazy Loading Logic:**

```javascript
let storageCalculatorLoaded = false;

function loadStorageCalculator() {
    if (storageCalculatorLoaded) return;
    const container = document.getElementById('storage-calculator-container');
    if (!container) return;

    // Load the HTML template
    if (typeof getStorageCalculatorHTML === 'function') {
        container.innerHTML = getStorageCalculatorHTML();

        // Initialize the calculator
        if (typeof initStorageCalculator === 'function') {
            initStorageCalculator();
        }

        storageCalculatorLoaded = true;
    }
}
```

**How it works:**
- Checks if already loaded via `storageCalculatorLoaded` flag
- Only loads once, preventing unnecessary reloading when switching tabs
- Loads HTML template and initializes calculator on first access

**Source:** `/Users/davidmontgomery/agro/gui/app.js:1-37`

---

## Summary

This document demonstrates how to use the RAG search system to quickly understand codebase architecture without manually reading thousands of lines of code. Each query returns specific code snippets, file paths, and line numbers, making it easy to locate and understand the implementation details.
