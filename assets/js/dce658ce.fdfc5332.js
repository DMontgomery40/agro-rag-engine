"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[930],{5205:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"features/mcp","title":"MCP Integration","description":"The Model Context Protocol (MCP) integration allows AI agents like Codex and Claude Code to directly query AGRO\'s RAG system through a standardized interface.","source":"@site/docs/features/mcp.md","sourceDirName":"features","slug":"/features/mcp","permalink":"/agro-rag-engine/features/mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/DMontgomery40/agro-rag-engine/tree/main/website/docs/features/mcp.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"Learning Reranker System","permalink":"/agro-rag-engine/features/learning-reranker"},"next":{"title":"Chat Interface","permalink":"/agro-rag-engine/features/chat-interface"}}');var i=r(4848),l=r(8453);const t={sidebar_position:3},o="MCP Integration",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Available Tools",id:"available-tools",level:3},{value:"stdio Mode (4 tools)",id:"stdio-mode-4-tools",level:4},{value:"HTTP Mode (2 tools)",id:"http-mode-2-tools",level:4},{value:"Quick Start",id:"quick-start",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Shared Index Setup (Recommended)",id:"shared-index-setup-recommended",level:3},{value:"Register with Codex",id:"register-with-codex",level:3},{value:"Test MCP Server",id:"test-mcp-server",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Example 1: Ask a Question",id:"example-1-ask-a-question",level:3},{value:"Example 2: Debug Retrieval",id:"example-2-debug-retrieval",level:3},{value:"Example 3: Trigger Netlify Deploy",id:"example-3-trigger-netlify-deploy",level:3},{value:"Example 4: Fetch Allowlisted Docs",id:"example-4-fetch-allowlisted-docs",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Default Behavior",id:"default-behavior",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Agent Rules",id:"agent-rules",level:2},{value:"Evaluation Loop",id:"evaluation-loop",level:2},{value:"Adding Golden Test Cases",id:"adding-golden-test-cases",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"&quot;Graph not initialized&quot;",id:"graph-not-initialized",level:3},{value:"&quot;No results returned&quot;",id:"no-results-returned",level:3},{value:"&quot;Codex can&#39;t find the tools&quot;",id:"codex-cant-find-the-tools",level:3},{value:"Netlify Deploy Errors",id:"netlify-deploy-errors",level:3},{value:"web_get Blocked",id:"web_get-blocked",level:3},{value:"References",id:"references",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mcp-integration",children:"MCP Integration"})}),"\n",(0,i.jsx)(n.p,{children:"The Model Context Protocol (MCP) integration allows AI agents like Codex and Claude Code to directly query AGRO's RAG system through a standardized interface."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"AGRO provides two MCP modes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"stdio mode"})," (",(0,i.jsx)(n.code,{children:"mcp_server.py"}),") - Full tool access for local agents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTP mode"})," (",(0,i.jsx)(n.code,{children:"mcp_server_http.py"}),") - RAG-only for remote platforms"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"available-tools",children:"Available Tools"}),"\n",(0,i.jsx)(n.h4,{id:"stdio-mode-4-tools",children:"stdio Mode (4 tools)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"rag_answer(repo, question)"})," - Full LangGraph pipeline with answer + citations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"rag_search(repo, question, top_k=10)"})," - Retrieval-only for debugging"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"netlify_deploy(domain)"})," - Trigger Netlify builds (requires ",(0,i.jsx)(n.code,{children:"NETLIFY_API_KEY"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"web_get(url, max_bytes=20000)"})," - HTTP GET for allowlisted hosts only"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"http-mode-2-tools",children:"HTTP Mode (2 tools)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"answer"})," - RAG answer generation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"search"})," - RAG retrieval only"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"When to use each:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"stdio"}),": Local agents (Codex CLI, Claude Code) needing full tool access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTP"}),": Remote agents/platforms requiring only RAG capabilities"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 1. Start infrastructure and MCP\nbash scripts/up.sh\n\n# 2. Activate virtualenv\n. .venv/bin/activate\n\n# 3. Index your repository\nREPO=agro python index_repo.py\n\n# 4. Install Codex CLI (if not already installed)\nbrew install openai/tap/codex\n# or\nnpm install -g @openai/codex\n"})}),"\n",(0,i.jsx)(n.h3,{id:"shared-index-setup-recommended",children:"Shared Index Setup (Recommended)"}),"\n",(0,i.jsx)(n.p,{children:'MCP often runs in a different process than your shell. To avoid "no results" errors from mismatched paths, use a shared index:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:". .venv/bin/activate\n\n# Create shared index\nREPO=agro OUT_DIR_BASE=./out.noindex-shared EMBEDDING_TYPE=local SKIP_DENSE=1 \\\n  python index_repo.py\n\n# Set environment for shared index\nsource scripts/select_index.sh shared\n\n# Start services with shared profile\nbash scripts/up.sh && bash scripts/status.sh\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also persist these settings via the GUI:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Infrastructure tab \u2192 set ",(0,i.jsx)(n.code,{children:"Out Dir Base=./out.noindex-shared"})]}),"\n",(0,i.jsx)(n.li,{children:'Click "Apply All Changes"'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"register-with-codex",children:"Register with Codex"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"codex mcp add agro-rag -- \\\n  /absolute/path/to/agro-rag-engine/.venv/bin/python \\\n  /absolute/path/to/agro-rag-engine/mcp_server.py\n"})}),"\n",(0,i.jsx)(n.p,{children:"Verify registration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"codex mcp list\n# Should show: agro-rag\n"})}),"\n",(0,i.jsx)(n.h3,{id:"test-mcp-server",children:"Test MCP Server"}),"\n",(0,i.jsx)(n.p,{children:"Test the protocol directly:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:". .venv/bin/activate\n\n# Test tools/list\npython -c \"\nimport json\nfrom server.mcp.server import MCPServer\nreq = {'jsonrpc': '2.0', 'id': 1, 'method': 'tools/list', 'params': {}}\nserver = MCPServer()\nprint(json.dumps(server.handle_request(req), indent=2))\n\"\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-ask-a-question",children:"Example 1: Ask a Question"}),"\n",(0,i.jsx)(n.p,{children:"In a Codex chat session:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'User: Use rag_answer to find where OAuth tokens are validated in agro\n\nCodex calls: rag_answer(repo="agro", question="Where is OAuth token validated?")\n\nReturns:\n{\n  "answer": "[repo: agro]\\nOAuth tokens are validated in...",\n  "citations": [\n    "identity/auth/oauth.py:42-67",\n    "identity/middleware/token.py:89-120"\n  ],\n  "repo": "agro",\n  "confidence": 0.78\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-debug-retrieval",children:"Example 2: Debug Retrieval"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'User: Use rag_search to see what code comes up for "indexing" in agro\n\nCodex calls: rag_search(repo="agro", question="How does indexing work?", top_k=5)\n\nReturns:\n{\n  "results": [\n    {\n      "file_path": "indexer/index_repo.py",\n      "start_line": 45,\n      "end_line": 89,\n      "language": "python",\n      "rerank_score": 0.82,\n      "repo": "agro"\n    },\n    ...\n  ],\n  "repo": "agro",\n  "count": 5\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-3-trigger-netlify-deploy",children:"Example 3: Trigger Netlify Deploy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'User: Use netlify_deploy to rebuild example.net\n\nReturns:\n{\n  "results": [\n    {\n      "domain": "example.net",\n      "status": "triggered",\n      "site_id": "abc123",\n      "build_id": "def456"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-4-fetch-allowlisted-docs",children:"Example 4: Fetch Allowlisted Docs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'User: Use web_get to fetch https://github.com/openai/codex\n\nReturns: {\n  "url": "https://github.com/openai/codex",\n  "status": 200,\n  "length": 12345,\n  "clipped": true,\n  "content_preview": "..."\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"default-behavior",children:"Default Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Generation"}),": Defaults to local Qwen 3 (Ollama). Configure via ",(0,i.jsx)(n.code,{children:"GEN_MODEL"})," and ",(0,i.jsx)(n.code,{children:"OLLAMA_URL"}),", or switch to OpenAI by setting ",(0,i.jsx)(n.code,{children:"OPENAI_API_KEY"})," and ",(0,i.jsx)(n.code,{children:"GEN_MODEL"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reranking"}),": Defaults to local cross-encoder. Set ",(0,i.jsx)(n.code,{children:"RERANK_BACKEND=cohere"})," + ",(0,i.jsx)(n.code,{children:"COHERE_API_KEY"})," for Cohere rerank-3.5."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LangGraph"}),": Compiles without Redis if unavailable; uses Redis checkpointing when present."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Required\nREPO=agro\n\n# Optional - Generation\nGEN_MODEL=gpt-4o-mini\nOPENAI_API_KEY=sk-...\nOLLAMA_URL=http://127.0.0.1:11434/api\n\n# Optional - Reranking\nRERANK_BACKEND=cohere\nCOHERE_API_KEY=...\n\n# Optional - Infrastructure\nREDIS_URL=redis://127.0.0.1:6379/0\nQDRANT_URL=http://127.0.0.1:6333\n"})}),"\n",(0,i.jsx)(n.h2,{id:"agent-rules",children:"Agent Rules"}),"\n",(0,i.jsx)(n.p,{children:"These rules ensure AI agents use RAG tools effectively:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Never assume the user is wrong"})," about file paths, function names, or code locations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always call RAG tools first"})," before claiming something doesn't exist"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Never hallucinate file paths"})," - use retrieval results as ground truth"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Respect repo boundaries"})," - separate repos must never be fused"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trust RAG citations"})," - file paths and line ranges from retrieval are authoritative"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"https://github.com/DMontgomery40/agro-rag-engine/blob/main/AGENTS.md",children:"AGENTS.md"})," for complete guidelines."]}),"\n",(0,i.jsx)(n.h2,{id:"evaluation-loop",children:"Evaluation Loop"}),"\n",(0,i.jsx)(n.p,{children:"Run continuous evaluation to track retrieval quality:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:". .venv/bin/activate\n\n# Run eval once\npython -m eval.eval_loop\n\n# Save baseline\npython -m eval.eval_loop --baseline\n\n# Compare against baseline\npython -m eval.eval_loop --compare\n\n# Watch mode (re-run on changes)\npython -m eval.eval_loop --watch\n\n# JSON output\npython -m eval.eval_loop --json\n"})}),"\n",(0,i.jsx)(n.h3,{id:"adding-golden-test-cases",children:"Adding Golden Test Cases"}),"\n",(0,i.jsxs)(n.p,{children:["Edit ",(0,i.jsx)(n.code,{children:"golden.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "q": "Where is ProviderSetupWizard rendered?",\n    "repo": "agro",\n    "expect_paths": ["ProviderSetupWizard", "admin_ui", "components"]\n  },\n  {\n    "q": "How do we queue outbound jobs?",\n    "repo": "agro",\n    "expect_paths": ["app/", "job", "queue"]\n  }\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"expect_paths"})," uses substring matching - any result containing one of these substrings counts as a hit."]}),"\n",(0,i.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Codex / Agent  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502 MCP (stdio)\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  mcp_server.py      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 rag_answer    \u2502\u2500\u2500\u253c\u2500\u2500> langgraph_app.py\n\u2502  \u2502 rag_search    \u2502\u2500\u2500\u253c\u2500\u2500> hybrid_search.py\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Qdrant + Redis     \u2502  (Docker Compose)\n\u2502  BM25 + Embeddings  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"graph-not-initialized",children:'"Graph not initialized"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Check Redis: ",(0,i.jsx)(n.code,{children:"docker exec rag-redis redis-cli ping"})]}),"\n",(0,i.jsxs)(n.li,{children:["Check Qdrant: ",(0,i.jsx)(n.code,{children:"curl -s http://127.0.0.1:6333/collections"})]}),"\n",(0,i.jsxs)(n.li,{children:["Verify ",(0,i.jsx)(n.code,{children:".env"})," has ",(0,i.jsx)(n.code,{children:"OPENAI_API_KEY"}),", ",(0,i.jsx)(n.code,{children:"REDIS_URL"}),", ",(0,i.jsx)(n.code,{children:"QDRANT_URL"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"no-results-returned",children:'"No results returned"'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Verify shared index exists: ",(0,i.jsx)(n.code,{children:"ls -lh out.noindex-shared/agro/chunks.jsonl"})]}),"\n",(0,i.jsxs)(n.li,{children:["Ensure MCP sees correct path:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"source scripts/select_index.sh shared\n"})}),"\n",'Or set via GUI \u2192 Infrastructure \u2192 "Apply All Changes"']}),"\n",(0,i.jsxs)(n.li,{children:["Re-index (fast BM25-only):","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:". .venv/bin/activate\nREPO=agro OUT_DIR_BASE=./out.noindex-shared EMBEDDING_TYPE=local SKIP_DENSE=1 \\\n  python index_repo.py\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Try retrieval directly:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:". .venv/bin/activate\nOUT_DIR_BASE=./out.noindex-shared python - <<'PY'\nfrom retrieval.hybrid_search import search_routed_multi\nprint(search_routed_multi('test', repo_override='agro', final_k=3))\nPY\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"codex-cant-find-the-tools",children:'"Codex can\'t find the tools"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Verify registration: ",(0,i.jsx)(n.code,{children:"codex mcp list"})]}),"\n",(0,i.jsxs)(n.li,{children:["Re-register: ",(0,i.jsx)(n.code,{children:"codex mcp remove agro-rag && codex mcp add agro-rag -- ..."})]}),"\n",(0,i.jsxs)(n.li,{children:["Check config: ",(0,i.jsx)(n.code,{children:"cat ~/.codex/config.toml | grep mcp"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"netlify-deploy-errors",children:"Netlify Deploy Errors"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure ",(0,i.jsx)(n.code,{children:"NETLIFY_API_KEY"})," is set in the environment running the MCP server"]}),"\n",(0,i.jsx)(n.li,{children:"Verify the target site domain exists in your Netlify account"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"web_get-blocked",children:"web_get Blocked"}),"\n",(0,i.jsx)(n.p,{children:"Only these hosts are allowed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"openai.com"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"platform.openai.com"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"github.com"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"openai.github.io"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developers.openai.com/codex/mcp/",children:"Codex MCP docs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://modelcontextprotocol.io/",children:"MCP specification"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://openai.github.io/openai-agents-python/",children:"OpenAI Agents SDK"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://openai.com/index/introducing-agentkit/",children:"AgentKit announcement"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(6540);const i={},l=s.createContext(i);function t(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);