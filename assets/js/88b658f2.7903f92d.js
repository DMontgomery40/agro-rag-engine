"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[132],{7230:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"features/rag","title":"RAG System","description":"AGRO\'s hybrid search architecture combines three retrieval methods, applies learned reranking, and uses confidence gating to prevent hallucination. This isn\'t \\"just throw it at a vector database\\" - it\'s a production-grade pipeline built for code retrieval.","source":"@site/docs/features/rag.md","sourceDirName":"features","slug":"/features/rag","permalink":"/agro-rag-engine/features/rag","draft":false,"unlisted":false,"editUrl":"https://github.com/DMontgomery40/agro-rag-engine/tree/main/website/docs/features/rag.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"First Steps","permalink":"/agro-rag-engine/getting-started/first-steps"},"next":{"title":"Learning Reranker System","permalink":"/agro-rag-engine/features/learning-reranker"}}');var i=r(4848),a=r(8453);const l={sidebar_position:1},o="RAG System",c={},t=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Hybrid Search Components",id:"hybrid-search-components",level:2},{value:"1. Multi-Query Expansion",id:"1-multi-query-expansion",level:3},{value:"2. BM25 Sparse Retrieval",id:"2-bm25-sparse-retrieval",level:3},{value:"3. Dense Vector Search (Qdrant)",id:"3-dense-vector-search-qdrant",level:3},{value:"4. Semantic Cards Retrieval",id:"4-semantic-cards-retrieval",level:3},{value:"Reciprocal Rank Fusion (RRF)",id:"reciprocal-rank-fusion-rrf",level:2},{value:"Cross-Encoder Reranking",id:"cross-encoder-reranking",level:2},{value:"Local Cross-Encoder (Default)",id:"local-cross-encoder-default",level:3},{value:"Cohere Rerank API",id:"cohere-rerank-api",level:3},{value:"Custom Trained Reranker",id:"custom-trained-reranker",level:3},{value:"Scoring Bonuses",id:"scoring-bonuses",level:2},{value:"Query Intent Classification",id:"query-intent-classification",level:3},{value:"Layer Bonuses (Configurable via GUI)",id:"layer-bonuses-configurable-via-gui",level:3},{value:"Path Bonuses",id:"path-bonuses",level:3},{value:"Language Bonuses (Code vs Docs)",id:"language-bonuses-code-vs-docs",level:3},{value:"Card Hit Bonus",id:"card-hit-bonus",level:3},{value:"Confidence Gating",id:"confidence-gating",level:2},{value:"Local Hydration",id:"local-hydration",level:2},{value:"Performance Tuning",id:"performance-tuning",level:2},{value:"Recall vs Latency",id:"recall-vs-latency",level:3},{value:"Multi-Query Expansion",id:"multi-query-expansion",level:3},{value:"Reranker Selection",id:"reranker-selection",level:3},{value:"Observability",id:"observability",level:2},{value:"LangTrace Spans",id:"langtrace-spans",level:3},{value:"Prometheus Metrics",id:"prometheus-metrics",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"&quot;No results found&quot;",id:"no-results-found",level:3},{value:"&quot;Results are wrong&quot;",id:"results-are-wrong",level:3},{value:"&quot;Embeddings failing&quot;",id:"embeddings-failing",level:3},{value:"Configuration Reference",id:"configuration-reference",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rag-system",children:"RAG System"})}),"\n",(0,i.jsx)(n.p,{children:"AGRO's hybrid search architecture combines three retrieval methods, applies learned reranking, and uses confidence gating to prevent hallucination. This isn't \"just throw it at a vector database\" - it's a production-grade pipeline built for code retrieval."}),"\n",(0,i.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Query Input\n  \u2193\nMulti-Query Expansion (4 variants)\n  \u2193\nParallel Retrieval:\n  \u251c\u2500 BM25 Sparse Search (keyword matching)\n  \u251c\u2500 Dense Vector Search (semantic similarity via Qdrant)\n  \u2514\u2500 Semantic Cards (high-level file summaries)\n  \u2193\nReciprocal Rank Fusion (RRF)\n  \u2193\nCross-Encoder Reranking (learned model)\n  \u2193\nScoring Bonuses (path, layer, language, card hits)\n  \u2193\nConfidence Gating & Local Hydration\n  \u2193\nTop-K Results with Citations\n"})}),"\n",(0,i.jsx)(n.h2,{id:"hybrid-search-components",children:"Hybrid Search Components"}),"\n",(0,i.jsx)(n.h3,{id:"1-multi-query-expansion",children:"1. Multi-Query Expansion"}),"\n",(0,i.jsx)(n.p,{children:"AGRO rewrites your query into multiple search-friendly variants to improve recall:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Original query\n"How are fax jobs created?"\n\n# Expanded variants (generated via LLM)\n[\n  "How are fax jobs created?",\n  "fax job creation workflow",\n  "fax job initialization and dispatch",\n  "create new fax job API"\n]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Each variant searches independently, then results are fused via RRF."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"expand_queries(query, m=4)"})," in ",(0,i.jsx)(n.code,{children:"retrieval/hybrid_search.py"})]}),"\n",(0,i.jsxs)(n.li,{children:["Controlled by ",(0,i.jsx)(n.code,{children:"m"})," parameter (default: 4 variants)"]}),"\n",(0,i.jsxs)(n.li,{children:["Disable: set ",(0,i.jsx)(n.code,{children:"m=1"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-bm25-sparse-retrieval",children:"2. BM25 Sparse Retrieval"}),"\n",(0,i.jsxs)(n.p,{children:["BM25S indexes use ",(0,i.jsx)(n.strong,{children:"stemmed tokens"})," with stopword removal for precise keyword matching:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from bm25s.tokenization import Tokenizer\nfrom Stemmer import Stemmer\n\ntokenizer = Tokenizer(stemmer=Stemmer('english'), stopwords='en')\ntokens = tokenizer.tokenize([query])\nids, scores = retriever.retrieve(tokens, k=75)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why BM25 matters for code:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exact matches for function names, class names, API endpoints"}),"\n",(0,i.jsx)(n.li,{children:"Handles acronyms, camelCase, snake_case better than embeddings"}),"\n",(0,i.jsx)(n.li,{children:"Language-agnostic (works on any text)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Index location:"})," ",(0,i.jsx)(n.code,{children:"data/{repo}/bm25_index/"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tuning:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TOPK_SPARSE=75"})," (default, set in ",(0,i.jsx)(n.code,{children:".env"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Higher = more recall, slower reranking"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-dense-vector-search-qdrant",children:"3. Dense Vector Search (Qdrant)"}),"\n",(0,i.jsx)(n.p,{children:"Semantic embeddings capture meaning beyond keywords:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get query embedding\nembedding = _get_embedding(query, kind=\"query\")\n\n# Search Qdrant collection\nresults = qc.query_points(\n    collection_name=f'code_chunks_{repo}',\n    query=embedding,\n    using='dense',\n    limit=75\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Embedding providers:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OpenAI"}),": ",(0,i.jsx)(n.code,{children:"text-embedding-3-large"})," (1536-dim, $0.00013/1k tokens)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Voyage AI"}),": ",(0,i.jsx)(n.code,{children:"voyage-code-3"})," (512-dim, $0.00012/1k tokens, code-optimized)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local"}),": Sentence Transformers (",(0,i.jsx)(n.code,{children:"BAAI/bge-small-en-v1.5"}),", free)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EMBEDDING_TYPE=openai|voyage|local"})," (",(0,i.jsx)(n.code,{children:".env"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TOPK_DENSE=75"})," (",(0,i.jsx)(n.code,{children:".env"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Collection structure:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'{\n  "id": "agro_chunk_1234",\n  "vector": [0.123, -0.456, ...],  # 1536-dim for OpenAI\n  "payload": {\n    "file_path": "server/app.py",\n    "start_line": 100,\n    "end_line": 120,\n    "language": "python",\n    "layer": "server",\n    "repo": "agro",\n    "hash": "abc123..."\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-semantic-cards-retrieval",children:"4. Semantic Cards Retrieval"}),"\n",(0,i.jsxs)(n.p,{children:["AGRO generates ",(0,i.jsx)(n.strong,{children:"high-level summaries"})," (cards) for each chunk, then indexes those with BM25. This captures conceptual matches even when code uses different terminology:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Chunk: server/app.py:100-120 (FastAPI endpoint)\n# Card summary:\n"REST API endpoint for answering questions using LangGraph pipeline.\nAccepts question and repo parameters, returns answer with citations."\n'})}),"\n",(0,i.jsx)(n.p,{children:'When you search "how does the answer API work", the card summary matches even if the code doesn\'t mention those exact terms.'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Cards stored in ",(0,i.jsx)(n.code,{children:"data/{repo}/cards.jsonl"})]}),"\n",(0,i.jsxs)(n.li,{children:["BM25 index at ",(0,i.jsx)(n.code,{children:"data/{repo}/bm25_cards/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Chunks from matching cards get ",(0,i.jsx)(n.strong,{children:"+0.08 score bonus"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Build cards:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl -X POST http://127.0.0.1:8012/api/cards/build/start \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"repo\": \"agro\"}'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reciprocal-rank-fusion-rrf",children:"Reciprocal Rank Fusion (RRF)"}),"\n",(0,i.jsxs)(n.p,{children:["RRF combines BM25 and dense results ",(0,i.jsx)(n.strong,{children:"without needing score normalization"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def rrf(dense: list, sparse: list, k: int = 10, kdiv: int = 60):\n    score = defaultdict(float)\n    for rank, chunk_id in enumerate(dense, start=1):\n        score[chunk_id] += 1.0 / (kdiv + rank)\n    for rank, chunk_id in enumerate(sparse, start=1):\n        score[chunk_id] += 1.0 / (kdiv + rank)\n    return sorted(score.items(), key=lambda x: x[1], reverse=True)[:k]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why RRF?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No score calibration needed (BM25 scores \u2260 cosine similarity scores)"}),"\n",(0,i.jsx)(n.li,{children:"Robust to outliers (one method can't dominate)"}),"\n",(0,i.jsx)(n.li,{children:"Simple, fast, battle-tested"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tuning:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"kdiv=60"})," (default, controls rank smoothing)"]}),"\n",(0,i.jsxs)(n.li,{children:["Higher ",(0,i.jsx)(n.code,{children:"kdiv"})," = less weight on top results"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"cross-encoder-reranking",children:"Cross-Encoder Reranking"}),"\n",(0,i.jsxs)(n.p,{children:["After RRF, AGRO applies a ",(0,i.jsx)(n.strong,{children:"learned cross-encoder"})," that scores query-document pairs:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from retrieval.rerank import rerank_results\n\ndocs = rerank_results(query, candidates, top_k=10)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reranker backends:"})}),"\n",(0,i.jsx)(n.h3,{id:"local-cross-encoder-default",children:"Local Cross-Encoder (Default)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Uses sentence-transformers cross-encoder\nmodel = CrossEncoder('cross-encoder/ms-marco-MiniLM-L-6-v2')\nscores = model.predict([(query, doc['code']) for doc in docs])\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pros:"})," Free, private, customizable (train on your code)\n",(0,i.jsx)(n.strong,{children:"Cons:"})," Slower than API rerankers"]}),"\n",(0,i.jsx)(n.h3,{id:"cohere-rerank-api",children:"Cohere Rerank API"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Set RERANK_BACKEND=cohere in .env\n# Uses rerank-3.5 model\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pros:"})," Fast, state-of-the-art accuracy\n",(0,i.jsx)(n.strong,{children:"Cons:"})," $2/1k searches (~$0.002/query)"]}),"\n",(0,i.jsx)(n.h3,{id:"custom-trained-reranker",children:"Custom Trained Reranker"}),"\n",(0,i.jsxs)(n.p,{children:["AGRO includes a ",(0,i.jsx)(n.strong,{children:"self-learning pipeline"})," that trains a custom reranker on YOUR codebase:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 1. Collect feedback (happens automatically via GUI clicks)\n# 2. Mine triplets from logs\ncurl -X POST http://127.0.0.1:8012/api/reranker/mine\n\n# 3. Train model\ncurl -X POST http://127.0.0.1:8012/api/reranker/train \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"epochs\": 3, \"batch_size\": 16}'\n\n# 4. Evaluate\ncurl -X POST http://127.0.0.1:8012/api/reranker/evaluate\n\n# 5. Deploy (hot-reload, no server restart)\n# Happens automatically if training beats baseline\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/agro-rag-engine/features/learning-reranker",children:"Learning Reranker"})," for details."]}),"\n",(0,i.jsx)(n.h2,{id:"scoring-bonuses",children:"Scoring Bonuses"}),"\n",(0,i.jsxs)(n.p,{children:["After reranking, AGRO applies ",(0,i.jsx)(n.strong,{children:"contextual bonuses"})," to boost relevant results:"]}),"\n",(0,i.jsx)(n.h3,{id:"query-intent-classification",children:"Query Intent Classification"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _classify_query(q: str) -> str:\n    \"\"\"Classify query intent for layer bonuses.\"\"\"\n    if 'gui' in q or 'dashboard' in q: return 'gui'\n    if 'search' in q or 'bm25' in q: return 'retrieval'\n    if 'index' in q or 'chunk' in q: return 'indexer'\n    if 'eval' in q or 'test' in q: return 'eval'\n    if 'docker' in q or 'grafana' in q: return 'infra'\n    return 'server'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"layer-bonuses-configurable-via-gui",children:"Layer Bonuses (Configurable via GUI)"}),"\n",(0,i.jsx)(n.p,{children:"Boost results from directories matching the query intent:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Example: \"How does hybrid search work?\" \u2192 intent='retrieval'\nlayer_bonuses = {\n    'retrieval': {'retrieval': +0.15, 'server': +0.05},\n    'gui': {'gui': +0.15, 'server': +0.05},\n    'indexer': {'indexer': +0.15, 'retrieval': +0.08},\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Configured per-repo in ",(0,i.jsx)(n.code,{children:"repos.json"})," or GUI Settings \u2192 Profiles."]}),"\n",(0,i.jsx)(n.h3,{id:"path-bonuses",children:"Path Bonuses"}),"\n",(0,i.jsx)(n.p,{children:"Boost specific directories:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Configured via repos.json or GUI\npath_boosts = ['server/', 'api/', 'retrieval/']  # +0.06 each\n"})}),"\n",(0,i.jsx)(n.h3,{id:"language-bonuses-code-vs-docs",children:"Language Bonuses (Code vs Docs)"}),"\n",(0,i.jsx)(n.p,{children:'For queries like "where is the implementation", heavily boost code files:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if wants_code:\n    if lang in ('python', 'javascript', 'typescript', 'go', 'rust'):\n        score += 0.50  # Massive boost\n    elif lang in ('markdown', 'md', 'rst', 'txt'):\n        score -= 0.50  # Massive penalty\n"})}),"\n",(0,i.jsx)(n.h3,{id:"card-hit-bonus",children:"Card Hit Bonus"}),"\n",(0,i.jsx)(n.p,{children:"If a chunk was retrieved via semantic card matching:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if chunk_id in card_chunk_ids:\n    score += 0.08\n"})}),"\n",(0,i.jsx)(n.h2,{id:"confidence-gating",children:"Confidence Gating"}),"\n",(0,i.jsxs)(n.p,{children:["AGRO tracks ",(0,i.jsx)(n.strong,{children:"retrieval confidence"})," to prevent hallucination:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# In LangGraph pipeline\nif state["confidence"] < 0.3:\n    return {"generation": "I don\'t have enough context to answer that."}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Confidence sources:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Top rerank score"})," (primary signal)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Score gap"})," between #1 and #2 result"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Number of high-confidence results"})," (score > 0.5)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Threshold tunable in GUI Settings \u2192 Performance"}),"\n",(0,i.jsx)(n.li,{children:"Default: 0.3 (conservative)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"local-hydration",children:"Local Hydration"}),"\n",(0,i.jsxs)(n.p,{children:["To save memory, Qdrant payloads ",(0,i.jsx)(n.strong,{children:"don't include full code"}),". AGRO hydrates chunks lazily:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _hydrate_docs_inplace(repo: str, docs: list[dict]):\n    \"\"\"Load full code from chunks.jsonl for top-k results only.\"\"\"\n    needed_ids = {d['id'] for d in docs if not d.get('code')}\n\n    # Stream chunks.jsonl, load only needed chunks\n    with open(f'data/{repo}/chunks.jsonl') as f:\n        for line in f:\n            chunk = json.loads(line)\n            if chunk['id'] in needed_ids:\n                # Truncate to max_chars (default: 2000)\n                docs[i]['code'] = chunk['code'][:2000]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Modes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HYDRATION_MODE=lazy"})," (default): Load code after retrieval"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HYDRATION_MODE=eager"}),": Store code in Qdrant (higher memory)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HYDRATION_MODE=none"}),": Never load code (metadata only)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tuning:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HYDRATION_MAX_CHARS=2000"})," (default, per chunk)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-tuning",children:"Performance Tuning"}),"\n",(0,i.jsx)(n.h3,{id:"recall-vs-latency",children:"Recall vs Latency"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# High recall (slower, more candidates for reranking)\nTOPK_SPARSE=100\nTOPK_DENSE=100\n\n# Fast (fewer candidates, risk missing relevant chunks)\nTOPK_SPARSE=50\nTOPK_DENSE=50\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multi-query-expansion",children:"Multi-Query Expansion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# More variants = better recall, higher cost\n# Each variant runs full retrieval pipeline\nexport QUERY_EXPANSION_COUNT=4  # default\n\n# Disable for speed\nexport QUERY_EXPANSION_COUNT=1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reranker-selection",children:"Reranker Selection"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Backend"}),(0,i.jsx)(n.th,{children:"Latency"}),(0,i.jsx)(n.th,{children:"Cost"}),(0,i.jsx)(n.th,{children:"Accuracy"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Local (MiniLM)"}),(0,i.jsx)(n.td,{children:"~200ms"}),(0,i.jsx)(n.td,{children:"$0"}),(0,i.jsx)(n.td,{children:"Good"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Custom trained"}),(0,i.jsx)(n.td,{children:"~150ms"}),(0,i.jsx)(n.td,{children:"$0"}),(0,i.jsx)(n.td,{children:"Excellent (on your code)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Cohere rerank-3.5"}),(0,i.jsx)(n.td,{children:"~50ms"}),(0,i.jsx)(n.td,{children:"$0.002/query"}),(0,i.jsx)(n.td,{children:"Excellent (general)"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"observability",children:"Observability"}),"\n",(0,i.jsx)(n.h3,{id:"langtrace-spans",children:"LangTrace Spans"}),"\n",(0,i.jsx)(n.p,{children:"AGRO instruments the full pipeline with OpenTelemetry:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"agro.vector_search (50ms)\nagro.bm25_search (30ms)\nagro.rrf_fusion (5ms)\nagro.cross_encoder_rerank (200ms)\n"})}),"\n",(0,i.jsx)(n.p,{children:"View in LangSmith or any OTEL-compatible backend."}),"\n",(0,i.jsx)(n.h3,{id:"prometheus-metrics",children:"Prometheus Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'agro_request_duration_seconds{stage="retrieve"}\nagro_request_duration_seconds{stage="rerank"}\nagro_retrieval_hits{topk="10"}\nagro_rr_mrr\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Grafana dashboards included (see ",(0,i.jsx)(n.a,{href:"/agro-rag-engine/operations/monitoring",children:"Monitoring"}),")."]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"no-results-found",children:'"No results found"'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Check index exists:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ls data/agro/bm25_index/\nls data/agro/  # Should have chunks.jsonl\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Check Qdrant collection:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl http://127.0.0.1:6333/collections/code_chunks_agro\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test BM25 directly:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from retrieval.hybrid_search import search\ndocs = search("test", repo="agro", final_k=10)\nprint(len(docs))\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"results-are-wrong",children:'"Results are wrong"'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Check discriminative keywords"})," (may be boosting wrong files):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cat discriminative_keywords.json\n# If boosting test files, regenerate with exclude patterns\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Adjust layer bonuses"})," in GUI Settings \u2192 Profiles"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Train custom reranker"})," on your golden questions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Add golden questions in GUI Evals tab\n# Train reranker on them\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"embeddings-failing",children:'"Embeddings failing"'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check API key\necho $OPENAI_API_KEY\n\n# Test embedding directly\ncurl http://127.0.0.1:8012/health\n\n# Switch to local embeddings\nexport EMBEDDING_TYPE=local\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-reference",children:"Configuration Reference"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Environment variables:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Retrieval\nTOPK_SPARSE=75\nTOPK_DENSE=75\nQUERY_EXPANSION_COUNT=4\n\n# Embeddings\nEMBEDDING_TYPE=openai  # openai|voyage|local\nOPENAI_API_KEY=sk-...\nVOYAGE_API_KEY=...\n\n# Reranking\nRERANK_BACKEND=local  # local|cohere\nCOHERE_API_KEY=...\n\n# Hydration\nHYDRATION_MODE=lazy  # lazy|eager|none\nHYDRATION_MAX_CHARS=2000\n\n# Confidence\nCONFIDENCE_THRESHOLD=0.3\n\n# Vector database\nQDRANT_URL=http://127.0.0.1:6333\nCOLLECTION_NAME=code_chunks_agro\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Per-repo settings"})," (via GUI or ",(0,i.jsx)(n.code,{children:"repos.json"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "agro": {\n    "layer_bonuses": {\n      "retrieval": {"retrieval": 0.15, "server": 0.05}\n    },\n    "path_boosts": ["server/", "retrieval/", "api/"],\n    "exclude_patterns": ["tests/", "*.md"]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/agro-rag-engine/api/endpoints",children:"API Endpoints"})})," - Use hybrid search via REST API"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/agro-rag-engine/features/learning-reranker",children:"Learning Reranker"})})," - Train a custom model on your code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/agro-rag-engine/configuration/filtering",children:"Configuration"})})," - Tune filtering and exclusions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/agro-rag-engine/operations/monitoring",children:"Monitoring"})})," - Track retrieval quality with Grafana"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(6540);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);