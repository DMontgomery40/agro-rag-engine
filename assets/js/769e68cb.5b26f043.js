"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[439],{5111:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"development/architecture","title":"Architecture","description":"AGRO is a production-grade RAG system with a modular architecture designed for code retrieval. This page explains the system components, data flow, and key design decisions.","source":"@site/docs/development/architecture.md","sourceDirName":"development","slug":"/development/architecture","permalink":"/agro-rag-engine/development/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/DMontgomery40/agro-rag-engine/tree/main/website/docs/development/architecture.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"VS Code Setup","permalink":"/agro-rag-engine/development/vscode-setup"},"next":{"title":"Deployment","permalink":"/agro-rag-engine/operations/deployment"}}');var i=r(4848),a=r(8453);const t={sidebar_position:3},l="Architecture",o={},d=[{value:"System Overview",id:"system-overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. FastAPI Server (<code>server/app.py</code>)",id:"1-fastapi-server-serverapppy",level:3},{value:"2. LangGraph Pipeline (<code>server/langgraph_app.py</code>)",id:"2-langgraph-pipeline-serverlanggraph_apppy",level:3},{value:"3. Hybrid Search Engine (<code>retrieval/hybrid_search.py</code>)",id:"3-hybrid-search-engine-retrievalhybrid_searchpy",level:3},{value:"Stage 1: Multi-Query Expansion",id:"stage-1-multi-query-expansion",level:4},{value:"Stage 2: Parallel Retrieval",id:"stage-2-parallel-retrieval",level:4},{value:"Stage 3: Reciprocal Rank Fusion (RRF)",id:"stage-3-reciprocal-rank-fusion-rrf",level:4},{value:"Stage 4: Cross-Encoder Reranking",id:"stage-4-cross-encoder-reranking",level:4},{value:"Stage 5: Contextual Bonuses",id:"stage-5-contextual-bonuses",level:4},{value:"Stage 6: Local Hydration",id:"stage-6-local-hydration",level:4},{value:"4. AST-Aware Indexer (<code>retrieval/ast_chunker.py</code>)",id:"4-ast-aware-indexer-retrievalast_chunkerpy",level:3},{value:"5. Vector Database (Qdrant)",id:"5-vector-database-qdrant",level:3},{value:"6. BM25 Sparse Index (<code>bm25s</code>)",id:"6-bm25-sparse-index-bm25s",level:3},{value:"7. Self-Learning Reranker",id:"7-self-learning-reranker",level:3},{value:"8. Semantic Cards",id:"8-semantic-cards",level:3},{value:"9. MCP Servers",id:"9-mcp-servers",level:3},{value:"10. Observability Stack",id:"10-observability-stack",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Indexing Pipeline",id:"indexing-pipeline",level:3},{value:"Query Pipeline",id:"query-pipeline",level:3},{value:"Key Design Decisions",id:"key-design-decisions",level:3},{value:"1. Hybrid Search (BM25 + Vectors)",id:"1-hybrid-search-bm25--vectors",level:4},{value:"2. Lazy Hydration (Load Code After Rerank)",id:"2-lazy-hydration-load-code-after-rerank",level:4},{value:"3. AST\u2011Aware Chunking",id:"3-astaware-chunking",level:4},{value:"4. Self\u2011Learning Reranker",id:"4-selflearning-reranker",level:4},{value:"5. Redis\u2011Backed LangGraph Checkpoints",id:"5-redisbacked-langgraph-checkpoints",level:4},{value:"6. Confidence Gating",id:"6-confidence-gating",level:4},{value:"Storage Layout",id:"storage-layout",level:3},{value:"Infrastructure Containers",id:"infrastructure-containers",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,i.jsx)(n.p,{children:"AGRO is a production-grade RAG system with a modular architecture designed for code retrieval. This page explains the system components, data flow, and key design decisions."}),"\n",(0,i.jsx)(n.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         AGRO Architecture                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Claude Code  \u2502      \u2502   Web GUI    \u2502      \u2502  CLI Chat    \u2502\n\u2502   (STDIO)    \u2502      \u2502   (HTTP)     \u2502      \u2502   (Local)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                     \u2502                     \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502    FastAPI Server       \u2502\n                \u2502    (port 8012)          \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                    \u2502                    \u2502\n   \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 LangGraph\u2502    \u2502  Hybrid Search   \u2502   \u2502  Indexer    \u2502\n   \u2502 Pipeline \u2502    \u2502  (BM25 + Vector) \u2502   \u2502  (AST)      \u2502\n   \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                    \u2502                    \u2502\n        \u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n        \u2502         \u2502          \u2502          \u2502        \u2502\n   \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510  \u2502\n   \u2502  Redis  \u2502 \u2502BM25S \u2502 \u2502 Qdrant  \u2502 \u2502Cohere  \u2502  \u2502\n   \u2502Checkpts \u2502 \u2502Index \u2502 \u2502 Vectors \u2502 \u2502Rerank  \u2502  \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n                                                  \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502\n   \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502  Observability Stack                    \u2502\n   \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n   \u2502  \u2502Prometheus\u2502  \u2502 Grafana  \u2502  \u2502LangSmth\u2502\u2502\n   \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,i.jsxs)(n.h3,{id:"1-fastapi-server-serverapppy",children:["1. FastAPI Server (",(0,i.jsx)(n.code,{children:"server/app.py"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," HTTP API gateway for all AGRO operations"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key endpoints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/answer"})," - LangGraph RAG pipeline (retrieval + generation + citations)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/search"})," - Hybrid search only (no LLM generation)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/api/chat"})," - Stateful conversation with Redis checkpoints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/api/index/*"})," - Indexing operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/api/golden/*"})," - Golden test management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/api/reranker/*"})," - Reranker training pipeline"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/api/docker/*"})," - Infrastructure management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/metrics"})," - Prometheus metrics"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Technology:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"FastAPI 0.115+ (async, Pydantic validation)"}),"\n",(0,i.jsx)(n.li,{children:"Uvicorn ASGI server"}),"\n",(0,i.jsx)(n.li,{children:"Prometheus client for metrics"}),"\n",(0,i.jsx)(n.li,{children:"LangTrace for OpenTelemetry tracing"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File location:"})," ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/server/app.py"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"2-langgraph-pipeline-serverlanggraph_apppy",children:["2. LangGraph Pipeline (",(0,i.jsx)(n.code,{children:"server/langgraph_app.py"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," Stateful RAG workflow with conditional routing"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"State machine:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class RAGState(TypedDict):\n    question: str\n    documents: Annotated[List[Dict], operator.add]\n    generation: str\n    iteration: int\n    confidence: float\n    repo: str\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Flow:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Entry \u2192 retrieve_node\n         \u2193\n     route_after_retrieval (confidence gating)\n         \u2193\n    \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502         \u2502             \u2502\ngenerate   rewrite    fallback\n    \u2502      query          \u2502\n    \u2193         \u2193           \u2193\n   END    retrieve      END\n            (retry)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Confidence gating thresholds:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CONF_TOP1"}),": 0.62 (top result rerank score)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CONF_AVG5"}),": 0.55 (average of top 5)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CONF_ANY"}),": 0.55 (overall confidence)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If confidence is too low after 3 iterations, fallback message returned."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Redis checkpoints:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'checkpointer = RedisSaver(redis_url="redis://127.0.0.1:6379/0")\ngraph = builder.compile(checkpointer=checkpointer)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Enables stateful conversation with memory per ",(0,i.jsx)(n.code,{children:"thread_id"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File location:"})," ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/server/langgraph_app.py"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"3-hybrid-search-engine-retrievalhybrid_searchpy",children:["3. Hybrid Search Engine (",(0,i.jsx)(n.code,{children:"retrieval/hybrid_search.py"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," Multi-stage retrieval combining BM25, dense vectors, and semantic cards"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pipeline stages:"})}),"\n",(0,i.jsx)(n.h4,{id:"stage-1-multi-query-expansion",children:"Stage 1: Multi-Query Expansion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def expand_queries(query: str, m: int = 4) -> List[str]:\n    """Generate m search-optimized query variants via LLM."""\n    # Original query + (m-1) LLM-rewritten variants\n    # Expands CamelCase, includes API nouns, removes stop words\n'})}),"\n",(0,i.jsx)(n.h4,{id:"stage-2-parallel-retrieval",children:"Stage 2: Parallel Retrieval"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# BM25 sparse search\nbm25_retriever = Retrieve.load("data/agro/bm25_index")\nsparse_results = bm25_retriever.retrieve(tokens, k=75)\n\n# Dense vector search (Qdrant)\nqclient.query_points(\n    collection_name="code_chunks_agro",\n    query=embedding,\n    limit=75\n)\n\n# Semantic cards (conceptual matches)\ncard_bm25.retrieve(query_tokens, k=20)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"stage-3-reciprocal-rank-fusion-rrf",children:"Stage 3: Reciprocal Rank Fusion (RRF)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def rrf(dense: list, sparse: list, k: int = 10, kdiv: int = 60):\n    score = defaultdict(float)\n    for rank, chunk_id in enumerate(dense, start=1):\n        score[chunk_id] += 1.0 / (kdiv + rank)\n    for rank, chunk_id in enumerate(sparse, start=1):\n        score[chunk_id] += 1.0 / (kdiv + rank)\n    return sorted(score.items(), key=lambda x: x[1], reverse=True)[:k]\n"})}),"\n",(0,i.jsx)(n.p,{children:"No score normalization needed\u2014rank-based fusion is robust."}),"\n",(0,i.jsx)(n.h4,{id:"stage-4-cross-encoder-reranking",children:"Stage 4: Cross-Encoder Reranking"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Local reranker (default)\nmodel = CrossEncoder('cross-encoder/ms-marco-MiniLM-L-6-v2')\nscores = model.predict([(query, doc['code']) for doc in docs])\n\n# Or Cohere Rerank API\ncohere.rerank(query=query, documents=[d['code'] for d in docs])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"stage-5-contextual-bonuses",children:"Stage 5: Contextual Bonuses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Path boost (+0.06 for prioritized directories)\nif any(doc['file_path'].startswith(p) for p in path_boosts):\n    doc['score'] += 0.06\n\n# Layer bonus (intent-based, e.g., \"gui\" query \u2192 gui/ files +0.15)\nif query_intent == 'gui' and 'gui/' in doc['file_path']:\n    doc['score'] += 0.15\n\n# Card hit bonus (+0.08 if matched via semantic card)\nif doc['id'] in card_chunk_ids:\n    doc['score'] += 0.08\n\n# Language bonus (code vs docs)\nif wants_code and doc['language'] in ('python', 'javascript'):\n    doc['score'] += 0.50\n"})}),"\n",(0,i.jsx)(n.h4,{id:"stage-6-local-hydration",children:"Stage 6: Local Hydration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _hydrate_docs_inplace(repo: str, docs: list[dict]):\n    \"\"\"Load full code from chunks.jsonl (lazy loading).\"\"\"\n    with open(f'data/{repo}/chunks.jsonl') as f:\n        for line in f:\n            chunk = json.loads(line)\n            if chunk['id'] in needed_ids:\n                docs[i]['code'] = chunk['code'][:2000]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Qdrant payloads don't include full code (saves memory). Hydration happens after reranking for top-K only."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File location:"})," ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"4-ast-aware-indexer-retrievalast_chunkerpy",children:["4. AST-Aware Indexer (",(0,i.jsx)(n.code,{children:"retrieval/ast_chunker.py"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," Parse code into semantically meaningful chunks"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Supported languages:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Python, JavaScript, TypeScript, Go, Java, Rust, C, C++, Bash"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Chunking strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def chunk_code(src: str, fpath: str, lang: str, target: int = 900) -> List[Dict]:\n    """\n    AST-aware chunking with overlap.\n\n    - Uses tree-sitter to parse AST\n    - Extracts functions, classes, methods\n    - Adds imports to each chunk (context)\n    - Falls back to greedy chunking if AST fails\n    """\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example chunk:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "id": "abc123",\n  "file_path": "server/app.py",\n  "start_line": 100,\n  "end_line": 120,\n  "language": "python",\n  "type": "function",\n  "name": "health",\n  "imports": ["from fastapi import FastAPI", ...],\n  "code": "def health():\\n    ..."\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Overlap:"})," 20 lines between chunks to preserve context."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File location:"})," ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/retrieval/ast_chunker.py"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-vector-database-qdrant",children:"5. Vector Database (Qdrant)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," Store and search dense embeddings"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Docker service:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'qdrant:\n  image: qdrant/qdrant:v1.15.5\n  ports:\n    - "6333:6333"  # HTTP API\n    - "6334:6334"  # gRPC\n  volumes:\n    - ../data/qdrant:/qdrant/storage\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Collection structure:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'{\n  "vectors": {\n    "size": 1536,  # OpenAI text-embedding-3-large\n    "distance": "Cosine"\n  },\n  "payload_schema": {\n    "file_path": "keyword",\n    "language": "keyword",\n    "layer": "keyword",\n    "repo": "keyword",\n    "start_line": "integer",\n    "end_line": "integer"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why not store code in payload?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keeps memory usage low (only metadata + vector)"}),"\n",(0,i.jsxs)(n.li,{children:["Code loaded lazily from ",(0,i.jsx)(n.code,{children:"chunks.jsonl"})," after reranking"]}),"\n",(0,i.jsx)(n.li,{children:"Enables larger indexes with same RAM"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File location:"})," ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/infra/docker-compose.yml"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"6-bm25-sparse-index-bm25s",children:["6. BM25 Sparse Index (",(0,i.jsx)(n.code,{children:"bm25s"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," Keyword-based retrieval with stemming"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Index creation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from bm25s import BM25, Tokenizer\nfrom Stemmer import Stemmer\n\ntokenizer = Tokenizer(stemmer=Stemmer('english'), stopwords='en')\ncorpus_tokens = tokenizer.tokenize(corpus)\n\nretriever = BM25()\nretriever.index(corpus_tokens)\nretriever.save(\"data/agro/bm25_index\")\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Search:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"query_tokens = tokenizer.tokenize([query])\nids, scores = retriever.retrieve(query_tokens, k=75)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why BM25 matters for code:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exact matches for function names, class names, API endpoints"}),"\n",(0,i.jsx)(n.li,{children:"Handles acronyms, camelCase, snake_case better than embeddings"}),"\n",(0,i.jsx)(n.li,{children:"Language-agnostic (no training needed)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File location:"})," BM25 logic in ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/retrieval/hybrid_search.py"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"7-self-learning-reranker",children:"7. Self-Learning Reranker"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," Train custom cross-encoder on your codebase"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pipeline:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"User Feedback \u2192 Triplet Mining \u2192 Model Training \u2192 Eval \u2192 Auto-Promotion\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Feedback collection:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Click tracking (implicit)\nPOST /api/reranker/click {"query_id": "...", "doc_id": "...", "rank": 3}\n\n# Star ratings (explicit)\nPOST /api/feedback {"event_id": "...", "signal": "star5"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Triplet mining:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# From query logs (queries.jsonl)\n# Positive: clicked/high-rated docs\n# Negative: docs ranked below positive\ntriplets = [\n    ("query", "positive_doc", "negative_doc"),\n    ...\n]\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Training:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from sentence_transformers import CrossEncoder, InputExample\nfrom sentence_transformers.cross_encoder.evaluation import CERerankingEvaluator\n\nmodel = CrossEncoder('cross-encoder/ms-marco-MiniLM-L-6-v2')\ntrain_samples = [\n    InputExample(texts=[q, pos], label=1.0),\n    InputExample(texts=[q, neg], label=0.0)\n]\nmodel.fit(\n    train_dataloader=DataLoader(train_samples, batch_size=16),\n    epochs=3,\n    warmup_steps=100\n)\nmodel.save(\"models/cross-encoder-agro\")\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Evaluation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Run on golden questions\nmrr_baseline = 0.72  # Baseline MRR\nmrr_reranker = 0.88  # Custom reranker MRR\n\nif mrr_reranker > mrr_baseline * 1.05:\n    # Auto-promote (hot-reload, no server restart)\n    promote_reranker()\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"File locations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Training logic: ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/server/app.py"})," (",(0,i.jsx)(n.code,{children:"/api/reranker/train"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Triplet mining: ",(0,i.jsx)(n.code,{children:"/api/reranker/mine"})]}),"\n",(0,i.jsxs)(n.li,{children:["Model storage: ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/models/cross-encoder-agro/"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"8-semantic-cards",children:"8. Semantic Cards"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," High-level summaries for conceptual matches"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Generation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# For each chunk, generate summary card via LLM\ncard = generate_text(\n    user_input=f"Summarize this code in one sentence:\\n\\n{chunk[\'code\']}",\n    system_instructions="You summarize code at a high level."\n)\n\n# Store in cards.jsonl\n{"chunk_id": "abc123", "card": "REST API endpoint for answering questions..."}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Indexing:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Build separate BM25 index for cards\ncard_corpus = [card['card'] for card in cards]\ncard_bm25 = BM25()\ncard_bm25.index(tokenizer.tokenize(card_corpus))\ncard_bm25.save(\"data/agro/bm25_cards\")\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Retrieval:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Search card index\ncard_hits = card_bm25.retrieve(query_tokens, k=20)\n\n# Get chunk IDs from matching cards\ncard_chunk_ids = [cards[hit_id]['chunk_id'] for hit_id in card_hits]\n\n# Boost these chunks in final ranking (+0.08)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why cards?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Capture intent even when code uses different terminology"}),"\n",(0,i.jsx)(n.li,{children:'Enable "fuzzy" conceptual matches'}),"\n",(0,i.jsx)(n.li,{children:"Improve recall for high-level queries"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File location:"})," Card builder in ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/server/cards_builder.py"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"9-mcp-servers",children:"9. MCP Servers"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Role:"})," Multi-transport access to RAG (STDIO, HTTP, SSE, WebSocket)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"STDIO (for Claude Code/Codex):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "agro": {\n      "command": "python",\n      "args": ["/path/to/agro/mcp/stdio_server.py"],\n      "env": {\n        "REPO": "agro"\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"HTTP (for remote agents):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Start server\npython mcp/http_server.py --port 8013\n\n# Call from agent\ncurl -X POST http://127.0.0.1:8013/tools/rag_search \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{"query": "How does indexing work?", "repo": "agro"}\'\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tools exposed:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rag_answer"}),": Full RAG pipeline (retrieval + generation + citations)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rag_search"}),": Retrieval only (no LLM)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"netlify_deploy"}),": Deploy docs to Netlify"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"web_get"}),": Fetch web content"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Per-transport config:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# STDIO uses local model (free)\nSTDIO_GENERATION_MODEL=qwen3-coder:30b\n\n# HTTP uses cloud model (cheap)\nHTTP_GENERATION_MODEL=gpt-4o-mini\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"File locations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["STDIO: ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/mcp/stdio_server.py"})]}),"\n",(0,i.jsxs)(n.li,{children:["HTTP: ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/mcp/http_server.py"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"10-observability-stack",children:"10. Observability Stack"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prometheus metrics:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prometheus",children:'# Request counts\nagro_requests_total{route="/answer", model="gpt-4o", success="true"}\n\n# Latency histograms\nagro_request_duration_seconds{stage="retrieve"}\nagro_request_duration_seconds{stage="rerank"}\n\n# Token usage\nagro_tokens_total{role="prompt", provider="openai", model="gpt-4o"}\n\n# Retrieval quality\nagro_rr_mrr  # Mean reciprocal rank\nagro_retrieval_hits{topk="10"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Grafana dashboards:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Request rates and latency (P50, P95, P99)"}),"\n",(0,i.jsx)(n.li,{children:"Error rates and alert status"}),"\n",(0,i.jsx)(n.li,{children:"Token usage and cost estimation"}),"\n",(0,i.jsx)(n.li,{children:"Retrieval quality (MRR, Hit@K)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"LangSmith tracing:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Automatic tracing (via LangTrace)\n# View at https://smith.langchain.com/public/{trace_id}\n\n# Embedded in GUI\nGET /api/langsmith/latest \u2192 share URL\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Docker services:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'prometheus:\n  image: prom/prometheus:latest\n  ports: ["9090:9090"]\n  volumes:\n    - ./prometheus.yml:/etc/prometheus/prometheus.yml\n\ngrafana:\n  image: grafana/grafana:latest\n  ports: ["3000:3000"]\n  environment:\n    - GF_SECURITY_ALLOW_EMBEDDING=true  # For GUI iframe\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File location:"})," ",(0,i.jsx)(n.code,{children:"/Users/davidmontgomery/agro-rag-engine/infra/docker-compose.yml"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,i.jsx)(n.h3,{id:"indexing-pipeline",children:"Indexing Pipeline"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Source Code (Python, JS, TS, Go, etc.)\n  \u2193\nAST Chunker (tree-sitter parsing)\n  \u2193\nChunks (functions, classes with imports)\n  \u2193\nParallel Processing:\n  \u251c\u2500 BM25 Index (stemmed tokens)\n  \u251c\u2500 Dense Vectors (OpenAI/Voyage/Local embeddings)\n  \u2514\u2500 Semantic Cards (LLM-generated summaries)\n  \u2193\nStorage:\n  \u251c\u2500 data/{repo}/chunks.jsonl (full code)\n  \u251c\u2500 data/{repo}/bm25_index/ (BM25S)\n  \u251c\u2500 data/{repo}/bm25_cards/ (Card BM25)\n  \u2514\u2500 Qdrant collection (vectors + metadata)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time:"})," 10-20 minutes for ~5000 chunks (depends on embedding provider)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cost:"})," $1-5 for embeddings + card generation (cloud models)."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"query-pipeline",children:"Query Pipeline"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'User Query ("How does hybrid search work?")\n  \u2193\nMulti-Query Expansion (LLM)\n  \u251c\u2500 "How does hybrid search work?"\n  \u251c\u2500 "hybrid search implementation"\n  \u251c\u2500 "BM25 and vector fusion algorithm"\n  \u2514\u2500 "retrieval pipeline code"\n  \u2193\nParallel Retrieval (for each variant):\n  \u251c\u2500 BM25 Search (top 75)\n  \u251c\u2500 Dense Vector Search (top 75)\n  \u2514\u2500 Semantic Card Search (top 20)\n  \u2193\nReciprocal Rank Fusion (RRF)\n  \u2193\nCross-Encoder Reranking (top 100 \u2192 scored)\n  \u2193\nContextual Bonuses (path, layer, language, cards)\n  \u2193\nLocal Hydration (load full code for top K)\n  \u2193\nLangGraph Confidence Gating\n  \u251c\u2500 High confidence (\u22650.62) \u2192 Generate answer\n  \u251c\u2500 Low confidence (\\<0.5lt;0.55) \u2192 Rewrite query and retry\n  \u2514\u2500 Still low after 3 retries \u2192 Fallback message\n  \u2193\nLLM Generation (with citations)\n  \u2193\nAnswer + Documents + Confidence Score\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Latency:"})," 1-3 seconds (local reranker), 500ms-1s (Cohere rerank)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tokens:"})," ~1,141 per query (91% reduction vs file reading)."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"key-design-decisions",children:"Key Design Decisions"}),"\n",(0,i.jsx)(n.h4,{id:"1-hybrid-search-bm25--vectors",children:"1. Hybrid Search (BM25 + Vectors)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Problem"}),": Pure vector search ignores literal matches (config.yaml \u2260 \u201cconfig\u201d), while BM25 can\u2019t catch phrasing or synonyms."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Approach"}),": Fuse BM25 + vectors via Reciprocal Rank Fusion (RRF) \u2014 no score normalization pain, just precision gains."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proof"}),":"]}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Mode"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Top-1"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"MRR"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Hybrid (RRF)"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"82%"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"0.88"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Dense only"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"68%"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"0.74"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BM25 only"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"61%"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"0.69"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Hybrid wins everywhere. That\u2019s why it\u2019s the default."}),"\n",(0,i.jsx)(n.h4,{id:"2-lazy-hydration-load-code-after-rerank",children:"2. Lazy Hydration (Load Code After Rerank)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Problem"}),": Keeping every code chunk inline in Qdrant explodes storage (\u2248 10\xd7 more memory)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Solution"}),": Store metadata only, then hydrate the top\u2011K from ",(0,i.jsx)(n.code,{children:"chunks.jsonl"})," after reranking."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade\u2011off"}),": Adds ~50 ms of I/O, saves gigabytes of RAM."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-astaware-chunking",children:"3. AST\u2011Aware Chunking"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Problem"}),": Line-based splits cut functions in half, destroying context."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Solution"}),": Parse with tree\u2011sitter, chunk by function/class, and attach relevant imports."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Result"}),": Semantically complete chunks \u2192 higher retrieval quality, fewer hallucinations."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"4-selflearning-reranker",children:"4. Self\u2011Learning Reranker"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Problem"}),": Pretrained rerankers (e.g., MS MARCO) don\u2019t understand your repo."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Solution"}),": Train a cross\u2011encoder on query logs and golden questions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Impact"}),": MRR jumps from 0.72 \u2192 0.88 on the AGRO codebase. It improves the more you use it."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"5-redisbacked-langgraph-checkpoints",children:"5. Redis\u2011Backed LangGraph Checkpoints"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Problem"}),": Stateless pipelines forget context; multi\u2011turn reasoning is lost."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Solution"}),": Redis stores LangGraph checkpoints for conversation memory and resumable chains."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade\u2011off"}),": Adds one service you likely already run for caching."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"6-confidence-gating",children:"6. Confidence Gating"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Problem"}),": LLMs hallucinate when retrieval quality dips."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Solution"}),": Gate answers on rerank\u2011based confidence; rewrite query or return a safe fallback when low."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Result"}),": Zero hallucinated answers across the golden test suite."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"storage-layout",children:"Storage Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"agro-rag-engine/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 {repo}/\n\u2502   \u2502   \u251c\u2500\u2500 chunks.jsonl        # Source-of-truth code chunks\n\u2502   \u2502   \u251c\u2500\u2500 cards.jsonl         # Semantic summaries\n\u2502   \u2502   \u251c\u2500\u2500 bm25_index/         # Sparse index\n\u2502   \u2502   \u251c\u2500\u2500 bm25_cards/         # Card-level index\n\u2502   \u2502   \u251c\u2500\u2500 queries.jsonl       # Query logs (for reranker training)\n\u2502   \u2502   \u2514\u2500\u2500 golden.json         # Golden test suite\n\u2502   \u251c\u2500\u2500 qdrant/                 # Vector store (Docker volume)\n\u2502   \u251c\u2500\u2500 redis/                  # Redis persistence (optional)\n\u2502   \u2514\u2500\u2500 exclude_globs.txt       # Files skipped during indexing\n\u2502\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 cross-encoder-agro/     # Custom reranker checkpoint\n\u2502       \u251c\u2500\u2500 config.json\n\u2502       \u251c\u2500\u2500 model.safetensors\n\u2502       \u2514\u2500\u2500 tokenizer/\n\u2502\n\u251c\u2500\u2500 gui/\n\u2502   \u251c\u2500\u2500 index.html              # Web GUI entry\n\u2502   \u251c\u2500\u2500 js/                     # Front-end modules\n\u2502   \u2514\u2500\u2500 profiles/               # Saved tuning profiles\n\u2502\n\u251c\u2500\u2500 server/\n\u2502   \u251c\u2500\u2500 app.py                  # FastAPI endpoints\n\u2502   \u2514\u2500\u2500 langgraph_app.py        # LangGraph pipeline logic\n\u2502\n\u251c\u2500\u2500 retrieval/\n\u2502   \u251c\u2500\u2500 hybrid_search.py        # BM25 + Dense fusion\n\u2502   \u251c\u2500\u2500 ast_chunker.py          # Tree-sitter chunker\n\u2502   \u2514\u2500\u2500 rerank.py               # Cross-encoder reranker\n\u2502\n\u251c\u2500\u2500 mcp/\n\u2502   \u251c\u2500\u2500 stdio_server.py         # MCP STDIO transport\n\u2502   \u2514\u2500\u2500 http_server.py          # MCP HTTP transport\n\u2502\n\u2514\u2500\u2500 infra/\n    \u251c\u2500\u2500 docker-compose.yml      # Infra stack (Qdrant + Redis + Prom + Grafana)\n    \u251c\u2500\u2500 prometheus.yml          # Prometheus config\n    \u251c\u2500\u2500 grafana/provisioning/   # Prebuilt dashboards\n    \u2514\u2500\u2500 prometheus-alert-rules.yml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"infrastructure-containers",children:"Infrastructure Containers"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["qdrant (qdrant/qdrant",":v1",".15.5) \u2014 ports 6333, 6334"]}),"\n",(0,i.jsx)(n.li,{children:"rag-redis (redis/redis-stack:7.2.0-v10) \u2014 port 6379"}),"\n",(0,i.jsxs)(n.li,{children:["agro-alertmanager (prom/alertmanager",":latest",") \u2014 port 9093"]}),"\n",(0,i.jsxs)(n.li,{children:["agro-prometheus (prom/prometheus",":latest",") \u2014 port 9090"]}),"\n",(0,i.jsxs)(n.li,{children:["agro-loki (grafana/loki",":latest",") \u2014 port 3100"]}),"\n",(0,i.jsxs)(n.li,{children:["agro-promtail (grafana/promtail",":latest",") \u2014 ships logs to Loki"]}),"\n",(0,i.jsxs)(n.li,{children:["agro-grafana (grafana/grafana",":latest",") \u2014 port 3000"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/agro-rag-engine/features/rag",children:"RAG System"})})," - Deep dive into hybrid search"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/agro-rag-engine/api/endpoints",children:"API Endpoints"})})," - HTTP API reference"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/agro-rag-engine/operations/deployment",children:"Deployment"})})," - Production setup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/agro-rag-engine/operations/troubleshooting",children:"Troubleshooting"})})," - Common issues"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(6540);const i={},a=s.createContext(i);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);